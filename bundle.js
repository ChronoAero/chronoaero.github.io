/*! For license information please see bundle.js.LICENSE.txt */
(()=>{var e={8594:(e,t,n)=>{"use strict";n.d(t,{Z:()=>o});var r=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|inert|itemProp|itemScope|itemType|itemID|itemRef|on|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const o=(i={},function(e){return void 0===i[e]&&(i[e]=(t=e,r.test(t)||111===t.charCodeAt(0)&&110===t.charCodeAt(1)&&t.charCodeAt(2)<91)),i[e];var t});var i},3426:(e,t,n)=>{"use strict";n.r(t),n.d(t,{decode:()=>s,encode:()=>a});for(var r="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o="undefined"==typeof Uint8Array?[]:new Uint8Array(256),i=0;i<r.length;i++)o[r.charCodeAt(i)]=i;var a=function(e){var t,n=new Uint8Array(e),o=n.length,i="";for(t=0;t<o;t+=3)i+=r[n[t]>>2],i+=r[(3&n[t])<<4|n[t+1]>>4],i+=r[(15&n[t+1])<<2|n[t+2]>>6],i+=r[63&n[t+2]];return o%3==2?i=i.substring(0,i.length-1)+"=":o%3==1&&(i=i.substring(0,i.length-2)+"=="),i},s=function(e){var t,n,r,i,a,s=.75*e.length,u=e.length,l=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var c=new ArrayBuffer(s),f=new Uint8Array(c);for(t=0;t<u;t+=4)n=o[e.charCodeAt(t)],r=o[e.charCodeAt(t+1)],i=o[e.charCodeAt(t+2)],a=o[e.charCodeAt(t+3)],f[l++]=n<<2|r>>4,f[l++]=(15&r)<<4|i>>2,f[l++]=(3&i)<<6|63&a;return c}},3063:(e,t)=>{function n(e){if(e)return function(e){for(var t in n.prototype)e[t]=n.prototype[t];return e}(e)}t.Emitter=n,n.prototype.on=n.prototype.addEventListener=function(e,t){return this._callbacks=this._callbacks||{},(this._callbacks["$"+e]=this._callbacks["$"+e]||[]).push(t),this},n.prototype.once=function(e,t){function n(){this.off(e,n),t.apply(this,arguments)}return n.fn=t,this.on(e,n),this},n.prototype.off=n.prototype.removeListener=n.prototype.removeAllListeners=n.prototype.removeEventListener=function(e,t){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,r=this._callbacks["$"+e];if(!r)return this;if(1==arguments.length)return delete this._callbacks["$"+e],this;for(var o=0;o<r.length;o++)if((n=r[o])===t||n.fn===t){r.splice(o,1);break}return 0===r.length&&delete this._callbacks["$"+e],this},n.prototype.emit=function(e){this._callbacks=this._callbacks||{};for(var t=new Array(arguments.length-1),n=this._callbacks["$"+e],r=1;r<arguments.length;r++)t[r-1]=arguments[r];if(n){r=0;for(var o=(n=n.slice(0)).length;r<o;++r)n[r].apply(this,t)}return this},n.prototype.emitReserved=n.prototype.emit,n.prototype.listeners=function(e){return this._callbacks=this._callbacks||{},this._callbacks["$"+e]||[]},n.prototype.hasListeners=function(e){return!!this.listeners(e).length}},3010:e=>{function t(e){e=e||{},this.ms=e.min||100,this.max=e.max||1e4,this.factor=e.factor||2,this.jitter=e.jitter>0&&e.jitter<=1?e.jitter:0,this.attempts=0}e.exports=t,t.prototype.duration=function(){var e=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var t=Math.random(),n=Math.floor(t*this.jitter*e);e=0==(1&Math.floor(10*t))?e-n:e+n}return 0|Math.min(e,this.max)},t.prototype.reset=function(){this.attempts=0},t.prototype.setMin=function(e){this.ms=e},t.prototype.setMax=function(e){this.max=e},t.prototype.setJitter=function(e){this.jitter=e}},4802:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(o=r))})),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(804)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},804:(e,t,n)=>{e.exports=function(e){function t(e){let n,o,i,a=null;function s(...e){if(!s.enabled)return;const r=s,o=Number(new Date),i=o-(n||o);r.diff=i,r.prev=n,r.curr=o,n=o,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,o)=>{if("%%"===n)return"%";a++;const i=t.formatters[o];if("function"==typeof i){const t=e[a];n=i.call(r,t),e.splice(a,1),a--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return s.namespace=e,s.useColors=t.useColors(),s.color=t.selectColor(e),s.extend=r,s.destroy=t.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(o!==t.namespaces&&(o=t.namespaces,i=t.enabled(e)),i),set:e=>{a=e}}),"function"==typeof t.init&&t.init(s),s}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(o),...t.skips.map(o).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(810),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},810:e=>{var t=1e3,n=60*t,r=60*n,o=24*r;function i(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,a){a=a||{};var s,u,l=typeof e;if("string"===l&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var a=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return 6048e5*a;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===l&&isFinite(e))return a.long?(s=e,(u=Math.abs(s))>=o?i(s,u,o,"day"):u>=r?i(s,u,r,"hour"):u>=n?i(s,u,n,"minute"):u>=t?i(s,u,t,"second"):s+" ms"):function(e){var i=Math.abs(e);return i>=o?Math.round(e/o)+"d":i>=r?Math.round(e/r)+"h":i>=n?Math.round(e/n)+"m":i>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},6431:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1439),o=n(7294),i=n(4394),a=n(4839),s=n(9294),u=n(3573);function l(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function c(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var r=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,r.get?r:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var f=c(o),d=l(o),p=l(a),h=function(e){return{isEnabled:function(t){return e.some((function(e){return!!t[e]}))}}},m={measureLayout:h(["layout","layoutId","drag"]),animation:h(["animate","exit","variants","whileHover","whileTap","whileFocus","whileDrag","whileInView"]),exit:h(["exit"]),drag:h(["drag","dragControls"]),focus:h(["whileFocus"]),hover:h(["whileHover","onHoverStart","onHoverEnd"]),tap:h(["whileTap","onTap","onTapStart","onTapCancel"]),pan:h(["onPan","onPanStart","onPanSessionStart","onPanEnd"]),inView:h(["whileInView","onViewportEnter","onViewportLeave"])};function v(e){for(var t in e)null!==e[t]&&("projectionNodeConstructor"===t?m.projectionNodeConstructor=e[t]:m[t].Component=e[t])}var y=o.createContext({strict:!1}),g=Object.keys(m),b=g.length,w=o.createContext({transformPagePoint:function(e){return e},isStatic:!1,reducedMotion:"never"}),_=o.createContext({});function x(){return o.useContext(_).visualElement}var E=o.createContext(null),k="undefined"!=typeof window,S=k?o.useLayoutEffect:o.useEffect,C={current:null},P=!1;function O(){return!P&&function(){if(P=!0,"undefined"!=typeof window)if(window.matchMedia){var e=window.matchMedia("(prefers-reduced-motion)"),t=function(){return C.current=e.matches};e.addListener(t),t()}else C.current=!1}(),r.__read(o.useState(C.current),1)[0]}function T(){var e=O(),t=o.useContext(w).reducedMotion;return"never"!==t&&("always"===t||e)}function M(e){return"object"==typeof e&&Object.prototype.hasOwnProperty.call(e,"current")}function A(e){return Array.isArray(e)}function R(e){return"string"==typeof e||A(e)}function j(e,t,n,r,o){var i;return void 0===r&&(r={}),void 0===o&&(o={}),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,o)),"string"==typeof t&&(t=null===(i=e.variants)||void 0===i?void 0:i[t]),"function"==typeof t&&(t=t(null!=n?n:e.custom,r,o)),t}function N(e,t,n){var r=e.getProps();return j(r,t,null!=n?n:r.custom,function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.get()})),t}(e),function(e){var t={};return e.forEachValue((function(e,n){return t[n]=e.getVelocity()})),t}(e))}function L(e){var t;return"function"==typeof(null===(t=e.animate)||void 0===t?void 0:t.start)||R(e.initial)||R(e.animate)||R(e.whileHover)||R(e.whileDrag)||R(e.whileTap)||R(e.whileFocus)||R(e.exit)}function F(e){return Boolean(L(e)||e.variants)}function I(e){return Array.isArray(e)?e.join(" "):e}function D(e){var t=o.useRef(null);return null===t.current&&(t.current=e()),t.current}function V(e,t){-1===e.indexOf(t)&&e.push(t)}function B(e,t){var n=e.indexOf(t);n>-1&&e.splice(n,1)}var z=function(){function e(){this.subscriptions=[]}return e.prototype.add=function(e){var t=this;return V(this.subscriptions,e),function(){return B(t.subscriptions,e)}},e.prototype.notify=function(e,t,n){var r=this.subscriptions.length;if(r)if(1===r)this.subscriptions[0](e,t,n);else for(var o=0;o<r;o++){var i=this.subscriptions[o];i&&i(e,t,n)}},e.prototype.getSize=function(){return this.subscriptions.length},e.prototype.clear=function(){this.subscriptions.length=0},e}(),U=function(){function e(e){var t,n=this;this.timeDelta=0,this.lastUpdated=0,this.updateSubscribers=new z,this.velocityUpdateSubscribers=new z,this.renderSubscribers=new z,this.canTrackVelocity=!1,this.updateAndNotify=function(e,t){void 0===t&&(t=!0),n.prev=n.current,n.current=e;var r=a.getFrameData(),o=r.delta,i=r.timestamp;n.lastUpdated!==i&&(n.timeDelta=o,n.lastUpdated=i,p.default.postRender(n.scheduleVelocityCheck)),n.prev!==n.current&&n.updateSubscribers.notify(n.current),n.velocityUpdateSubscribers.getSize()&&n.velocityUpdateSubscribers.notify(n.getVelocity()),t&&n.renderSubscribers.notify(n.current)},this.scheduleVelocityCheck=function(){return p.default.postRender(n.velocityCheck)},this.velocityCheck=function(e){e.timestamp!==n.lastUpdated&&(n.prev=n.current,n.velocityUpdateSubscribers.notify(n.getVelocity()))},this.hasAnimated=!1,this.prev=this.current=e,this.canTrackVelocity=(t=this.current,!isNaN(parseFloat(t)))}return e.prototype.onChange=function(e){return this.updateSubscribers.add(e)},e.prototype.clearListeners=function(){this.updateSubscribers.clear()},e.prototype.onRenderRequest=function(e){return e(this.get()),this.renderSubscribers.add(e)},e.prototype.attach=function(e){this.passiveEffect=e},e.prototype.set=function(e,t){void 0===t&&(t=!0),t&&this.passiveEffect?this.passiveEffect(e,this.updateAndNotify):this.updateAndNotify(e,t)},e.prototype.get=function(){return this.current},e.prototype.getPrevious=function(){return this.prev},e.prototype.getVelocity=function(){return this.canTrackVelocity?s.velocityPerSecond(parseFloat(this.current)-parseFloat(this.prev),this.timeDelta):0},e.prototype.start=function(e){var t=this;return this.stop(),new Promise((function(n){t.hasAnimated=!0,t.stopAnimation=e(n)})).then((function(){return t.clearAnimation()}))},e.prototype.stop=function(){this.stopAnimation&&this.stopAnimation(),this.clearAnimation()},e.prototype.isAnimating=function(){return!!this.stopAnimation},e.prototype.clearAnimation=function(){this.stopAnimation=null},e.prototype.destroy=function(){this.updateSubscribers.clear(),this.renderSubscribers.clear(),this.stop()},e}();function H(e){return new U(e)}var W=function(e){return Boolean(null!==e&&"object"==typeof e&&e.getVelocity)},q=function(e){return 1e3*e},$={linear:s.linear,easeIn:s.easeIn,easeInOut:s.easeInOut,easeOut:s.easeOut,circIn:s.circIn,circInOut:s.circInOut,circOut:s.circOut,backIn:s.backIn,backInOut:s.backInOut,backOut:s.backOut,anticipate:s.anticipate,bounceIn:s.bounceIn,bounceInOut:s.bounceInOut,bounceOut:s.bounceOut},Y=function(e){if(Array.isArray(e)){i.invariant(4===e.length,"Cubic bezier arrays must contain four numerical values.");var t=r.__read(e,4),n=t[0],o=t[1],a=t[2],u=t[3];return s.cubicBezier(n,o,a,u)}return"string"==typeof e?(i.invariant(void 0!==$[e],"Invalid easing type '".concat(e,"'")),$[e]):e},X=function(e,t){return!("zIndex"===e||"number"!=typeof t&&!Array.isArray(t)&&("string"!=typeof t||!u.complex.test(t)||t.startsWith("url(")))},K=function(e){return Array.isArray(e)},Q=function(){return{type:"spring",stiffness:500,damping:25,restSpeed:10}},G=function(e){return{type:"spring",stiffness:550,damping:0===e?2*Math.sqrt(550):30,restSpeed:10}},Z=function(){return{type:"keyframes",ease:"linear",duration:.3}},J=function(e){return{type:"keyframes",duration:.8,values:e}},ee={x:Q,y:Q,z:Q,rotate:Q,rotateX:Q,rotateY:Q,rotateZ:Q,scaleX:G,scaleY:G,scale:G,opacity:Z,backgroundColor:Z,color:Z,default:G},te=r.__assign(r.__assign({},u.number),{transform:Math.round}),ne={borderWidth:u.px,borderTopWidth:u.px,borderRightWidth:u.px,borderBottomWidth:u.px,borderLeftWidth:u.px,borderRadius:u.px,radius:u.px,borderTopLeftRadius:u.px,borderTopRightRadius:u.px,borderBottomRightRadius:u.px,borderBottomLeftRadius:u.px,width:u.px,maxWidth:u.px,height:u.px,maxHeight:u.px,size:u.px,top:u.px,right:u.px,bottom:u.px,left:u.px,padding:u.px,paddingTop:u.px,paddingRight:u.px,paddingBottom:u.px,paddingLeft:u.px,margin:u.px,marginTop:u.px,marginRight:u.px,marginBottom:u.px,marginLeft:u.px,rotate:u.degrees,rotateX:u.degrees,rotateY:u.degrees,rotateZ:u.degrees,scale:u.scale,scaleX:u.scale,scaleY:u.scale,scaleZ:u.scale,skew:u.degrees,skewX:u.degrees,skewY:u.degrees,distance:u.px,translateX:u.px,translateY:u.px,translateZ:u.px,x:u.px,y:u.px,z:u.px,perspective:u.px,transformPerspective:u.px,opacity:u.alpha,originX:u.progressPercentage,originY:u.progressPercentage,originZ:u.px,zIndex:te,fillOpacity:u.alpha,strokeOpacity:u.alpha,numOctaves:te},re=r.__assign(r.__assign({},ne),{color:u.color,backgroundColor:u.color,outlineColor:u.color,fill:u.color,stroke:u.color,borderColor:u.color,borderTopColor:u.color,borderRightColor:u.color,borderBottomColor:u.color,borderLeftColor:u.color,filter:u.filter,WebkitFilter:u.filter}),oe=function(e){return re[e]};function ie(e,t){var n,r=oe(e);return r!==u.filter&&(r=u.complex),null===(n=r.getAnimatableNone)||void 0===n?void 0:n.call(r,t)}var ae={current:!1},se=function(e){return K(e)?e[e.length-1]||0:e},ue=!1;function le(e,t,n){var o,a,s,u;return Array.isArray(t.to)&&(null!==(o=e.duration)&&void 0!==o||(e.duration=.8)),function(e){Array.isArray(e.to)&&null===e.to[0]&&(e.to=r.__spreadArray([],r.__read(e.to),!1),e.to[0]=e.from)}(t),function(e){e.when,e.delay,e.delayChildren,e.staggerChildren,e.staggerDirection,e.repeat,e.repeatType,e.repeatDelay,e.from;var t=r.__rest(e,["when","delay","delayChildren","staggerChildren","staggerDirection","repeat","repeatType","repeatDelay","from"]);return!!Object.keys(t).length}(e)||(e=r.__assign(r.__assign({},e),(a=n,s=t.to,u=K(s)?J:ee[a]||ee.default,r.__assign({to:s},u(s))))),r.__assign(r.__assign({},t),function(e){var t=e.ease,n=e.times,o=e.yoyo,a=e.flip,s=e.loop,u=r.__rest(e,["ease","times","yoyo","flip","loop"]),l=r.__assign({},u);return n&&(l.offset=n),u.duration&&(l.duration=q(u.duration)),u.repeatDelay&&(l.repeatDelay=q(u.repeatDelay)),t&&(l.ease=function(e){return Array.isArray(e)&&"number"!=typeof e[0]}(t)?t.map(Y):Y(t)),"tween"===u.type&&(l.type="keyframes"),(o||s||a)&&(i.warning(!ue,"yoyo, loop and flip have been removed from the API. Replace with repeat and repeatType options."),ue=!0,o?l.repeatType="reverse":s?l.repeatType="loop":a&&(l.repeatType="mirror"),l.repeat=s||o||a||u.repeat),"spring"!==u.type&&(l.type="keyframes"),l}(e))}function ce(e){return 0===e||"string"==typeof e&&0===parseFloat(e)&&-1===e.indexOf(" ")}function fe(e){return"number"==typeof e?0:ie("",e)}function de(e,t){return e[t]||e.default||e}function pe(e,t,n,o){return void 0===o&&(o={}),ae.current&&(o={type:!1}),t.start((function(a){var u,l,c=function(e,t,n,o,a){var u,l=de(o,e),c=null!==(u=l.from)&&void 0!==u?u:t.get(),f=X(e,n);"none"===c&&f&&"string"==typeof n?c=ie(e,n):ce(c)&&"string"==typeof n?c=fe(n):!Array.isArray(n)&&ce(n)&&"string"==typeof c&&(n=fe(c));var d=X(e,c);return i.warning(d===f,"You are trying to animate ".concat(e,' from "').concat(c,'" to "').concat(n,'". ').concat(c," is not an animatable value - to enable this animation set ").concat(c," to a value animatable to ").concat(n," via the `style` property.")),d&&f&&!1!==l.type?function(){var o={from:c,to:n,velocity:t.getVelocity(),onComplete:a,onUpdate:function(e){return t.set(e)}};return"inertia"===l.type||"decay"===l.type?s.inertia(r.__assign(r.__assign({},o),l)):s.animate(r.__assign(r.__assign({},le(l,o,e)),{onUpdate:function(e){var t;o.onUpdate(e),null===(t=l.onUpdate)||void 0===t||t.call(l,e)},onComplete:function(){var e;o.onComplete(),null===(e=l.onComplete)||void 0===e||e.call(l)}}))}:function(){var e,r,o=se(n);return t.set(o),a(),null===(e=null==l?void 0:l.onUpdate)||void 0===e||e.call(l,o),null===(r=null==l?void 0:l.onComplete)||void 0===r||r.call(l),{stop:function(){}}}}(e,t,n,o,a),f=function(e,t){var n,r;return null!==(r=null!==(n=(de(e,t)||{}).delay)&&void 0!==n?n:e.delay)&&void 0!==r?r:0}(o,e),d=function(){return l=c()};return f?u=window.setTimeout(d,q(f)):d(),function(){clearTimeout(u),null==l||l.stop()}}))}function he(e,t,n){void 0===n&&(n={});var r=W(e)?e:H(e);return pe("",r,t,n),{stop:function(){return r.stop()},isAnimating:function(){return r.isAnimating()}}}var me=["TopLeft","TopRight","BottomLeft","BottomRight"],ve=me.length,ye=function(e){return"string"==typeof e?parseFloat(e):e},ge=function(e){return"number"==typeof e||u.px.test(e)};function be(e,t){var n;return null!==(n=e[t])&&void 0!==n?n:e.borderRadius}var we=xe(0,.5,s.circOut),_e=xe(.5,.95,s.linear);function xe(e,t,n){return function(r){return r<e?0:r>t?1:n(s.progress(e,t,r))}}function Ee(e,t){e.min=t.min,e.max=t.max}function ke(e,t){Ee(e.x,t.x),Ee(e.y,t.y)}function Se(e){return void 0===e||1===e}function Ce(e){var t=e.scale,n=e.scaleX,r=e.scaleY;return!Se(t)||!Se(n)||!Se(r)}function Pe(e){return Ce(e)||Oe(e.x)||Oe(e.y)||e.z||e.rotate||e.rotateX||e.rotateY}function Oe(e){return e&&"0%"!==e}function Te(e,t,n){return n+t*(e-n)}function Me(e,t,n,r,o){return void 0!==o&&(e=Te(e,o,r)),Te(e,n,r)+t}function Ae(e,t,n,r,o){void 0===t&&(t=0),void 0===n&&(n=1),e.min=Me(e.min,t,n,r,o),e.max=Me(e.max,t,n,r,o)}function Re(e,t){var n=t.x,r=t.y;Ae(e.x,n.translate,n.scale,n.originPoint),Ae(e.y,r.translate,r.scale,r.originPoint)}function je(e,t){e.min=e.min+t,e.max=e.max+t}function Ne(e,t,n){var o=r.__read(n,3),i=o[0],a=o[1],u=o[2],l=void 0!==t[u]?t[u]:.5,c=s.mix(e.min,e.max,l);Ae(e,t[i],t[a],c,t.scale)}var Le=["x","scaleX","originX"],Fe=["y","scaleY","originY"];function Ie(e,t){Ne(e.x,t,Le),Ne(e.y,t,Fe)}function De(e){return e.max-e.min}function Ve(e,t,n){return void 0===t&&(t=0),void 0===n&&(n=.01),s.distance(e,t)<n}function Be(e,t,n,r){void 0===r&&(r=.5),e.origin=r,e.originPoint=s.mix(t.min,t.max,e.origin),e.scale=De(n)/De(t),(Ve(e.scale,1,1e-4)||isNaN(e.scale))&&(e.scale=1),e.translate=s.mix(n.min,n.max,e.origin)-e.originPoint,(Ve(e.translate)||isNaN(e.translate))&&(e.translate=0)}function ze(e,t,n,r){Be(e.x,t.x,n.x,null==r?void 0:r.originX),Be(e.y,t.y,n.y,null==r?void 0:r.originY)}function Ue(e,t,n){e.min=n.min+t.min,e.max=e.min+De(t)}function He(e,t,n){e.min=t.min-n.min,e.max=e.min+De(t)}function We(e,t,n){He(e.x,t.x,n.x),He(e.y,t.y,n.y)}function qe(e,t,n,r,o){return e=Te(e-=t,1/n,r),void 0!==o&&(e=Te(e,1/o,r)),e}function $e(e,t,n,o,i){var a=r.__read(n,3),l=a[0],c=a[1],f=a[2];!function(e,t,n,r,o,i,a){if(void 0===t&&(t=0),void 0===n&&(n=1),void 0===r&&(r=.5),void 0===i&&(i=e),void 0===a&&(a=e),u.percent.test(t)&&(t=parseFloat(t),t=s.mix(a.min,a.max,t/100)-a.min),"number"==typeof t){var l=s.mix(i.min,i.max,r);e===i&&(l-=t),e.min=qe(e.min,t,n,l,o),e.max=qe(e.max,t,n,l,o)}}(e,t[l],t[c],t[f],t.scale,o,i)}var Ye=["x","scaleX","originX"],Xe=["y","scaleY","originY"];function Ke(e,t,n,r){$e(e.x,t,Ye,null==n?void 0:n.x,null==r?void 0:r.x),$e(e.y,t,Xe,null==n?void 0:n.y,null==r?void 0:r.y)}var Qe=function(){return{x:{min:0,max:0},y:{min:0,max:0}}};function Ge(e){return 0===e.translate&&1===e.scale}function Ze(e){return Ge(e.x)&&Ge(e.y)}function Je(e,t){return e.x.min===t.x.min&&e.x.max===t.x.max&&e.y.min===t.y.min&&e.y.max===t.y.max}var et=function(){function e(){this.members=[]}return e.prototype.add=function(e){V(this.members,e),e.scheduleRender()},e.prototype.remove=function(e){if(B(this.members,e),e===this.prevLead&&(this.prevLead=void 0),e===this.lead){var t=this.members[this.members.length-1];t&&this.promote(t)}},e.prototype.relegate=function(e){var t,n=this.members.findIndex((function(t){return e===t}));if(0===n)return!1;for(var r=n;r>=0;r--){var o=this.members[r];if(!1!==o.isPresent){t=o;break}}return!!t&&(this.promote(t),!0)},e.prototype.promote=function(e,t){var n,r=this.lead;e!==r&&(this.prevLead=r,this.lead=e,e.show(),r&&(r.instance&&r.scheduleRender(),e.scheduleRender(),e.resumeFrom=r,t&&(e.resumeFrom.preserveOpacity=!0),r.snapshot&&(e.snapshot=r.snapshot,e.snapshot.latestValues=r.animationValues||r.latestValues,e.snapshot.isShared=!0),(null===(n=e.root)||void 0===n?void 0:n.isUpdating)&&(e.isLayoutDirty=!0),!1===e.options.crossfade&&r.hide()))},e.prototype.exitAnimationComplete=function(){this.members.forEach((function(e){var t,n,r,o,i;null===(n=(t=e.options).onExitComplete)||void 0===n||n.call(t),null===(i=null===(r=e.resumingFrom)||void 0===r?void 0:(o=r.options).onExitComplete)||void 0===i||i.call(o)}))},e.prototype.scheduleRender=function(){this.members.forEach((function(e){e.instance&&e.scheduleRender(!1)}))},e.prototype.removeLeadSnapshot=function(){this.lead&&this.lead.snapshot&&(this.lead.snapshot=void 0)},e}(),tt={};function nt(e){Object.assign(tt,e)}function rt(e,t,n){var r=e.x.translate/t.x,o=e.y.translate/t.y,i="translate3d(".concat(r,"px, ").concat(o,"px, 0) ");if(n){var a=n.rotate,s=n.rotateX,u=n.rotateY;a&&(i+="rotate(".concat(a,"deg) ")),s&&(i+="rotateX(".concat(s,"deg) ")),u&&(i+="rotateY(".concat(u,"deg) "))}return"translate3d(0px, 0px, 0) scale(1, 1)"===(i+="scale(".concat(e.x.scale,", ").concat(e.y.scale,")"))?"none":i}function ot(e){return[e("x"),e("y")]}var it=["","X","Y","Z"],at=["transformPerspective","x","y","z"];function st(e,t){return at.indexOf(e)-at.indexOf(t)}["translate","scale","rotate","skew"].forEach((function(e){return it.forEach((function(t){return at.push(e+t)}))}));var ut=new Set(at);function lt(e){return ut.has(e)}var ct=new Set(["originX","originY","originZ"]);function ft(e){return ct.has(e)}var dt=function(e,t){return e.depth-t.depth},pt=function(){function e(){this.children=[],this.isDirty=!1}return e.prototype.add=function(e){V(this.children,e),this.isDirty=!0},e.prototype.remove=function(e){B(this.children,e),this.isDirty=!0},e.prototype.forEach=function(e){this.isDirty&&this.children.sort(dt),this.isDirty=!1,this.children.forEach(e)},e}();function ht(e){var t,n=W(e)?e.get():e;return t=n,Boolean(t&&"object"==typeof t&&t.mix&&t.toValue)?n.toValue():n}var mt={hasAnimatedSinceResize:!0,hasEverUpdated:!1};function vt(e){var t=e.attachResizeListener,n=e.defaultParent,o=e.measureScroll,i=e.resetTransform;return function(){function e(e,t,o){var i=this;void 0===t&&(t={}),void 0===o&&(o=null==n?void 0:n()),this.children=new Set,this.options={},this.isTreeAnimating=!1,this.isAnimationBlocked=!1,this.isLayoutDirty=!1,this.updateManuallyBlocked=!1,this.updateBlockedByResize=!1,this.isUpdating=!1,this.isSVG=!1,this.needsReset=!1,this.shouldResetTransform=!1,this.treeScale={x:1,y:1},this.eventHandlers=new Map,this.potentialNodes=new Map,this.checkUpdateFailed=function(){i.isUpdating&&(i.isUpdating=!1,i.clearAllSnapshots())},this.updateProjection=function(){i.nodes.forEach(Et),i.nodes.forEach(kt)},this.hasProjected=!1,this.isVisible=!0,this.animationProgress=0,this.sharedNodes=new Map,this.id=e,this.latestValues=t,this.root=o?o.root||o:this,this.path=o?r.__spreadArray(r.__spreadArray([],r.__read(o.path),!1),[o],!1):[],this.parent=o,this.depth=o?o.depth+1:0,e&&this.root.registerPotentialNode(e,this);for(var a=0;a<this.path.length;a++)this.path[a].shouldResetTransform=!0;this.root===this&&(this.nodes=new pt)}return e.prototype.addEventListener=function(e,t){return this.eventHandlers.has(e)||this.eventHandlers.set(e,new z),this.eventHandlers.get(e).add(t)},e.prototype.notifyListeners=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var o=this.eventHandlers.get(e);null==o||o.notify.apply(o,r.__spreadArray([],r.__read(t),!1))},e.prototype.hasListeners=function(e){return this.eventHandlers.has(e)},e.prototype.registerPotentialNode=function(e,t){this.potentialNodes.set(e,t)},e.prototype.mount=function(e,n){var o,i=this;if(void 0===n&&(n=!1),!this.instance){this.isSVG=e instanceof SVGElement&&"svg"!==e.tagName,this.instance=e;var a=this.options,s=a.layoutId,u=a.layout,l=a.visualElement;if(l&&!l.getInstance()&&l.mount(e),this.root.nodes.add(this),null===(o=this.parent)||void 0===o||o.children.add(this),this.id&&this.root.potentialNodes.delete(this.id),n&&(u||s)&&(this.isLayoutDirty=!0),t){var c,f=function(){return i.root.updateBlockedByResize=!1};t(e,(function(){i.root.updateBlockedByResize=!0,clearTimeout(c),c=window.setTimeout(f,250),mt.hasAnimatedSinceResize&&(mt.hasAnimatedSinceResize=!1,i.nodes.forEach(xt))}))}s&&this.root.registerSharedNode(s,this),!1!==this.options.animate&&l&&(s||u)&&this.addEventListener("didUpdate",(function(e){var t,n,o,a,s,u=e.delta,c=e.hasLayoutChanged,f=e.hasRelativeTargetChanged,d=e.layout;if(i.isTreeAnimationBlocked())return i.target=void 0,void(i.relativeTarget=void 0);var p=null!==(n=null!==(t=i.options.transition)&&void 0!==t?t:l.getDefaultTransition())&&void 0!==n?n:Mt,h=l.getProps().onLayoutAnimationComplete,m=!i.targetLayout||!Je(i.targetLayout,d)||f,v=!c&&f;if((null===(o=i.resumeFrom)||void 0===o?void 0:o.instance)||v||c&&(m||!i.currentAnimation)){i.resumeFrom&&(i.resumingFrom=i.resumeFrom,i.resumingFrom.resumingFrom=void 0),i.setAnimationOrigin(u,v);var y=r.__assign(r.__assign({},de(p,"layout")),{onComplete:h});l.shouldReduceMotion&&(y.delay=0,y.type=!1),i.startAnimation(y)}else c||0!==i.animationProgress||i.finishAnimation(),i.isLead()&&(null===(s=(a=i.options).onExitComplete)||void 0===s||s.call(a));i.targetLayout=d}))}},e.prototype.unmount=function(){var e,t;this.options.layoutId&&this.willUpdate(),this.root.nodes.remove(this),null===(e=this.getStack())||void 0===e||e.remove(this),null===(t=this.parent)||void 0===t||t.children.delete(this),this.instance=void 0,a.cancelSync.preRender(this.updateProjection)},e.prototype.blockUpdate=function(){this.updateManuallyBlocked=!0},e.prototype.unblockUpdate=function(){this.updateManuallyBlocked=!1},e.prototype.isUpdateBlocked=function(){return this.updateManuallyBlocked||this.updateBlockedByResize},e.prototype.isTreeAnimationBlocked=function(){var e;return this.isAnimationBlocked||(null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimationBlocked())||!1},e.prototype.startUpdate=function(){var e;this.isUpdateBlocked()||(this.isUpdating=!0,null===(e=this.nodes)||void 0===e||e.forEach(St))},e.prototype.willUpdate=function(e){var t,n,r;if(void 0===e&&(e=!0),this.root.isUpdateBlocked())null===(n=(t=this.options).onExitComplete)||void 0===n||n.call(t);else if(!this.root.isUpdating&&this.root.startUpdate(),!this.isLayoutDirty){this.isLayoutDirty=!0;for(var o=0;o<this.path.length;o++){var i=this.path[o];i.shouldResetTransform=!0,i.updateScroll()}var a=this.options,s=a.layoutId,u=a.layout;if(void 0!==s||u){var l=null===(r=this.options.visualElement)||void 0===r?void 0:r.getProps().transformTemplate;this.prevTransformTemplateValue=null==l?void 0:l(this.latestValues,""),this.updateSnapshot(),e&&this.notifyListeners("willUpdate")}}},e.prototype.didUpdate=function(){if(this.isUpdateBlocked())return this.unblockUpdate(),this.clearAllSnapshots(),void this.nodes.forEach(wt);this.isUpdating&&(this.isUpdating=!1,this.potentialNodes.size&&(this.potentialNodes.forEach(At),this.potentialNodes.clear()),this.nodes.forEach(_t),this.nodes.forEach(yt),this.nodes.forEach(gt),this.clearAllSnapshots(),a.flushSync.update(),a.flushSync.preRender(),a.flushSync.render())},e.prototype.clearAllSnapshots=function(){this.nodes.forEach(bt),this.sharedNodes.forEach(Ct)},e.prototype.scheduleUpdateProjection=function(){p.default.preRender(this.updateProjection,!1,!0)},e.prototype.scheduleCheckAfterUnmount=function(){var e=this;p.default.postRender((function(){e.isLayoutDirty?e.root.didUpdate():e.root.checkUpdateFailed()}))},e.prototype.updateSnapshot=function(){if(!this.snapshot&&this.instance){var e=this.measure(),t=this.removeTransform(this.removeElementScroll(e));jt(t),this.snapshot={measured:e,layout:t,latestValues:{}}}},e.prototype.updateLayout=function(){var e;if(this.instance&&(this.updateScroll(),this.options.alwaysMeasureLayout&&this.isLead()||this.isLayoutDirty)){if(this.resumeFrom&&!this.resumeFrom.instance)for(var t=0;t<this.path.length;t++)this.path[t].updateScroll();var n=this.measure();jt(n);var r=this.layout;this.layout={measured:n,actual:this.removeElementScroll(n)},this.layoutCorrected={x:{min:0,max:0},y:{min:0,max:0}},this.isLayoutDirty=!1,this.projectionDelta=void 0,this.notifyListeners("measure",this.layout.actual),null===(e=this.options.visualElement)||void 0===e||e.notifyLayoutMeasure(this.layout.actual,null==r?void 0:r.actual)}},e.prototype.updateScroll=function(){this.options.layoutScroll&&this.instance&&(this.scroll=o(this.instance))},e.prototype.resetTransform=function(){var e;if(i){var t=this.isLayoutDirty||this.shouldResetTransform,n=this.projectionDelta&&!Ze(this.projectionDelta),r=null===(e=this.options.visualElement)||void 0===e?void 0:e.getProps().transformTemplate,o=null==r?void 0:r(this.latestValues,""),a=o!==this.prevTransformTemplateValue;t&&(n||Pe(this.latestValues)||a)&&(i(this.instance,o),this.shouldResetTransform=!1,this.scheduleRender())}},e.prototype.measure=function(){var e=this.options.visualElement;if(!e)return{x:{min:0,max:0},y:{min:0,max:0}};var t=e.measureViewportBox(),n=this.root.scroll;return n&&(je(t.x,n.x),je(t.y,n.y)),t},e.prototype.removeElementScroll=function(e){var t={x:{min:0,max:0},y:{min:0,max:0}};ke(t,e);for(var n=0;n<this.path.length;n++){var r=this.path[n],o=r.scroll,i=r.options;r!==this.root&&o&&i.layoutScroll&&(je(t.x,o.x),je(t.y,o.y))}return t},e.prototype.applyTransform=function(e,t){void 0===t&&(t=!1);var n={x:{min:0,max:0},y:{min:0,max:0}};ke(n,e);for(var r=0;r<this.path.length;r++){var o=this.path[r];!t&&o.options.layoutScroll&&o.scroll&&o!==o.root&&Ie(n,{x:-o.scroll.x,y:-o.scroll.y}),Pe(o.latestValues)&&Ie(n,o.latestValues)}return Pe(this.latestValues)&&Ie(n,this.latestValues),n},e.prototype.removeTransform=function(e){var t,n={x:{min:0,max:0},y:{min:0,max:0}};ke(n,e);for(var r=0;r<this.path.length;r++){var o=this.path[r];if(o.instance&&Pe(o.latestValues)){Ce(o.latestValues)&&o.updateSnapshot();var i={x:{min:0,max:0},y:{min:0,max:0}};ke(i,o.measure()),Ke(n,o.latestValues,null===(t=o.snapshot)||void 0===t?void 0:t.layout,i)}}return Pe(this.latestValues)&&Ke(n,this.latestValues),n},e.prototype.setTargetDelta=function(e){this.targetDelta=e,this.root.scheduleUpdateProjection()},e.prototype.setOptions=function(e){var t;this.options=r.__assign(r.__assign(r.__assign({},this.options),e),{crossfade:null===(t=e.crossfade)||void 0===t||t})},e.prototype.clearMeasurements=function(){this.scroll=void 0,this.layout=void 0,this.snapshot=void 0,this.prevTransformTemplateValue=void 0,this.targetDelta=void 0,this.target=void 0,this.isLayoutDirty=!1},e.prototype.resolveTargetDelta=function(){var e,t,n,r,o=this.options,i=o.layout,a=o.layoutId;this.layout&&(i||a)&&(this.targetDelta||this.relativeTarget||(this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&this.relativeParent.layout&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},We(this.relativeTargetOrigin,this.layout.actual,this.relativeParent.layout.actual),ke(this.relativeTarget,this.relativeTargetOrigin))),(this.relativeTarget||this.targetDelta)&&(this.target||(this.target={x:{min:0,max:0},y:{min:0,max:0}},this.targetWithTransforms={x:{min:0,max:0},y:{min:0,max:0}}),this.relativeTarget&&this.relativeTargetOrigin&&(null===(e=this.relativeParent)||void 0===e?void 0:e.target)?(t=this.target,n=this.relativeTarget,r=this.relativeParent.target,Ue(t.x,n.x,r.x),Ue(t.y,n.y,r.y)):this.targetDelta?(Boolean(this.resumingFrom)?this.target=this.applyTransform(this.layout.actual):ke(this.target,this.layout.actual),Re(this.target,this.targetDelta)):ke(this.target,this.layout.actual),this.attemptToResolveRelativeTarget&&(this.attemptToResolveRelativeTarget=!1,this.relativeParent=this.getClosestProjectingParent(),this.relativeParent&&Boolean(this.relativeParent.resumingFrom)===Boolean(this.resumingFrom)&&!this.relativeParent.options.layoutScroll&&this.relativeParent.target&&(this.relativeTarget={x:{min:0,max:0},y:{min:0,max:0}},this.relativeTargetOrigin={x:{min:0,max:0},y:{min:0,max:0}},We(this.relativeTargetOrigin,this.target,this.relativeParent.target),ke(this.relativeTarget,this.relativeTargetOrigin)))))},e.prototype.getClosestProjectingParent=function(){if(this.parent&&!Pe(this.parent.latestValues))return(this.parent.relativeTarget||this.parent.targetDelta)&&this.parent.layout?this.parent:this.parent.getClosestProjectingParent()},e.prototype.calcProjection=function(){var e,t=this.options,n=t.layout,r=t.layoutId;if(this.isTreeAnimating=Boolean((null===(e=this.parent)||void 0===e?void 0:e.isTreeAnimating)||this.currentAnimation||this.pendingAnimation),this.isTreeAnimating||(this.targetDelta=this.relativeTarget=void 0),this.layout&&(n||r)){var o=this.getLead();ke(this.layoutCorrected,this.layout.actual),function(e,t,n,r){var o,i;void 0===r&&(r=!1);var a=n.length;if(a){var s,u;t.x=t.y=1;for(var l=0;l<a;l++)u=(s=n[l]).projectionDelta,"contents"!==(null===(i=null===(o=s.instance)||void 0===o?void 0:o.style)||void 0===i?void 0:i.display)&&(r&&s.options.layoutScroll&&s.scroll&&s!==s.root&&Ie(e,{x:-s.scroll.x,y:-s.scroll.y}),u&&(t.x*=u.x.scale,t.y*=u.y.scale,Re(e,u)),r&&Pe(s.latestValues)&&Ie(e,s.latestValues))}}(this.layoutCorrected,this.treeScale,this.path,Boolean(this.resumingFrom)||this!==o);var i=o.target;if(i){this.projectionDelta||(this.projectionDelta={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}},this.projectionDeltaWithTransform={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}});var a=this.treeScale.x,s=this.treeScale.y,u=this.projectionTransform;ze(this.projectionDelta,this.layoutCorrected,i,this.latestValues),this.projectionTransform=rt(this.projectionDelta,this.treeScale),this.projectionTransform===u&&this.treeScale.x===a&&this.treeScale.y===s||(this.hasProjected=!0,this.scheduleRender(),this.notifyListeners("projectionUpdate",i))}}},e.prototype.hide=function(){this.isVisible=!1},e.prototype.show=function(){this.isVisible=!0},e.prototype.scheduleRender=function(e){var t,n,r;void 0===e&&(e=!0),null===(n=(t=this.options).scheduleRender)||void 0===n||n.call(t),e&&(null===(r=this.getStack())||void 0===r||r.scheduleRender()),this.resumingFrom&&!this.resumingFrom.instance&&(this.resumingFrom=void 0)},e.prototype.setAnimationOrigin=function(e,t){var n,o=this;void 0===t&&(t=!1);var i=this.snapshot,a=(null==i?void 0:i.latestValues)||{},l=r.__assign({},this.latestValues),c={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};this.relativeTarget=this.relativeTargetOrigin=void 0,this.attemptToResolveRelativeTarget=!t;var f={x:{min:0,max:0},y:{min:0,max:0}},d=null==i?void 0:i.isShared,p=((null===(n=this.getStack())||void 0===n?void 0:n.members.length)||0)<=1,h=Boolean(d&&!p&&!0===this.options.crossfade&&!this.path.some(Tt));this.animationProgress=0,this.mixTargetDelta=function(t){var n,r,i,m,v,y=t/1e3;Pt(c.x,e.x,y),Pt(c.y,e.y,y),o.setTargetDelta(c),o.relativeTarget&&o.relativeTargetOrigin&&o.layout&&(null===(n=o.relativeParent)||void 0===n?void 0:n.layout)&&(We(f,o.layout.actual,o.relativeParent.layout.actual),r=o.relativeTarget,i=o.relativeTargetOrigin,m=f,v=y,Ot(r.x,i.x,m.x,v),Ot(r.y,i.y,m.y,v)),d&&(o.animationValues=l,function(e,t,n,r,o,i){var a,l,c,f;o?(e.opacity=s.mix(0,null!==(a=n.opacity)&&void 0!==a?a:1,we(r)),e.opacityExit=s.mix(null!==(l=t.opacity)&&void 0!==l?l:1,0,_e(r))):i&&(e.opacity=s.mix(null!==(c=t.opacity)&&void 0!==c?c:1,null!==(f=n.opacity)&&void 0!==f?f:1,r));for(var d=0;d<ve;d++){var p="border".concat(me[d],"Radius"),h=be(t,p),m=be(n,p);void 0===h&&void 0===m||(h||(h=0),m||(m=0),0===h||0===m||ge(h)===ge(m)?(e[p]=Math.max(s.mix(ye(h),ye(m),r),0),(u.percent.test(m)||u.percent.test(h))&&(e[p]+="%")):e[p]=m)}(t.rotate||n.rotate)&&(e.rotate=s.mix(t.rotate||0,n.rotate||0,r))}(l,a,o.latestValues,y,h,p)),o.root.scheduleUpdateProjection(),o.scheduleRender(),o.animationProgress=y},this.mixTargetDelta(0)},e.prototype.startAnimation=function(e){var t,n,o=this;null===(t=this.currentAnimation)||void 0===t||t.stop(),this.resumingFrom&&(null===(n=this.resumingFrom.currentAnimation)||void 0===n||n.stop()),this.pendingAnimation&&(a.cancelSync.update(this.pendingAnimation),this.pendingAnimation=void 0),this.pendingAnimation=p.default.update((function(){mt.hasAnimatedSinceResize=!0,o.currentAnimation=he(0,1e3,r.__assign(r.__assign({},e),{onUpdate:function(t){var n;o.mixTargetDelta(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:function(){var t;null===(t=e.onComplete)||void 0===t||t.call(e),o.completeAnimation()}})),o.resumingFrom&&(o.resumingFrom.currentAnimation=o.currentAnimation),o.pendingAnimation=void 0}))},e.prototype.completeAnimation=function(){var e;this.resumingFrom&&(this.resumingFrom.currentAnimation=void 0,this.resumingFrom.preserveOpacity=void 0),null===(e=this.getStack())||void 0===e||e.exitAnimationComplete(),this.resumingFrom=this.currentAnimation=this.animationValues=void 0,this.notifyListeners("animationComplete")},e.prototype.finishAnimation=function(){var e;this.currentAnimation&&(null===(e=this.mixTargetDelta)||void 0===e||e.call(this,1e3),this.currentAnimation.stop()),this.completeAnimation()},e.prototype.applyTransformsToTarget=function(){var e=this.getLead(),t=e.targetWithTransforms,n=e.target,r=e.layout,o=e.latestValues;t&&n&&r&&(ke(t,n),Ie(t,o),ze(this.projectionDeltaWithTransform,this.layoutCorrected,t,o))},e.prototype.registerSharedNode=function(e,t){var n,r,o;this.sharedNodes.has(e)||this.sharedNodes.set(e,new et),this.sharedNodes.get(e).add(t),t.promote({transition:null===(n=t.options.initialPromotionConfig)||void 0===n?void 0:n.transition,preserveFollowOpacity:null===(o=null===(r=t.options.initialPromotionConfig)||void 0===r?void 0:r.shouldPreserveFollowOpacity)||void 0===o?void 0:o.call(r,t)})},e.prototype.isLead=function(){var e=this.getStack();return!e||e.lead===this},e.prototype.getLead=function(){var e;return this.options.layoutId&&(null===(e=this.getStack())||void 0===e?void 0:e.lead)||this},e.prototype.getPrevLead=function(){var e;return this.options.layoutId?null===(e=this.getStack())||void 0===e?void 0:e.prevLead:void 0},e.prototype.getStack=function(){var e=this.options.layoutId;if(e)return this.root.sharedNodes.get(e)},e.prototype.promote=function(e){var t=void 0===e?{}:e,n=t.needsReset,r=t.transition,o=t.preserveFollowOpacity,i=this.getStack();i&&i.promote(this,o),n&&(this.projectionDelta=void 0,this.needsReset=!0),r&&this.setOptions({transition:r})},e.prototype.relegate=function(){var e=this.getStack();return!!e&&e.relegate(this)},e.prototype.resetRotation=function(){var e=this.options.visualElement;if(e){for(var t=!1,n={},r=0;r<it.length;r++){var o="rotate"+it[r];e.getStaticValue(o)&&(t=!0,n[o]=e.getStaticValue(o),e.setStaticValue(o,0))}if(t){for(var o in null==e||e.syncRender(),n)e.setStaticValue(o,n[o]);e.scheduleRender()}}},e.prototype.getProjectionStyles=function(e){var t,n,r,o,i,a;void 0===e&&(e={});var s={};if(!this.instance||this.isSVG)return s;if(!this.isVisible)return{visibility:"hidden"};s.visibility="";var u=null===(t=this.options.visualElement)||void 0===t?void 0:t.getProps().transformTemplate;if(this.needsReset)return this.needsReset=!1,s.opacity="",s.pointerEvents=ht(e.pointerEvents)||"",s.transform=u?u(this.latestValues,""):"none",s;var l=this.getLead();if(!this.projectionDelta||!this.layout||!l.target){var c={};return this.options.layoutId&&(c.opacity=null!==(n=this.latestValues.opacity)&&void 0!==n?n:1,c.pointerEvents=ht(e.pointerEvents)||""),this.hasProjected&&!Pe(this.latestValues)&&(c.transform=u?u({},""):"none",this.hasProjected=!1),c}var f=l.animationValues||l.latestValues;this.applyTransformsToTarget(),s.transform=rt(this.projectionDeltaWithTransform,this.treeScale,f),u&&(s.transform=u(f,s.transform));var d=this.projectionDelta,p=d.x,h=d.y;for(var m in s.transformOrigin="".concat(100*p.origin,"% ").concat(100*h.origin,"% 0"),l.animationValues?s.opacity=l===this?null!==(o=null!==(r=f.opacity)&&void 0!==r?r:this.latestValues.opacity)&&void 0!==o?o:1:this.preserveOpacity?this.latestValues.opacity:f.opacityExit:s.opacity=l===this?null!==(i=f.opacity)&&void 0!==i?i:"":null!==(a=f.opacityExit)&&void 0!==a?a:0,tt)if(void 0!==f[m]){var v=tt[m],y=v.correct,g=v.applyTo,b=y(f[m],l);if(g)for(var w=g.length,_=0;_<w;_++)s[g[_]]=b;else s[m]=b}return this.options.layoutId&&(s.pointerEvents=l===this?ht(e.pointerEvents)||"":"none"),s},e.prototype.clearSnapshot=function(){this.resumeFrom=this.snapshot=void 0},e.prototype.resetTree=function(){this.root.nodes.forEach((function(e){var t;return null===(t=e.currentAnimation)||void 0===t?void 0:t.stop()})),this.root.nodes.forEach(wt),this.root.sharedNodes.clear()},e}()}function yt(e){e.updateLayout()}function gt(e){var t,n,r,o,i=null!==(n=null===(t=e.resumeFrom)||void 0===t?void 0:t.snapshot)&&void 0!==n?n:e.snapshot;if(e.isLead()&&e.layout&&i&&e.hasListeners("didUpdate")){var a=e.layout,s=a.actual,u=a.measured;"size"===e.options.animationType?ot((function(e){var t=i.isShared?i.measured[e]:i.layout[e],n=De(t);t.min=s[e].min,t.max=t.min+n})):"position"===e.options.animationType&&ot((function(e){var t=i.isShared?i.measured[e]:i.layout[e],n=De(s[e]);t.max=t.min+n}));var l={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};ze(l,s,i.layout);var c={x:{translate:0,scale:1,origin:0,originPoint:0},y:{translate:0,scale:1,origin:0,originPoint:0}};i.isShared?ze(c,e.applyTransform(u,!0),i.measured):ze(c,s,i.layout);var f=!Ze(l),d=!1;if(!e.resumeFrom&&(e.relativeParent=e.getClosestProjectingParent(),e.relativeParent&&!e.relativeParent.resumeFrom)){var p=e.relativeParent,h=p.snapshot,m=p.layout;if(h&&m){var v={x:{min:0,max:0},y:{min:0,max:0}};We(v,i.layout,h.layout);var y={x:{min:0,max:0},y:{min:0,max:0}};We(y,s,m.actual),Je(v,y)||(d=!0)}}e.notifyListeners("didUpdate",{layout:s,snapshot:i,delta:c,layoutDelta:l,hasLayoutChanged:f,hasRelativeTargetChanged:d})}else e.isLead()&&(null===(o=(r=e.options).onExitComplete)||void 0===o||o.call(r));e.options.transition=void 0}function bt(e){e.clearSnapshot()}function wt(e){e.clearMeasurements()}function _t(e){var t=e.options.visualElement;(null==t?void 0:t.getProps().onBeforeLayoutMeasure)&&t.notifyBeforeLayoutMeasure(),e.resetTransform()}function xt(e){e.finishAnimation(),e.targetDelta=e.relativeTarget=e.target=void 0}function Et(e){e.resolveTargetDelta()}function kt(e){e.calcProjection()}function St(e){e.resetRotation()}function Ct(e){e.removeLeadSnapshot()}function Pt(e,t,n){e.translate=s.mix(t.translate,0,n),e.scale=s.mix(t.scale,1,n),e.origin=t.origin,e.originPoint=t.originPoint}function Ot(e,t,n,r){e.min=s.mix(t.min,n.min,r),e.max=s.mix(t.max,n.max,r)}function Tt(e){return e.animationValues&&void 0!==e.animationValues.opacityExit}var Mt={duration:.45,ease:[.4,0,.1,1]};function At(e,t){for(var n=e.root,r=e.path.length-1;r>=0;r--)if(Boolean(e.path[r].instance)){n=e.path[r];break}var o=(n&&n!==e.root?n.instance:document).querySelector('[data-projection-id="'.concat(t,'"]'));o&&e.mount(o,!0)}function Rt(e){e.min=Math.round(e.min),e.max=Math.round(e.max)}function jt(e){Rt(e.x),Rt(e.y)}var Nt=1,Lt=o.createContext({}),Ft=o.createContext({}),It=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.getSnapshotBeforeUpdate=function(){return this.updateProps(),null},t.prototype.componentDidUpdate=function(){},t.prototype.updateProps=function(){var e=this.props,t=e.visualElement,n=e.props;t&&t.setProps(n)},t.prototype.render=function(){return this.props.children},t}(d.default.Component);function Dt(e){var t=e.preloadedFeatures,n=e.createVisualElement,i=e.projectionNodeConstructor,a=e.useRender,s=e.useVisualState,u=e.Component;return t&&v(t),o.forwardRef((function(e,t){var l=function(e){var t,n=e.layoutId,r=null===(t=o.useContext(Lt))||void 0===t?void 0:t.id;return r&&void 0!==n?r+"-"+n:n}(e);e=r.__assign(r.__assign({},e),{layoutId:l});var c=o.useContext(w),d=null,p=function(e){var t=function(e,t){if(L(e)){var n=e.initial,r=e.animate;return{initial:!1===n||R(n)?n:void 0,animate:R(r)?r:void 0}}return!1!==e.inherit?t:{}}(e,o.useContext(_)),n=t.initial,r=t.animate;return o.useMemo((function(){return{initial:n,animate:r}}),[I(n),I(r)])}(e),h=c.isStatic?void 0:D((function(){if(mt.hasEverUpdated)return Nt++})),v=s(e,c.isStatic);return!c.isStatic&&k&&(p.visualElement=function(e,t,n,r){var i=o.useContext(y),a=x(),s=o.useContext(E),u=T(),l=o.useRef(void 0);r||(r=i.renderer),!l.current&&r&&(l.current=r(e,{visualState:t,parent:a,props:n,presenceId:null==s?void 0:s.id,blockInitialAnimation:!1===(null==s?void 0:s.initial),shouldReduceMotion:u}));var c=l.current;return S((function(){null==c||c.syncRender()})),o.useEffect((function(){var e;null===(e=null==c?void 0:c.animationState)||void 0===e||e.animateChanges()})),S((function(){return function(){return null==c?void 0:c.notifyUnmount()}}),[]),c}(u,v,r.__assign(r.__assign({},c),e),n),function(e,t,n,r){var i,a=t.layoutId,s=t.layout,u=t.drag,l=t.dragConstraints,c=t.layoutScroll,f=o.useContext(Ft);r&&n&&!(null==n?void 0:n.projection)&&(n.projection=new r(e,n.getLatestValues(),null===(i=n.parent)||void 0===i?void 0:i.projection),n.projection.setOptions({layoutId:a,layout:s,alwaysMeasureLayout:Boolean(u)||l&&M(l),visualElement:n,scheduleRender:function(){return n.scheduleRender()},animationType:"string"==typeof s?s:"both",initialPromotionConfig:f,layoutScroll:c}))}(h,e,p.visualElement,i||m.projectionNodeConstructor),d=function(e,t,n){var i=[];if(o.useContext(y),!t)return null;for(var a=0;a<b;a++){var s=g[a],u=m[s],l=u.isEnabled,c=u.Component;l(e)&&c&&i.push(f.createElement(c,r.__assign({key:s},e,{visualElement:t})))}return i}(e,p.visualElement)),f.createElement(It,{visualElement:p.visualElement,props:r.__assign(r.__assign({},c),e)},d,f.createElement(_.Provider,{value:p},a(u,e,h,function(e,t,n){return o.useCallback((function(r){var o;r&&(null===(o=e.mount)||void 0===o||o.call(e,r)),t&&(r?t.mount(r):t.unmount()),n&&("function"==typeof n?n(r):M(n)&&(n.current=r))}),[t])}(v,p.visualElement,t),v,c.isStatic,p.visualElement)))}))}function Vt(e){function t(t,n){return void 0===n&&(n={}),Dt(e(t,n))}if("undefined"==typeof Proxy)return t;var n=new Map;return new Proxy(t,{get:function(e,r){return n.has(r)||n.set(r,t(r)),n.get(r)}})}var Bt=["animate","circle","defs","desc","ellipse","g","image","line","filter","marker","mask","metadata","path","pattern","polygon","polyline","rect","stop","svg","switch","symbol","text","tspan","use","view"];function zt(e){return"string"==typeof e&&!e.includes("-")&&!!(Bt.indexOf(e)>-1||/[A-Z]/.test(e))}function Ut(e,t){var n=t.layout,r=t.layoutId;return lt(e)||ft(e)||(n||void 0!==r)&&(!!tt[e]||"opacity"===e)}var Ht={x:"translateX",y:"translateY",z:"translateZ",transformPerspective:"perspective"};function Wt(e){return e.startsWith("--")}var qt=function(e,t){return t&&"number"==typeof e?t.transform(e):e};function $t(e,t,n,r){var o,i=e.style,a=e.vars,s=e.transform,u=e.transformKeys,l=e.transformOrigin;u.length=0;var c=!1,f=!1,d=!0;for(var p in t){var h=t[p];if(Wt(p))a[p]=h;else{var m=ne[p],v=qt(h,m);if(lt(p)){if(c=!0,s[p]=v,u.push(p),!d)continue;h!==(null!==(o=m.default)&&void 0!==o?o:0)&&(d=!1)}else ft(p)?(l[p]=v,f=!0):i[p]=v}}c?i.transform=function(e,t,n,r){var o=e.transform,i=e.transformKeys,a=t.enableHardwareAcceleration,s=void 0===a||a,u=t.allowTransformNone,l=void 0===u||u,c="";i.sort(st);for(var f=!1,d=i.length,p=0;p<d;p++){var h=i[p];c+="".concat(Ht[h]||h,"(").concat(o[h],") "),"z"===h&&(f=!0)}return!f&&s?c+="translateZ(0)":c=c.trim(),r?c=r(o,n?"":c):l&&n&&(c="none"),c}(e,n,d,r):r?i.transform=r({},""):!t.transform&&i.transform&&(i.transform="none"),f&&(i.transformOrigin=function(e){var t=e.originX,n=void 0===t?"50%":t,r=e.originY,o=void 0===r?"50%":r,i=e.originZ,a=void 0===i?0:i;return"".concat(n," ").concat(o," ").concat(a)}(l))}function Yt(e,t,n){for(var r in t)W(t[r])||Ut(r,n)||(e[r]=t[r])}function Xt(e,t,n){var i={},a=function(e,t,n){var i={};return Yt(i,e.style||{},e),Object.assign(i,function(e,t,n){var i=e.transformTemplate;return o.useMemo((function(){var e={style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}};$t(e,t,{enableHardwareAcceleration:!n},i);var o=e.vars,a=e.style;return r.__assign(r.__assign({},o),a)}),[t])}(e,t,n)),e.transformValues&&(i=e.transformValues(i)),i}(e,t,n);return Boolean(e.drag)&&!1!==e.dragListener&&(i.draggable=!1,a.userSelect=a.WebkitUserSelect=a.WebkitTouchCallout="none",a.touchAction=!0===e.drag?"none":"pan-".concat("x"===e.drag?"y":"x")),i.style=a,i}var Kt=new Set(["initial","animate","exit","style","variants","transition","transformTemplate","transformValues","custom","inherit","layout","layoutId","layoutDependency","onLayoutAnimationComplete","onLayoutMeasure","onBeforeLayoutMeasure","onAnimationStart","onAnimationComplete","onUpdate","onDragStart","onDrag","onDragEnd","onMeasureDragConstraints","onDirectionLock","onDragTransitionEnd","drag","dragControls","dragListener","dragConstraints","dragDirectionLock","dragSnapToOrigin","_dragX","_dragY","dragElastic","dragMomentum","dragPropagation","dragTransition","whileDrag","onPan","onPanStart","onPanEnd","onPanSessionStart","onTap","onTapStart","onTapCancel","onHoverStart","onHoverEnd","whileFocus","whileTap","whileHover","whileInView","onViewportEnter","onViewportLeave","viewport","layoutScroll"]);function Qt(e){return Kt.has(e)}var Gt=function(e){return!Qt(e)};function Zt(e){e&&(Gt=function(t){return t.startsWith("on")?!Qt(t):e(t)})}try{Zt(n(8594).Z)}catch(e){}function Jt(e,t,n){var r={};for(var o in e)(Gt(o)||!0===n&&Qt(o)||!t&&!Qt(o)||e.draggable&&o.startsWith("onDrag"))&&(r[o]=e[o]);return r}function en(e,t,n){return"string"==typeof e?e:u.px.transform(t+n*e)}var tn={offset:"stroke-dashoffset",array:"stroke-dasharray"},nn={offset:"strokeDashoffset",array:"strokeDasharray"};function rn(e,t,n,o){var i=t.attrX,a=t.attrY,s=t.originX,l=t.originY,c=t.pathLength,f=t.pathSpacing,d=void 0===f?1:f,p=t.pathOffset,h=void 0===p?0:p;$t(e,r.__rest(t,["attrX","attrY","originX","originY","pathLength","pathSpacing","pathOffset"]),n,o),e.attrs=e.style,e.style={};var m=e.attrs,v=e.style,y=e.dimensions;m.transform&&(y&&(v.transform=m.transform),delete m.transform),y&&(void 0!==s||void 0!==l||v.transform)&&(v.transformOrigin=function(e,t,n){var r=en(t,e.x,e.width),o=en(n,e.y,e.height);return"".concat(r," ").concat(o)}(y,void 0!==s?s:.5,void 0!==l?l:.5)),void 0!==i&&(m.x=i),void 0!==a&&(m.y=a),void 0!==c&&function(e,t,n,r,o){void 0===n&&(n=1),void 0===r&&(r=0),void 0===o&&(o=!0),e.pathLength=1;var i=o?tn:nn;e[i.offset]=u.px.transform(-r);var a=u.px.transform(t),s=u.px.transform(n);e[i.array]="".concat(a," ").concat(s)}(m,c,d,h,!1)}var on=function(){return r.__assign(r.__assign({},{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}),{attrs:{}})};function an(e,t){var n=o.useMemo((function(){var n=on();return rn(n,t,{enableHardwareAcceleration:!1},e.transformTemplate),r.__assign(r.__assign({},n.attrs),{style:r.__assign({},n.style)})}),[t]);if(e.style){var i={};Yt(i,e.style,e),n.style=r.__assign(r.__assign({},i),n.style)}return n}function sn(e){return void 0===e&&(e=!1),function(t,n,i,a,s,u){var l=s.latestValues,c=(zt(t)?an:Xt)(n,l,u),f=Jt(n,"string"==typeof t,e),d=r.__assign(r.__assign(r.__assign({},f),c),{ref:a});return i&&(d["data-projection-id"]=i),o.createElement(t,d)}}var un=/([a-z])([A-Z])/g,ln=function(e){return e.replace(un,"$1-$2").toLowerCase()};function cn(e,t,n,r){var o=t.style,i=t.vars;for(var a in Object.assign(e.style,o,r&&r.getProjectionStyles(n)),i)e.style.setProperty(a,i[a])}var fn=new Set(["baseFrequency","diffuseConstant","kernelMatrix","kernelUnitLength","keySplines","keyTimes","limitingConeAngle","markerHeight","markerWidth","numOctaves","targetX","targetY","surfaceScale","specularConstant","specularExponent","stdDeviation","tableValues","viewBox","gradientTransform","pathLength"]);function dn(e,t){for(var n in cn(e,t),t.attrs)e.setAttribute(fn.has(n)?n:ln(n),t.attrs[n])}function pn(e){var t=e.style,n={};for(var r in t)(W(t[r])||Ut(r,e))&&(n[r]=t[r]);return n}function hn(e){var t=pn(e);for(var n in e)W(e[n])&&(t["x"===n||"y"===n?"attr"+n.toUpperCase():n]=e[n]);return t}function mn(e){return"object"==typeof e&&"function"==typeof e.start}function vn(e,t,n,r){var o=e.scrapeMotionValuesFromProps,i=e.createRenderState,a=e.onMount,s={latestValues:gn(t,n,r,o),renderState:i()};return a&&(s.mount=function(e){return a(t,e,s)}),s}var yn=function(e){return function(t,n){var r=o.useContext(_),i=o.useContext(E);return n?vn(e,t,r,i):D((function(){return vn(e,t,r,i)}))}};function gn(e,t,n,o){var i={},a=!1===(null==n?void 0:n.initial),s=o(e);for(var u in s)i[u]=ht(s[u]);var l=e.initial,c=e.animate,f=L(e),d=F(e);t&&d&&!f&&!1!==e.inherit&&(null!=l||(l=t.initial),null!=c||(c=t.animate));var p=a||!1===l,h=p?c:l;return h&&"boolean"!=typeof h&&!mn(h)&&(Array.isArray(h)?h:[h]).forEach((function(t){var n=j(e,t);if(n){var o=n.transitionEnd;n.transition;var a=r.__rest(n,["transitionEnd","transition"]);for(var s in a){var u=a[s];Array.isArray(u)&&(u=u[p?u.length-1:0]),null!==u&&(i[s]=u)}for(var s in o)i[s]=o[s]}})),i}var bn,wn={useVisualState:yn({scrapeMotionValuesFromProps:hn,createRenderState:on,onMount:function(e,t,n){var r=n.renderState,o=n.latestValues;try{r.dimensions="function"==typeof t.getBBox?t.getBBox():t.getBoundingClientRect()}catch(e){r.dimensions={x:0,y:0,width:0,height:0}}rn(r,o,{enableHardwareAcceleration:!1},e.transformTemplate),dn(t,r)}})},_n={useVisualState:yn({scrapeMotionValuesFromProps:pn,createRenderState:function(){return{style:{},transform:{},transformKeys:[],transformOrigin:{},vars:{}}}})};function xn(e,t,n,o,i){var a=t.forwardMotionProps,s=void 0!==a&&a,u=zt(e)?wn:_n;return r.__assign(r.__assign({},u),{preloadedFeatures:n,useRender:sn(s),createVisualElement:o,projectionNodeConstructor:i,Component:e})}function En(e,t,n,r){return e.addEventListener(t,n,r),function(){return e.removeEventListener(t,n,r)}}function kn(e,t,n,r){o.useEffect((function(){var o=e.current;if(n&&o)return En(o,t,n,r)}),[e,t,n,r])}function Sn(e){return"undefined"!=typeof PointerEvent&&e instanceof PointerEvent?!("mouse"!==e.pointerType):e instanceof MouseEvent}function Cn(e){return!!e.touches}t.AnimationType=void 0,(bn=t.AnimationType||(t.AnimationType={})).Animate="animate",bn.Hover="whileHover",bn.Tap="whileTap",bn.Drag="whileDrag",bn.Focus="whileFocus",bn.InView="whileInView",bn.Exit="exit";var Pn={pageX:0,pageY:0};function On(e,t){void 0===t&&(t="page");var n=e.touches[0]||e.changedTouches[0]||Pn;return{x:n[t+"X"],y:n[t+"Y"]}}function Tn(e,t){return void 0===t&&(t="page"),{x:e[t+"X"],y:e[t+"Y"]}}function Mn(e,t){return void 0===t&&(t="page"),{point:Cn(e)?On(e,t):Tn(e,t)}}var An=function(e,t){void 0===t&&(t=!1);var n,r=function(t){return e(t,Mn(t))};return t?(n=r,function(e){var t=e instanceof MouseEvent;(!t||t&&0===e.button)&&n(e)}):r},Rn={pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointercancel:"mousecancel",pointerover:"mouseover",pointerout:"mouseout",pointerenter:"mouseenter",pointerleave:"mouseleave"},jn={pointerdown:"touchstart",pointermove:"touchmove",pointerup:"touchend",pointercancel:"touchcancel"};function Nn(e){return k&&null===window.onpointerdown?e:k&&null===window.ontouchstart?jn[e]:k&&null===window.onmousedown?Rn[e]:e}function Ln(e,t,n,r){return En(e,Nn(t),An(n,"pointerdown"===t),r)}function Fn(e,t,n,r){return kn(e,Nn(t),n&&An(n,"pointerdown"===t),r)}function In(e){var t=null;return function(){return null===t&&(t=e,function(){t=null})}}var Dn=In("dragHorizontal"),Vn=In("dragVertical");function Bn(e){var t=!1;if("y"===e)t=Vn();else if("x"===e)t=Dn();else{var n=Dn(),r=Vn();n&&r?t=function(){n(),r()}:(n&&n(),r&&r())}return t}function zn(){var e=Bn(!0);return!e||(e(),!1)}function Un(e,n,r){return function(o,i){var a;Sn(o)&&!zn()&&(null===(a=e.animationState)||void 0===a||a.setActive(t.AnimationType.Hover,n),null==r||r(o,i))}}var Hn=function(e,t){return!!t&&(e===t||Hn(e,t.parentElement))};function Wn(e){return o.useEffect((function(){return function(){return e()}}),[])}new Set;var qn=new WeakMap,$n=new WeakMap,Yn=function(e){var t;null===(t=qn.get(e.target))||void 0===t||t(e)},Xn=function(e){e.forEach(Yn)};var Kn={some:0,all:1};function Qn(e,n,i,a){var s=a.root,u=a.margin,l=a.amount,c=void 0===l?"some":l,f=a.once;o.useEffect((function(){if(e){var o={root:null==s?void 0:s.current,rootMargin:u,threshold:"number"==typeof c?c:Kn[c]};return function(e,t,n){var o=function(e){var t=e.root,n=r.__rest(e,["root"]),o=t||document;$n.has(o)||$n.set(o,{});var i=$n.get(o),a=JSON.stringify(n);return i[a]||(i[a]=new IntersectionObserver(Xn,r.__assign({root:t},n))),i[a]}(t);return qn.set(e,n),o.observe(e),function(){qn.delete(e),o.unobserve(e)}}(i.getInstance(),o,(function(e){var r,o=e.isIntersecting;if(n.isInView!==o&&(n.isInView=o,!f||o||!n.hasEnteredView)){o&&(n.hasEnteredView=!0),null===(r=i.animationState)||void 0===r||r.setActive(t.AnimationType.InView,o);var a=i.getProps(),s=o?a.onViewportEnter:a.onViewportLeave;null==s||s(e)}}))}}),[e,s,u,c])}function Gn(e,n,r,i){var a=i.fallback,s=void 0===a||a;o.useEffect((function(){e&&s&&requestAnimationFrame((function(){var e;n.hasEnteredView=!0;var o=r.getProps().onViewportEnter;null==o||o(null),null===(e=r.animationState)||void 0===e||e.setActive(t.AnimationType.InView,!0)}))}),[e])}var Zn=function(e){return function(t){return e(t),null}},Jn={inView:Zn((function(e){var t=e.visualElement,n=e.whileInView,r=e.onViewportEnter,i=e.onViewportLeave,a=e.viewport,s=void 0===a?{}:a,u=o.useRef({hasEnteredView:!1,isInView:!1}),l=Boolean(n||r||i);s.once&&u.current.hasEnteredView&&(l=!1),("undefined"==typeof IntersectionObserver?Gn:Qn)(l,u.current,t,s)})),tap:Zn((function(e){var n=e.onTap,r=e.onTapStart,i=e.onTapCancel,a=e.whileTap,u=e.visualElement,l=n||r||i||a,c=o.useRef(!1),f=o.useRef(null);function d(){var e;null===(e=f.current)||void 0===e||e.call(f),f.current=null}function p(){var e;return d(),c.current=!1,null===(e=u.animationState)||void 0===e||e.setActive(t.AnimationType.Tap,!1),!zn()}function h(e,t){p()&&(Hn(u.getInstance(),e.target)?null==n||n(e,t):null==i||i(e,t))}function m(e,t){p()&&(null==i||i(e,t))}Fn(u,"pointerdown",l?function(e,n){var o;d(),c.current||(c.current=!0,f.current=s.pipe(Ln(window,"pointerup",h),Ln(window,"pointercancel",m)),null===(o=u.animationState)||void 0===o||o.setActive(t.AnimationType.Tap,!0),null==r||r(e,n))}:void 0),Wn(d)})),focus:Zn((function(e){var n=e.whileFocus,r=e.visualElement;kn(r,"focus",n?function(){var e;null===(e=r.animationState)||void 0===e||e.setActive(t.AnimationType.Focus,!0)}:void 0),kn(r,"blur",n?function(){var e;null===(e=r.animationState)||void 0===e||e.setActive(t.AnimationType.Focus,!1)}:void 0)})),hover:Zn((function(e){var t=e.onHoverStart,n=e.onHoverEnd,r=e.whileHover,o=e.visualElement;Fn(o,"pointerenter",t||r?Un(o,!0,t):void 0),Fn(o,"pointerleave",n||r?Un(o,!1,n):void 0)}))},er=0,tr=function(){return er++},nr=function(){return D(tr)};function rr(){var e=o.useContext(E);if(null===e)return[!0,null];var t=e.isPresent,n=e.onExitComplete,r=e.register,i=nr();return o.useEffect((function(){return r(i)}),[]),!t&&n?[!1,function(){return null==n?void 0:n(i)}]:[!0]}function or(e,t){if(!Array.isArray(t))return!1;var n=t.length;if(n!==e.length)return!1;for(var r=0;r<n;r++)if(t[r]!==e[r])return!1;return!0}var ir=function(e){return function(t){return t.test(e)}},ar=[u.number,u.px,u.percent,u.degrees,u.vw,u.vh,{test:function(e){return"auto"===e},parse:function(e){return e}}],sr=function(e){return ar.find(ir(e))},ur=r.__spreadArray(r.__spreadArray([],r.__read(ar),!1),[u.color,u.complex],!1),lr=function(e){return ur.find(ir(e))};function cr(e,t,n){e.hasValue(t)?e.getValue(t).set(n):e.addValue(t,H(n))}function fr(e,t){var n=N(e,t),o=n?e.makeTargetAnimatable(n,!1):{},i=o.transitionEnd,a=void 0===i?{}:i;o.transition;var s=r.__rest(o,["transitionEnd","transition"]);for(var u in s=r.__assign(r.__assign({},s),a))cr(e,u,se(s[u]))}function dr(e,t){r.__spreadArray([],r.__read(t),!1).reverse().forEach((function(n){var r,o=e.getVariant(n);o&&fr(e,o),null===(r=e.variantChildren)||void 0===r||r.forEach((function(e){dr(e,t)}))}))}function pr(e,t,n){var r,o,i,a,s=Object.keys(t).filter((function(t){return!e.hasValue(t)})),l=s.length;if(l)for(var c=0;c<l;c++){var f=s[c],d=t[f],p=null;Array.isArray(d)&&(p=d[0]),null===p&&(p=null!==(o=null!==(r=n[f])&&void 0!==r?r:e.readValue(f))&&void 0!==o?o:t[f]),null!=p&&("string"==typeof p&&(/^\-?\d*\.?\d+$/.test(p)||/^0[^.\s]+$/.test(p))?p=parseFloat(p):!lr(p)&&u.complex.test(d)&&(p=ie(f,d)),e.addValue(f,H(p)),null!==(i=(a=n)[f])&&void 0!==i||(a[f]=p),e.setBaseTarget(f,p))}}function hr(e,t){if(t)return(t[e]||t.default||t).from}function mr(e,t,n){var r,o,i={};for(var a in e)i[a]=null!==(r=hr(a,t))&&void 0!==r?r:null===(o=n.getValue(a))||void 0===o?void 0:o.get();return i}function vr(e,t,n){var r;if(void 0===n&&(n={}),e.notifyAnimationStart(t),Array.isArray(t)){var o=t.map((function(t){return yr(e,t,n)}));r=Promise.all(o)}else if("string"==typeof t)r=yr(e,t,n);else{var i="function"==typeof t?N(e,t,n.custom):t;r=gr(e,i,n)}return r.then((function(){return e.notifyAnimationComplete(t)}))}function yr(e,t,n){var o;void 0===n&&(n={});var i=N(e,t,n.custom),a=(i||{}).transition,s=void 0===a?e.getDefaultTransition()||{}:a;n.transitionOverride&&(s=n.transitionOverride);var u=i?function(){return gr(e,i,n)}:function(){return Promise.resolve()},l=(null===(o=e.variantChildren)||void 0===o?void 0:o.size)?function(o){void 0===o&&(o=0);var i=s.delayChildren,a=void 0===i?0:i,u=s.staggerChildren,l=s.staggerDirection;return function(e,t,n,o,i,a){void 0===n&&(n=0),void 0===o&&(o=0),void 0===i&&(i=1);var s=[],u=(e.variantChildren.size-1)*o,l=1===i?function(e){return void 0===e&&(e=0),e*o}:function(e){return void 0===e&&(e=0),u-e*o};return Array.from(e.variantChildren).sort(br).forEach((function(e,o){s.push(yr(e,t,r.__assign(r.__assign({},a),{delay:n+l(o)})).then((function(){return e.notifyAnimationComplete(t)})))})),Promise.all(s)}(e,t,a+o,u,l,n)}:function(){return Promise.resolve()},c=s.when;if(c){var f=r.__read("beforeChildren"===c?[u,l]:[l,u],2),d=f[0],p=f[1];return d().then(p)}return Promise.all([u(),l(n.delay)])}function gr(e,t,n){var o,i=void 0===n?{}:n,a=i.delay,s=void 0===a?0:a,u=i.transitionOverride,l=i.type,c=e.makeTargetAnimatable(t),f=c.transition,d=void 0===f?e.getDefaultTransition():f,p=c.transitionEnd,h=r.__rest(c,["transition","transitionEnd"]);u&&(d=u);var m=[],v=l&&(null===(o=e.animationState)||void 0===o?void 0:o.getState()[l]);for(var y in h){var g=e.getValue(y),b=h[y];if(!(!g||void 0===b||v&&wr(v,y))){var w=r.__assign({delay:s},d);e.shouldReduceMotion&&lt(y)&&(w=r.__assign(r.__assign({},w),{type:!1,delay:0}));var _=pe(y,g,b,w);m.push(_)}}return Promise.all(m).then((function(){p&&fr(e,p)}))}function br(e,t){return e.sortNodePosition(t)}function wr(e,t){var n=e.protectedKeys,r=e.needsAnimating,o=n.hasOwnProperty(t)&&!0!==r[t];return r[t]=!1,o}var _r=[t.AnimationType.Animate,t.AnimationType.InView,t.AnimationType.Focus,t.AnimationType.Hover,t.AnimationType.Tap,t.AnimationType.Drag,t.AnimationType.Exit],xr=r.__spreadArray([],r.__read(_r),!1).reverse(),Er=_r.length;function kr(e){return void 0===e&&(e=!1),{isActive:e,protectedKeys:{},needsAnimating:{},prevResolvedValues:{}}}var Sr={animation:Zn((function(e){var n=e.visualElement,i=e.animate;n.animationState||(n.animationState=function(e){var n,o=function(e){return function(t){return Promise.all(t.map((function(t){var n=t.animation,r=t.options;return vr(e,n,r)})))}}(e),i=((n={})[t.AnimationType.Animate]=kr(!0),n[t.AnimationType.InView]=kr(),n[t.AnimationType.Hover]=kr(),n[t.AnimationType.Tap]=kr(),n[t.AnimationType.Drag]=kr(),n[t.AnimationType.Focus]=kr(),n[t.AnimationType.Exit]=kr(),n),a={},s=!0,u=function(t,n){var o=N(e,n);if(o){o.transition;var i=o.transitionEnd,a=r.__rest(o,["transition","transitionEnd"]);t=r.__assign(r.__assign(r.__assign({},t),a),i)}return t};function l(t,n){for(var l,c=e.getProps(),f=e.getVariantContext(!0)||{},d=[],p=new Set,h={},m=1/0,v=function(o){var a=xr[o],v=i[a],y=null!==(l=c[a])&&void 0!==l?l:f[a],g=R(y),b=a===n?v.isActive:null;!1===b&&(m=o);var w=y===f[a]&&y!==c[a]&&g;if(w&&s&&e.manuallyAnimateOnMount&&(w=!1),v.protectedKeys=r.__assign({},h),!v.isActive&&null===b||!y&&!v.prevProp||mn(y)||"boolean"==typeof y)return"continue";var _=function(e,t){return"string"==typeof t?t!==e:!!A(t)&&!or(t,e)}(v.prevProp,y),x=_||a===n&&v.isActive&&!w&&g||o>m&&g,E=Array.isArray(y)?y:[y],k=E.reduce(u,{});!1===b&&(k={});var S=v.prevResolvedValues,C=void 0===S?{}:S,P=r.__assign(r.__assign({},C),k),O=function(e){x=!0,p.delete(e),v.needsAnimating[e]=!0};for(var T in P){var M=k[T],j=C[T];h.hasOwnProperty(T)||(M!==j?K(M)&&K(j)?!or(M,j)||_?O(T):v.protectedKeys[T]=!0:void 0!==M?O(T):p.add(T):void 0!==M&&p.has(T)?O(T):v.protectedKeys[T]=!0)}v.prevProp=y,v.prevResolvedValues=k,v.isActive&&(h=r.__assign(r.__assign({},h),k)),s&&e.blockInitialAnimation&&(x=!1),x&&!w&&d.push.apply(d,r.__spreadArray([],r.__read(E.map((function(e){return{animation:e,options:r.__assign({type:a},t)}}))),!1))},y=0;y<Er;y++)v(y);if(a=r.__assign({},h),p.size){var g={};p.forEach((function(t){var n=e.getBaseTarget(t);void 0!==n&&(g[t]=n)})),d.push({animation:g})}var b=Boolean(d.length);return s&&!1===c.initial&&!e.manuallyAnimateOnMount&&(b=!1),s=!1,b?o(d):Promise.resolve()}return{isAnimated:function(e){return void 0!==a[e]},animateChanges:l,setActive:function(t,n,r){var o;return i[t].isActive===n?Promise.resolve():(null===(o=e.variantChildren)||void 0===o||o.forEach((function(e){var r;return null===(r=e.animationState)||void 0===r?void 0:r.setActive(t,n)})),i[t].isActive=n,l(r,t))},setAnimateFunction:function(t){o=t(e)},getState:function(){return i}}}(n)),mn(i)&&o.useEffect((function(){return i.subscribe(n)}),[i])})),exit:Zn((function(e){var n=e.custom,i=e.visualElement,a=r.__read(rr(),2),s=a[0],u=a[1],l=o.useContext(E);o.useEffect((function(){var e,r;i.isPresent=s;var o=null===(e=i.animationState)||void 0===e?void 0:e.setActive(t.AnimationType.Exit,!s,{custom:null!==(r=null==l?void 0:l.custom)&&void 0!==r?r:n});!s&&(null==o||o.then(u))}),[s])}))},Cr=function(){function e(e,t,n){var o=this,i=(void 0===n?{}:n).transformPagePoint;if(this.startEvent=null,this.lastMoveEvent=null,this.lastMoveEventInfo=null,this.handlers={},this.updatePoint=function(){if(o.lastMoveEvent&&o.lastMoveEventInfo){var e=Tr(o.lastMoveEventInfo,o.history),t=null!==o.startEvent,n=s.distance(e.offset,{x:0,y:0})>=3;if(t||n){var i=e.point,u=a.getFrameData().timestamp;o.history.push(r.__assign(r.__assign({},i),{timestamp:u}));var l=o.handlers,c=l.onStart,f=l.onMove;t||(c&&c(o.lastMoveEvent,e),o.startEvent=o.lastMoveEvent),f&&f(o.lastMoveEvent,e)}}},this.handlePointerMove=function(e,t){o.lastMoveEvent=e,o.lastMoveEventInfo=Pr(t,o.transformPagePoint),Sn(e)&&0===e.buttons?o.handlePointerUp(e,t):p.default.update(o.updatePoint,!0)},this.handlePointerUp=function(e,t){o.end();var n=o.handlers,r=n.onEnd,i=n.onSessionEnd,a=Tr(Pr(t,o.transformPagePoint),o.history);o.startEvent&&r&&r(e,a),i&&i(e,a)},!(Cn(e)&&e.touches.length>1)){this.handlers=t,this.transformPagePoint=i;var u=Pr(Mn(e),this.transformPagePoint),l=u.point,c=a.getFrameData().timestamp;this.history=[r.__assign(r.__assign({},l),{timestamp:c})];var f=t.onSessionStart;f&&f(e,Tr(u,this.history)),this.removeListeners=s.pipe(Ln(window,"pointermove",this.handlePointerMove),Ln(window,"pointerup",this.handlePointerUp),Ln(window,"pointercancel",this.handlePointerUp))}}return e.prototype.updateHandlers=function(e){this.handlers=e},e.prototype.end=function(){this.removeListeners&&this.removeListeners(),a.cancelSync.update(this.updatePoint)},e}();function Pr(e,t){return t?{point:t(e.point)}:e}function Or(e,t){return{x:e.x-t.x,y:e.y-t.y}}function Tr(e,t){var n=e.point;return{point:n,delta:Or(n,Ar(t)),offset:Or(n,Mr(t)),velocity:Rr(t,.1)}}function Mr(e){return e[0]}function Ar(e){return e[e.length-1]}function Rr(e,t){if(e.length<2)return{x:0,y:0};for(var n=e.length-1,r=null,o=Ar(e);n>=0&&(r=e[n],!(o.timestamp-r.timestamp>q(t)));)n--;if(!r)return{x:0,y:0};var i=(o.timestamp-r.timestamp)/1e3;if(0===i)return{x:0,y:0};var a={x:(o.x-r.x)/i,y:(o.y-r.y)/i};return a.x===1/0&&(a.x=0),a.y===1/0&&(a.y=0),a}function jr(e,t,n){return{min:void 0!==t?e.min+t:void 0,max:void 0!==n?e.max+n-(e.max-e.min):void 0}}function Nr(e,t){var n,o=t.min-e.min,i=t.max-e.max;return t.max-t.min<e.max-e.min&&(o=(n=r.__read([i,o],2))[0],i=n[1]),{min:o,max:i}}var Lr=.35;function Fr(e,t,n){return{min:Ir(e,t),max:Ir(e,n)}}function Ir(e,t){var n;return"number"==typeof e?e:null!==(n=e[t])&&void 0!==n?n:0}function Dr(e){var t=e.top;return{x:{min:e.left,max:e.right},y:{min:t,max:e.bottom}}}function Vr(e,t){return Dr(function(e,t){if(!t)return e;var n=t({x:e.left,y:e.top}),r=t({x:e.right,y:e.bottom});return{top:n.y,left:n.x,bottom:r.y,right:r.x}}(e.getBoundingClientRect(),t))}var Br=new WeakMap,zr=function(){function e(e){this.openGlobalLock=null,this.isDragging=!1,this.currentDirection=null,this.originPoint={x:0,y:0},this.constraints=!1,this.hasMutatedConstraints=!1,this.elastic={x:{min:0,max:0},y:{min:0,max:0}},this.visualElement=e}return e.prototype.start=function(e,n){var r=this,o=(void 0===n?{}:n).snapToCursor,i=void 0!==o&&o;!1!==this.visualElement.isPresent&&(this.panSession=new Cr(e,{onSessionStart:function(e){r.stopAnimation(),i&&r.snapToCursor(Mn(e,"page").point)},onStart:function(e,n){var o,i=r.getProps(),a=i.drag,s=i.dragPropagation,l=i.onDragStart;(!a||s||(r.openGlobalLock&&r.openGlobalLock(),r.openGlobalLock=Bn(a),r.openGlobalLock))&&(r.isDragging=!0,r.currentDirection=null,r.resolveConstraints(),r.visualElement.projection&&(r.visualElement.projection.isAnimationBlocked=!0,r.visualElement.projection.target=void 0),ot((function(e){var t,n,o=r.getAxisMotionValue(e).get()||0;if(u.percent.test(o)){var i=null===(n=null===(t=r.visualElement.projection)||void 0===t?void 0:t.layout)||void 0===n?void 0:n.actual[e];i&&(o=De(i)*(parseFloat(o)/100))}r.originPoint[e]=o})),null==l||l(e,n),null===(o=r.visualElement.animationState)||void 0===o||o.setActive(t.AnimationType.Drag,!0))},onMove:function(e,t){var n=r.getProps(),o=n.dragPropagation,i=n.dragDirectionLock,a=n.onDirectionLock,s=n.onDrag;if(o||r.openGlobalLock){var u=t.offset;if(i&&null===r.currentDirection)return r.currentDirection=function(e,t){void 0===t&&(t=10);var n=null;return Math.abs(e.y)>t?n="y":Math.abs(e.x)>t&&(n="x"),n}(u),void(null!==r.currentDirection&&(null==a||a(r.currentDirection)));r.updateAxis("x",t.point,u),r.updateAxis("y",t.point,u),r.visualElement.syncRender(),null==s||s(e,t)}},onSessionEnd:function(e,t){return r.stop(e,t)}},{transformPagePoint:this.visualElement.getTransformPagePoint()}))},e.prototype.stop=function(e,t){var n=this.isDragging;if(this.cancel(),n){var r=t.velocity;this.startAnimation(r);var o=this.getProps().onDragEnd;null==o||o(e,t)}},e.prototype.cancel=function(){var e,n;this.isDragging=!1,this.visualElement.projection&&(this.visualElement.projection.isAnimationBlocked=!1),null===(e=this.panSession)||void 0===e||e.end(),this.panSession=void 0,!this.getProps().dragPropagation&&this.openGlobalLock&&(this.openGlobalLock(),this.openGlobalLock=null),null===(n=this.visualElement.animationState)||void 0===n||n.setActive(t.AnimationType.Drag,!1)},e.prototype.updateAxis=function(e,t,n){var r=this.getProps().drag;if(n&&Ur(e,r,this.currentDirection)){var o,i,a,u,l,c=this.getAxisMotionValue(e),f=this.originPoint[e]+n[e];this.constraints&&this.constraints[e]&&(o=f,i=this.constraints[e],a=this.elastic[e],u=i.min,l=i.max,void 0!==u&&o<u?o=a?s.mix(u,o,a.min):Math.max(o,u):void 0!==l&&o>l&&(o=a?s.mix(l,o,a.max):Math.min(o,l)),f=o),c.set(f)}},e.prototype.resolveConstraints=function(){var e=this,t=this.getProps(),n=t.dragConstraints,r=t.dragElastic,o=(this.visualElement.projection||{}).layout,i=this.constraints;n&&M(n)?this.constraints||(this.constraints=this.resolveRefConstraints()):this.constraints=!(!n||!o)&&function(e,t){var n=t.top,r=t.left,o=t.bottom,i=t.right;return{x:jr(e.x,r,i),y:jr(e.y,n,o)}}(o.actual,n),this.elastic=function(e){return void 0===e&&(e=Lr),!1===e?e=0:!0===e&&(e=Lr),{x:Fr(e,"left","right"),y:Fr(e,"top","bottom")}}(r),i!==this.constraints&&o&&this.constraints&&!this.hasMutatedConstraints&&ot((function(t){e.getAxisMotionValue(t)&&(e.constraints[t]=function(e,t){var n={};return void 0!==t.min&&(n.min=t.min-e.min),void 0!==t.max&&(n.max=t.max-e.min),n}(o.actual[t],e.constraints[t]))}))},e.prototype.resolveRefConstraints=function(){var e=this.getProps(),t=e.dragConstraints,n=e.onMeasureDragConstraints;if(!t||!M(t))return!1;var r=t.current;i.invariant(null!==r,"If `dragConstraints` is set as a React ref, that ref must be passed to another component's `ref` prop.");var o=this.visualElement.projection;if(!o||!o.layout)return!1;var a=function(e,t,n){var r=Vr(e,n),o=t.scroll;return o&&(je(r.x,o.x),je(r.y,o.y)),r}(r,o.root,this.visualElement.getTransformPagePoint()),s=function(e,t){return{x:Nr(e.x,t.x),y:Nr(e.y,t.y)}}(o.layout.actual,a);if(n){var u=n(function(e){var t=e.x,n=e.y;return{top:n.min,right:t.max,bottom:n.max,left:t.min}}(s));this.hasMutatedConstraints=!!u,u&&(s=Dr(u))}return s},e.prototype.startAnimation=function(e){var t=this,n=this.getProps(),o=n.drag,i=n.dragMomentum,a=n.dragElastic,s=n.dragTransition,u=n.dragSnapToOrigin,l=n.onDragTransitionEnd,c=this.constraints||{},f=ot((function(n){var l;if(Ur(n,o,t.currentDirection)){var f=null!==(l=null==c?void 0:c[n])&&void 0!==l?l:{};u&&(f={min:0,max:0});var d=a?200:1e6,p=a?40:1e7,h=r.__assign(r.__assign({type:"inertia",velocity:i?e[n]:0,bounceStiffness:d,bounceDamping:p,timeConstant:750,restDelta:1,restSpeed:10},s),f);return t.startAxisValueAnimation(n,h)}}));return Promise.all(f).then(l)},e.prototype.startAxisValueAnimation=function(e,t){return pe(e,this.getAxisMotionValue(e),0,t)},e.prototype.stopAnimation=function(){var e=this;ot((function(t){return e.getAxisMotionValue(t).stop()}))},e.prototype.getAxisMotionValue=function(e){var t,n,r="_drag"+e.toUpperCase();return this.visualElement.getProps()[r]||this.visualElement.getValue(e,null!==(n=null===(t=this.visualElement.getProps().initial)||void 0===t?void 0:t[e])&&void 0!==n?n:0)},e.prototype.snapToCursor=function(e){var t=this;ot((function(n){if(Ur(n,t.getProps().drag,t.currentDirection)){var r=t.visualElement.projection,o=t.getAxisMotionValue(n);if(r&&r.layout){var i=r.layout.actual[n],a=i.min,u=i.max;o.set(e[n]-s.mix(a,u,.5))}}}))},e.prototype.scalePositionWithinConstraints=function(){var e,t=this,n=this.getProps(),r=n.drag,o=n.dragConstraints,i=this.visualElement.projection;if(M(o)&&i&&this.constraints){this.stopAnimation();var a={x:0,y:0};ot((function(e){var n,r,o,i,u,l=t.getAxisMotionValue(e);if(l){var c=l.get();a[e]=(n={min:c,max:c},r=t.constraints[e],o=.5,i=De(n),(u=De(r))>i?o=s.progress(r.min,r.max-i,n.min):i>u&&(o=s.progress(n.min,n.max-u,r.min)),s.clamp(0,1,o))}}));var u=this.visualElement.getProps().transformTemplate;this.visualElement.getInstance().style.transform=u?u({},""):"none",null===(e=i.root)||void 0===e||e.updateScroll(),i.updateLayout(),this.resolveConstraints(),ot((function(e){if(Ur(e,r,null)){var n=t.getAxisMotionValue(e),o=t.constraints[e],i=o.min,u=o.max;n.set(s.mix(i,u,a[e]))}}))}},e.prototype.addListeners=function(){var e,t=this;Br.set(this.visualElement,this);var n=Ln(this.visualElement.getInstance(),"pointerdown",(function(e){var n=t.getProps(),r=n.drag,o=n.dragListener;r&&(void 0===o||o)&&t.start(e)})),r=function(){M(t.getProps().dragConstraints)&&(t.constraints=t.resolveRefConstraints())},o=this.visualElement.projection,i=o.addEventListener("measure",r);o&&!o.layout&&(null===(e=o.root)||void 0===e||e.updateScroll(),o.updateLayout()),r();var a=En(window,"resize",(function(){t.scalePositionWithinConstraints()}));return o.addEventListener("didUpdate",(function(e){var n=e.delta,r=e.hasLayoutChanged;t.isDragging&&r&&(ot((function(e){var r=t.getAxisMotionValue(e);r&&(t.originPoint[e]+=n[e].translate,r.set(r.get()+n[e].translate))})),t.visualElement.syncRender())})),function(){a(),n(),i()}},e.prototype.getProps=function(){var e=this.visualElement.getProps(),t=e.drag,n=void 0!==t&&t,o=e.dragDirectionLock,i=void 0!==o&&o,a=e.dragPropagation,s=void 0!==a&&a,u=e.dragConstraints,l=void 0!==u&&u,c=e.dragElastic,f=void 0===c?Lr:c,d=e.dragMomentum,p=void 0===d||d;return r.__assign(r.__assign({},e),{drag:n,dragDirectionLock:i,dragPropagation:s,dragConstraints:l,dragElastic:f,dragMomentum:p})},e}();function Ur(e,t,n){return!(!0!==t&&t!==e||null!==n&&n!==e)}var Hr={pan:Zn((function(e){var t=e.onPan,n=e.onPanStart,r=e.onPanEnd,i=e.onPanSessionStart,a=e.visualElement,s=t||n||r||i,u=o.useRef(null),l=o.useContext(w).transformPagePoint,c={onSessionStart:i,onStart:n,onMove:t,onEnd:function(e,t){u.current=null,r&&r(e,t)}};o.useEffect((function(){null!==u.current&&u.current.updateHandlers(c)})),Fn(a,"pointerdown",s&&function(e){u.current=new Cr(e,c,{transformPagePoint:l})}),Wn((function(){return u.current&&u.current.end()}))})),drag:Zn((function(e){var t=e.dragControls,n=e.visualElement,r=D((function(){return new zr(n)}));o.useEffect((function(){return t&&t.subscribe(r)}),[r,t]),o.useEffect((function(){return r.addListeners()}),[r])}))},Wr=["LayoutMeasure","BeforeLayoutMeasure","LayoutUpdate","ViewportBoxUpdate","Update","Render","AnimationComplete","LayoutAnimationComplete","AnimationStart","SetAxisTarget","Unmount"],qr=function(e){var t=e.treeType,n=void 0===t?"":t,o=e.build,i=e.getBaseTarget,s=e.makeTargetAnimatable,u=e.measureViewportBox,l=e.render,c=e.readValueFromInstance,f=e.removeValueFromRenderState,d=e.sortNodePosition,h=e.scrapeMotionValuesFromProps;return function(e,t){var m=e.parent,v=e.props,y=e.presenceId,g=e.blockInitialAnimation,b=e.visualState,w=e.shouldReduceMotion;void 0===t&&(t={});var _,x,E=!1,k=b.latestValues,S=b.renderState,C=function(){var e=Wr.map((function(){return new z})),t={},n={clearAllListeners:function(){return e.forEach((function(e){return e.clear()}))},updatePropListeners:function(e){Wr.forEach((function(r){var o,i="on"+r,a=e[i];null===(o=t[r])||void 0===o||o.call(t),a&&(t[r]=n[i](a))}))}};return e.forEach((function(e,t){n["on"+Wr[t]]=function(t){return e.add(t)},n["notify"+Wr[t]]=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];return e.notify.apply(e,r.__spreadArray([],r.__read(t),!1))}})),n}(),P=new Map,O=new Map,T={},M=r.__assign({},k);function A(){_&&E&&(j(),l(_,S,v.style,$.projection))}function j(){o($,S,k,t,v)}function N(){C.notifyUpdate(k)}function I(e,t){var n=t.onChange((function(t){k[e]=t,v.onUpdate&&p.default.update(N,!1,!0)})),r=t.onRenderRequest($.scheduleRender);O.set(e,(function(){n(),r()}))}var D=h(v);for(var V in D){var B=D[V];void 0!==k[V]&&W(B)&&B.set(k[V],!1)}var U=L(v),q=F(v),$=r.__assign(r.__assign({treeType:n,current:null,depth:m?m.depth+1:0,parent:m,children:new Set,presenceId:y,shouldReduceMotion:w,variantChildren:q?new Set:void 0,isVisible:void 0,manuallyAnimateOnMount:Boolean(null==m?void 0:m.isMounted()),blockInitialAnimation:g,isMounted:function(){return Boolean(_)},mount:function(e){E=!0,_=$.current=e,$.projection&&$.projection.mount(e),q&&m&&!U&&(x=null==m?void 0:m.addVariantChild($)),P.forEach((function(e,t){return I(t,e)})),null==m||m.children.add($),$.setProps(v)},unmount:function(){var e;null===(e=$.projection)||void 0===e||e.unmount(),a.cancelSync.update(N),a.cancelSync.render(A),O.forEach((function(e){return e()})),null==x||x(),null==m||m.children.delete($),C.clearAllListeners(),_=void 0,E=!1},addVariantChild:function(e){var t,n=$.getClosestVariantNode();if(n)return null===(t=n.variantChildren)||void 0===t||t.add(e),function(){return n.variantChildren.delete(e)}},sortNodePosition:function(e){return d&&n===e.treeType?d($.getInstance(),e.getInstance()):0},getClosestVariantNode:function(){return q?$:null==m?void 0:m.getClosestVariantNode()},getLayoutId:function(){return v.layoutId},getInstance:function(){return _},getStaticValue:function(e){return k[e]},setStaticValue:function(e,t){return k[e]=t},getLatestValues:function(){return k},setVisibility:function(e){$.isVisible!==e&&($.isVisible=e,$.scheduleRender())},makeTargetAnimatable:function(e,t){return void 0===t&&(t=!0),s($,e,v,t)},measureViewportBox:function(){return u(_,v)},addValue:function(e,t){$.hasValue(e)&&$.removeValue(e),P.set(e,t),k[e]=t.get(),I(e,t)},removeValue:function(e){var t;P.delete(e),null===(t=O.get(e))||void 0===t||t(),O.delete(e),delete k[e],f(e,S)},hasValue:function(e){return P.has(e)},getValue:function(e,t){var n=P.get(e);return void 0===n&&void 0!==t&&(n=H(t),$.addValue(e,n)),n},forEachValue:function(e){return P.forEach(e)},readValue:function(e){var n;return null!==(n=k[e])&&void 0!==n?n:c(_,e,t)},setBaseTarget:function(e,t){M[e]=t},getBaseTarget:function(e){if(i){var t=i(v,e);if(void 0!==t&&!W(t))return t}return M[e]}},C),{build:function(){return j(),S},scheduleRender:function(){p.default.render(A,!1,!0)},syncRender:A,setProps:function(e){(e.transformTemplate||v.transformTemplate)&&$.scheduleRender(),v=e,C.updatePropListeners(e),T=function(e,t,n){var r;for(var o in t){var i=t[o],a=n[o];if(W(i))e.addValue(o,i);else if(W(a))e.addValue(o,H(i));else if(a!==i)if(e.hasValue(o)){var s=e.getValue(o);!s.hasAnimated&&s.set(i)}else e.addValue(o,H(null!==(r=e.getStaticValue(o))&&void 0!==r?r:i))}for(var o in n)void 0===t[o]&&e.removeValue(o);return t}($,h(v),T)},getProps:function(){return v},getVariant:function(e){var t;return null===(t=v.variants)||void 0===t?void 0:t[e]},getDefaultTransition:function(){return v.transition},getTransformPagePoint:function(){return v.transformPagePoint},getVariantContext:function(e){if(void 0===e&&(e=!1),e)return null==m?void 0:m.getVariantContext();if(!U){var t=(null==m?void 0:m.getVariantContext())||{};return void 0!==v.initial&&(t.initial=v.initial),t}for(var n={},r=0;r<Yr;r++){var o=$r[r],i=v[o];(R(i)||!1===i)&&(n[o]=i)}return n}});return $}},$r=r.__spreadArray(["initial"],r.__read(_r),!1),Yr=$r.length;function Xr(e){return"string"==typeof e&&e.startsWith("var(--")}var Kr=/var\((--[a-zA-Z0-9-_]+),? ?([a-zA-Z0-9 ()%#.,-]+)?\)/;function Qr(e,t,n){void 0===n&&(n=1),i.invariant(n<=4,'Max CSS variable fallback depth detected in property "'.concat(e,'". This may indicate a circular fallback dependency.'));var o=r.__read(function(e){var t=Kr.exec(e);if(!t)return[,];var n=r.__read(t,3);return[n[1],n[2]]}(e),2),a=o[0],s=o[1];if(a){var u=window.getComputedStyle(t).getPropertyValue(a);return u?u.trim():Xr(s)?Qr(s,t,n+1):s}}var Gr,Zr=new Set(["width","height","top","left","right","bottom","x","y"]),Jr=function(e){return Zr.has(e)},eo=function(e,t){e.set(t,!1),e.set(t)},to=function(e){return e===u.number||e===u.px};!function(e){e.width="width",e.height="height",e.left="left",e.right="right",e.top="top",e.bottom="bottom"}(Gr||(Gr={}));var no=function(e,t){return parseFloat(e.split(", ")[t])},ro=function(e,t){return function(n,r){var o=r.transform;if("none"===o||!o)return 0;var i=o.match(/^matrix3d\((.+)\)$/);if(i)return no(i[1],t);var a=o.match(/^matrix\((.+)\)$/);return a?no(a[1],e):0}},oo=new Set(["x","y","z"]),io=at.filter((function(e){return!oo.has(e)})),ao={width:function(e,t){var n=e.x,r=t.paddingLeft,o=void 0===r?"0":r,i=t.paddingRight,a=void 0===i?"0":i;return n.max-n.min-parseFloat(o)-parseFloat(a)},height:function(e,t){var n=e.y,r=t.paddingTop,o=void 0===r?"0":r,i=t.paddingBottom,a=void 0===i?"0":i;return n.max-n.min-parseFloat(o)-parseFloat(a)},top:function(e,t){var n=t.top;return parseFloat(n)},left:function(e,t){var n=t.left;return parseFloat(n)},bottom:function(e,t){var n=e.y,r=t.top;return parseFloat(r)+(n.max-n.min)},right:function(e,t){var n=e.x,r=t.left;return parseFloat(r)+(n.max-n.min)},x:ro(4,13),y:ro(5,14)};function so(e,t,n,o){return function(e){return Object.keys(e).some(Jr)}(t)?function(e,t,n,o){void 0===n&&(n={}),void 0===o&&(o={}),t=r.__assign({},t),o=r.__assign({},o);var a=Object.keys(t).filter(Jr),s=[],l=!1,c=[];if(a.forEach((function(r){var a=e.getValue(r);if(e.hasValue(r)){var f,d=n[r],p=sr(d),h=t[r];if(K(h)){var m=h.length,v=null===h[0]?1:0;d=h[v],p=sr(d);for(var y=v;y<m;y++)f?i.invariant(sr(h[y])===f,"All keyframes must be of the same type"):(f=sr(h[y]),i.invariant(f===p||to(p)&&to(f),"Keyframes must be of the same dimension as the current value"))}else f=sr(h);if(p!==f)if(to(p)&&to(f)){var g=a.get();"string"==typeof g&&a.set(parseFloat(g)),"string"==typeof h?t[r]=parseFloat(h):Array.isArray(h)&&f===u.px&&(t[r]=h.map(parseFloat))}else(null==p?void 0:p.transform)&&(null==f?void 0:f.transform)&&(0===d||0===h)?0===d?a.set(f.transform(d)):t[r]=p.transform(h):(l||(s=function(e){var t=[];return io.forEach((function(n){var r=e.getValue(n);void 0!==r&&(t.push([n,r.get()]),r.set(n.startsWith("scale")?1:0))})),t.length&&e.syncRender(),t}(e),l=!0),c.push(r),o[r]=void 0!==o[r]?o[r]:t[r],eo(a,h))}})),c.length){var f=function(e,t,n){var r=t.measureViewportBox(),o=t.getInstance(),i=getComputedStyle(o),a=i.display,s={};"none"===a&&t.setStaticValue("display",e.display||"block"),n.forEach((function(e){s[e]=ao[e](r,i)})),t.syncRender();var u=t.measureViewportBox();return n.forEach((function(n){var r=t.getValue(n);eo(r,s[n]),e[n]=ao[n](u,i)})),e}(t,e,c);return s.length&&s.forEach((function(t){var n=r.__read(t,2),o=n[0],i=n[1];e.getValue(o).set(i)})),e.syncRender(),{target:f,transitionEnd:o}}return{target:t,transitionEnd:o}}(e,t,n,o):{target:t,transitionEnd:o}}var uo={treeType:"dom",readValueFromInstance:function(e,t){if(lt(t)){var n=oe(t);return n&&n.default||0}var r,o=(r=e,window.getComputedStyle(r));return(Wt(t)?o.getPropertyValue(t):o[t])||0},sortNodePosition:function(e,t){return 2&e.compareDocumentPosition(t)?1:-1},getBaseTarget:function(e,t){var n;return null===(n=e.style)||void 0===n?void 0:n[t]},measureViewportBox:function(e,t){return Vr(e,t.transformPagePoint)},resetTransform:function(e,t,n){var r=n.transformTemplate;t.style.transform=r?r({},""):"none",e.scheduleRender()},restoreTransform:function(e,t){e.style.transform=t.style.transform},removeValueFromRenderState:function(e,t){var n=t.vars,r=t.style;delete n[e],delete r[e]},makeTargetAnimatable:function(e,t,n,o){var i=n.transformValues;void 0===o&&(o=!0);var a=t.transition,s=t.transitionEnd,u=r.__rest(t,["transition","transitionEnd"]),l=mr(u,a||{},e);if(i&&(s&&(s=i(s)),u&&(u=i(u)),l&&(l=i(l))),o){pr(e,u,l);var c=function(e,t,n,o){var i=function(e,t,n){var o,i=r.__rest(t,[]),a=e.getInstance();if(!(a instanceof Element))return{target:i,transitionEnd:n};for(var s in n&&(n=r.__assign({},n)),e.forEachValue((function(e){var t=e.get();if(Xr(t)){var n=Qr(t,a);n&&e.set(n)}})),i){var u=i[s];if(Xr(u)){var l=Qr(u,a);l&&(i[s]=l,n&&(null!==(o=n[s])&&void 0!==o||(n[s]=u)))}}return{target:i,transitionEnd:n}}(e,t,o);return so(e,t=i.target,n,o=i.transitionEnd)}(e,u,l,s);s=c.transitionEnd,u=c.target}return r.__assign({transition:a,transitionEnd:s},u)},scrapeMotionValuesFromProps:pn,build:function(e,t,n,r,o){void 0!==e.isVisible&&(t.style.visibility=e.isVisible?"visible":"hidden"),$t(t,n,r,o.transformTemplate)},render:cn},lo=qr(uo),co=qr(r.__assign(r.__assign({},uo),{getBaseTarget:function(e,t){return e[t]},readValueFromInstance:function(e,t){var n;return lt(t)?(null===(n=oe(t))||void 0===n?void 0:n.default)||0:(t=fn.has(t)?t:ln(t),e.getAttribute(t))},scrapeMotionValuesFromProps:hn,build:function(e,t,n,r,o){rn(t,n,r,o.transformTemplate)},render:dn})),fo=function(e,t){return zt(e)?co(t,{enableHardwareAcceleration:!1}):lo(t,{enableHardwareAcceleration:!0})};function po(e,t){return t.max===t.min?0:e/(t.max-t.min)*100}var ho={correct:function(e,t){if(!t.target)return e;if("string"==typeof e){if(!u.px.test(e))return e;e=parseFloat(e)}var n=po(e,t.target.x),r=po(e,t.target.y);return"".concat(n,"% ").concat(r,"%")}},mo="_$css",vo={correct:function(e,t){var n=t.treeScale,r=t.projectionDelta,o=e,i=e.includes("var("),a=[];i&&(e=e.replace(Kr,(function(e){return a.push(e),mo})));var l=u.complex.parse(e);if(l.length>5)return o;var c=u.complex.createTransformer(e),f="number"!=typeof l[0]?1:0,d=r.x.scale*n.x,p=r.y.scale*n.y;l[0+f]/=d,l[1+f]/=p;var h=s.mix(d,p,.5);"number"==typeof l[2+f]&&(l[2+f]/=h),"number"==typeof l[3+f]&&(l[3+f]/=h);var m=c(l);if(i){var v=0;m=m.replace(mo,(function(){var e=a[v];return v++,e}))}return m}},yo=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return r.__extends(t,e),t.prototype.componentDidMount=function(){var e=this,t=this.props,n=t.visualElement,o=t.layoutGroup,i=t.switchLayoutGroup,a=t.layoutId,s=n.projection;nt(go),s&&((null==o?void 0:o.group)&&o.group.add(s),(null==i?void 0:i.register)&&a&&i.register(s),s.root.didUpdate(),s.addEventListener("animationComplete",(function(){e.safeToRemove()})),s.setOptions(r.__assign(r.__assign({},s.options),{onExitComplete:function(){return e.safeToRemove()}}))),mt.hasEverUpdated=!0},t.prototype.getSnapshotBeforeUpdate=function(e){var t=this,n=this.props,r=n.layoutDependency,o=n.visualElement,i=n.drag,a=n.isPresent,s=o.projection;return s?(s.isPresent=a,i||e.layoutDependency!==r||void 0===r?s.willUpdate():this.safeToRemove(),e.isPresent!==a&&(a?s.promote():s.relegate()||p.default.postRender((function(){var e;(null===(e=s.getStack())||void 0===e?void 0:e.members.length)||t.safeToRemove()}))),null):null},t.prototype.componentDidUpdate=function(){var e=this.props.visualElement.projection;e&&(e.root.didUpdate(),!e.currentAnimation&&e.isLead()&&this.safeToRemove())},t.prototype.componentWillUnmount=function(){var e=this.props,t=e.visualElement,n=e.layoutGroup,r=e.switchLayoutGroup,o=t.projection;o&&(o.scheduleCheckAfterUnmount(),(null==n?void 0:n.group)&&n.group.remove(o),(null==r?void 0:r.deregister)&&r.deregister(o))},t.prototype.safeToRemove=function(){var e=this.props.safeToRemove;null==e||e()},t.prototype.render=function(){return null},t}(d.default.Component),go={borderRadius:r.__assign(r.__assign({},ho),{applyTo:["borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius"]}),borderTopLeftRadius:ho,borderTopRightRadius:ho,borderBottomLeftRadius:ho,borderBottomRightRadius:ho,boxShadow:vo},bo={measureLayout:function(e){var t=r.__read(rr(),2),n=t[0],i=t[1],a=o.useContext(Lt);return d.default.createElement(yo,r.__assign({},e,{layoutGroup:a,switchLayoutGroup:o.useContext(Ft),isPresent:n,safeToRemove:i}))}},wo=vt({attachResizeListener:function(e,t){return e.addEventListener("resize",t,{passive:!0}),function(){return e.removeEventListener("resize",t)}},measureScroll:function(){return{x:document.documentElement.scrollLeft||document.body.scrollLeft,y:document.documentElement.scrollTop||document.body.scrollTop}}}),_o={current:void 0},xo=vt({measureScroll:function(e){return{x:e.scrollLeft,y:e.scrollTop}},defaultParent:function(){if(!_o.current){var e=new wo(0,{});e.mount(window),e.setOptions({layoutScroll:!0}),_o.current=e}return _o.current},resetTransform:function(e,t){e.style.transform=null!=t?t:"none"}}),Eo=r.__assign(r.__assign(r.__assign(r.__assign({},Sr),Jn),Hr),bo),ko=Vt((function(e,t){return xn(e,t,Eo,fo,xo)})),So=Vt(xn);function Co(){var e=o.useRef(!1);return S((function(){return e.current=!0,function(){e.current=!1}}),[]),e}function Po(){var e=Co(),t=r.__read(o.useState(0),2),n=t[0],i=t[1],a=o.useCallback((function(){e.current&&i(n+1)}),[n]);return[o.useCallback((function(){return p.default.postRender(a)}),[a]),n]}var Oo=function(e){var t=e.children,n=e.initial,i=e.isPresent,a=e.onExitComplete,s=e.custom,u=e.presenceAffectsLayout,l=D(To),c=nr(),d=o.useMemo((function(){return{id:c,initial:n,isPresent:i,custom:s,onExitComplete:function(e){var t,n;l.set(e,!0);try{for(var o=r.__values(l.values()),i=o.next();!i.done;i=o.next())if(!i.value)return}catch(e){t={error:e}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(t)throw t.error}}null==a||a()},register:function(e){return l.set(e,!1),function(){return l.delete(e)}}}}),u?void 0:[i]);return o.useMemo((function(){l.forEach((function(e,t){return l.set(t,!1)}))}),[i]),f.useEffect((function(){!i&&!l.size&&(null==a||a())}),[i]),f.createElement(E.Provider,{value:d},t)};function To(){return new Map}var Mo=function(e){return e.key||""},Ao=o.createContext(null),Ro=function(e){return!e.isLayoutDirty&&e.willUpdate(!1)};var jo=function(e){return!0===e},No=function(e){var t,n,i=e.children,a=e.id,s=e.inheritId,u=e.inherit,l=void 0===u||u;void 0!==s&&(l=s);var c,d,p,h=o.useContext(Lt),m=o.useContext(Ao),v=r.__read(Po(),2),y=v[0],g=v[1],b=o.useRef(null),w=null!==(t=h.id)&&void 0!==t?t:m;null===b.current&&(function(e){return jo(!0===e)||"id"===e}(l)&&w&&(a=a?w+"-"+a:w),b.current={id:a,group:jo(l)&&null!==(n=null==h?void 0:h.group)&&void 0!==n?n:(c=new Set,d=new WeakMap,p=function(){return c.forEach(Ro)},{add:function(e){c.add(e),d.set(e,e.addEventListener("willUpdate",p))},remove:function(e){var t;c.delete(e),null===(t=d.get(e))||void 0===t||t(),d.delete(e),p()},dirty:p})});var _=o.useMemo((function(){return r.__assign(r.__assign({},b.current),{forceRender:y})}),[g]);return f.createElement(Lt.Provider,{value:_},i)},Lo=0;function Fo(e){return"function"==typeof e}var Io=o.createContext(null);var Do=o.forwardRef((function(e,t){var n=e.children,a=e.as,u=void 0===a?"ul":a,l=e.axis,c=void 0===l?"y":l,d=e.onReorder,p=e.values,h=r.__rest(e,["children","as","axis","onReorder","values"]),m=D((function(){return ko(u)})),v=[],y=o.useRef(!1);i.invariant(Boolean(p),"Reorder.Group must be provided a values prop");var g={axis:c,registerItem:function(e,t){t&&-1===v.findIndex((function(t){return e===t.value}))&&(v.push({value:e,layout:t[c]}),v.sort(Bo))},updateOrder:function(e,t,n){if(!y.current){var o=function(e,t,n,o){if(!o)return e;var i=e.findIndex((function(e){return e.value===t}));if(-1===i)return e;var a=o>0?1:-1,u=e[i+a];if(!u)return e;var l=e[i],c=u.layout,f=s.mix(c.min,c.max,.5);return 1===a&&l.layout.max+n>f||-1===a&&l.layout.min+n<f?function(e,t,n){var o=r.__read(e).slice(0),i=t<0?o.length+t:t;if(i>=0&&i<o.length){var a=n<0?o.length+n:n,s=r.__read(o.splice(t,1),1)[0];o.splice(a,0,s)}return o}(e,i,i+a):e}(v,e,t,n);v!==o&&(y.current=!0,d(o.map(Vo).filter((function(e){return-1!==p.indexOf(e)}))))}}};return o.useEffect((function(){y.current=!1})),f.createElement(m,r.__assign({},h,{ref:t}),f.createElement(Io.Provider,{value:g},n))}));function Vo(e){return e.value}function Bo(e,t){return e.layout.min-t.layout.min}function zo(e){var t=D((function(){return H(e)}));if(o.useContext(w).isStatic){var n=r.__read(o.useState(e),2)[1];o.useEffect((function(){return t.onChange(n)}),[])}return t}var Uo=function(e){return function(e){return"object"==typeof e&&e.mix}(e)?e.mix:void 0};function Ho(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=!Array.isArray(e[0]),o=n?0:-1,i=e[0+o],a=e[1+o],u=e[2+o],l=e[3+o],c=s.interpolate(a,u,r.__assign({mixer:Uo(u[0])},l));return n?c(i):c}function Wo(e,t){var n=zo(t()),r=function(){return n.set(t())};return r(),function(e,t){o.useEffect((function(){var n=e.map((function(e){return e.onChange(t)}));return function(){return n.forEach((function(e){return e()}))}}))}(e,(function(){return p.default.update(r,!1,!0)})),n}function qo(e,t,n,o){var i="function"==typeof t?t:Ho(t,n,o);return Array.isArray(e)?$o(e,i):$o([e],(function(e){var t=r.__read(e,1)[0];return i(t)}))}function $o(e,t){var n=D((function(){return[]}));return Wo(e,(function(){n.length=0;for(var r=e.length,o=0;o<r;o++)n[o]=e[o].get();return t(n)}))}function Yo(e,t){return void 0===t&&(t=0),W(e)?e:zo(t)}var Xo,Ko={Group:Do,Item:o.forwardRef((function(e,t){var n=e.children,a=e.style,s=e.value,u=e.as,l=void 0===u?"li":u,c=e.onDrag,d=r.__rest(e,["children","style","value","as","onDrag"]),p=D((function(){return ko(l)})),h=o.useContext(Io),m={x:Yo(null==a?void 0:a.x),y:Yo(null==a?void 0:a.y)},v=qo([m.x,m.y],(function(e){var t=r.__read(e,2),n=t[0],o=t[1];return n||o?1:"unset"})),y=o.useRef(null);i.invariant(Boolean(h),"Reorder.Item must be a child of Reorder.Group");var g=h,b=g.axis,w=g.registerItem,_=g.updateOrder;return o.useEffect((function(){w(s,y.current)}),[h]),f.createElement(p,r.__assign({drag:b},d,{dragSnapToOrigin:!0,style:r.__assign(r.__assign({},a),{x:m.x,y:m.y,zIndex:v}),layout:!0,onDrag:function(e,t){var n=t.velocity;n[b]&&_(s,m[b].get(),n[b]),null==c||c(e,t)},onLayoutMeasure:function(e){y.current=e},ref:t}),n)}))},Qo=r.__assign(r.__assign({renderer:fo},Sr),Jn),Go=r.__assign(r.__assign(r.__assign(r.__assign({},Qo),Hr),bo),{projectionNodeConstructor:xo});function Zo(){return{scrollX:H(0),scrollY:H(0),scrollXProgress:H(0),scrollYProgress:H(0)}}function Jo(e,t,n){n.set(e&&t?e/t:0)}function ei(e,t){var n=function(){var n=t(),r=n.xOffset,o=n.yOffset,i=n.xMaxOffset,a=n.yMaxOffset;e.scrollX.set(r),e.scrollY.set(o),Jo(r,i,e.scrollXProgress),Jo(o,a,e.scrollYProgress)};return n(),n}function ti(){return{xOffset:window.pageXOffset,yOffset:window.pageYOffset,xMaxOffset:document.body.clientWidth-window.innerWidth,yMaxOffset:document.body.clientHeight-window.innerHeight}}var ni=!1,ri="undefined"!=typeof performance?function(){return performance.now()}:function(){return Date.now()};function oi(e){var t=D(ri),n=o.useContext(w).isStatic;o.useEffect((function(){if(!n){var r=function(n){var r=n.timestamp;e(r-t)};return p.default.update(r,!0),function(){return a.cancelSync.update(r)}}}),[e])}function ii(){var e=!1,t=[],n=new Set,o={subscribe:function(e){return n.add(e),function(){n.delete(e)}},start:function(r,o){if(e){var i=[];return n.forEach((function(e){i.push(vr(e,r,{transitionOverride:o}))})),Promise.all(i)}return new Promise((function(e){t.push({animation:[r,o],resolve:e})}))},set:function(t){return i.invariant(e,"controls.set() should only be called after a component has mounted. Consider calling within a useEffect hook."),n.forEach((function(e){!function(e,t){Array.isArray(t)?dr(e,t):"string"==typeof t?dr(e,[t]):fr(e,t)}(e,t)}))},stop:function(){n.forEach((function(e){!function(e){e.forEachValue((function(e){return e.stop()}))}(e)}))},mount:function(){return e=!0,t.forEach((function(e){var t=e.animation,n=e.resolve;o.start.apply(o,r.__spreadArray([],r.__read(t),!1)).then(n)})),function(){e=!1,o.stop()}}};return o}var ai=function(){function e(){this.componentControls=new Set}return e.prototype.subscribe=function(e){var t=this;return this.componentControls.add(e),function(){return t.componentControls.delete(e)}},e.prototype.start=function(e,t){this.componentControls.forEach((function(n){n.start(e.nativeEvent||e,t)}))},e}(),si=function(){return new ai};function ui(){return li}function li(e){_o.current&&(_o.current.isUpdating=!1,_o.current.blockUpdate(),null==e||e())}var ci=function(){return{}},fi=qr({build:function(){},measureViewportBox:Qe,resetTransform:function(){},restoreTransform:function(){},removeValueFromRenderState:function(){},render:function(){},scrapeMotionValuesFromProps:ci,readValueFromInstance:function(e,t,n){return n.initialState[t]||0},makeTargetAnimatable:function(e,t){var n=t.transition,o=t.transitionEnd,i=r.__rest(t,["transition","transitionEnd"]);return pr(e,i,mr(i,n||{},e)),r.__assign({transition:n,transitionEnd:o},i)}}),di=yn({scrapeMotionValuesFromProps:ci,createRenderState:ci}),pi=function(e){return e>.001?1/e:1e5},hi=!1;t.AnimatePresence=function(e){var t=e.children,n=e.custom,i=e.initial,a=void 0===i||i,s=e.onExitComplete,u=e.exitBeforeEnter,l=e.presenceAffectsLayout,c=void 0===l||l,d=r.__read(Po(),1)[0],p=o.useContext(Lt).forceRender;p&&(d=p);var h=Co(),m=function(e){var t=[];return o.Children.forEach(e,(function(e){o.isValidElement(e)&&t.push(e)})),t}(t),v=m,y=new Set,g=o.useRef(v),b=o.useRef(new Map).current,w=o.useRef(!0);if(S((function(){w.current=!1,function(e,t){e.forEach((function(e){var n=Mo(e);t.set(n,e)}))}(m,b),g.current=v})),Wn((function(){w.current=!0,b.clear(),y.clear()})),w.current)return f.createElement(f.Fragment,null,v.map((function(e){return f.createElement(Oo,{key:Mo(e),isPresent:!0,initial:!!a&&void 0,presenceAffectsLayout:c},e)})));v=r.__spreadArray([],r.__read(v),!1);for(var _=g.current.map(Mo),x=m.map(Mo),E=_.length,k=0;k<E;k++){var C=_[k];-1===x.indexOf(C)&&y.add(C)}return u&&y.size&&(v=[]),y.forEach((function(e){if(-1===x.indexOf(e)){var t=b.get(e);if(t){var r=_.indexOf(e);v.splice(r,0,f.createElement(Oo,{key:Mo(t),isPresent:!1,onExitComplete:function(){b.delete(e),y.delete(e);var t=g.current.findIndex((function(t){return t.key===e}));if(g.current.splice(t,1),!y.size){if(g.current=m,!1===h.current)return;d(),s&&s()}},custom:n,presenceAffectsLayout:c},t))}}})),v=v.map((function(e){var t=e.key;return y.has(t)?e:f.createElement(Oo,{key:Mo(e),isPresent:!0,presenceAffectsLayout:c},e)})),f.createElement(f.Fragment,null,y.size?v:v.map((function(e){return o.cloneElement(e)})))},t.AnimateSharedLayout=function(e){var t=e.children;return f.createElement(No,{id:D((function(){return"asl-".concat(Lo++)}))},t)},t.DeprecatedLayoutGroupContext=Ao,t.DragControls=ai,t.FlatTree=pt,t.LayoutGroup=No,t.LayoutGroupContext=Lt,t.LazyMotion=function(e){var t=e.children,n=e.features,i=e.strict,a=void 0!==i&&i,s=r.__read(o.useState(!Fo(n)),2)[1],u=o.useRef(void 0);if(!Fo(n)){var l=n.renderer,c=r.__rest(n,["renderer"]);u.current=l,v(c)}return o.useEffect((function(){Fo(n)&&n().then((function(e){var t=e.renderer;v(r.__rest(e,["renderer"])),u.current=t,s(!0)}))}),[]),f.createElement(y.Provider,{value:{renderer:u.current,strict:a}},t)},t.MotionConfig=function(e){var t=e.children,n=e.isValidProp,i=r.__rest(e,["children","isValidProp"]);n&&Zt(n),(i=r.__assign(r.__assign({},o.useContext(w)),i)).isStatic=D((function(){return i.isStatic}));var a=o.useMemo((function(){return i}),[JSON.stringify(i.transition),i.transformPagePoint]);return f.createElement(w.Provider,{value:a},t)},t.MotionConfigContext=w,t.MotionContext=_,t.MotionValue=U,t.PresenceContext=E,t.Reorder=Ko,t.SwitchLayoutGroupContext=Ft,t.addPointerEvent=Ln,t.addScaleCorrector=nt,t.animate=he,t.animateVisualElement=vr,t.animationControls=ii,t.animations=Sr,t.calcLength=De,t.checkTargetForNewValues=pr,t.createBox=Qe,t.createDomMotionComponent=function(e){return Dt(xn(e,{forwardMotionProps:!1},Eo,fo,xo))},t.createMotionComponent=Dt,t.domAnimation=Qo,t.domMax=Go,t.filterProps=Jt,t.isBrowser=k,t.isDragActive=zn,t.isMotionValue=W,t.isValidMotionProp=Qt,t.m=So,t.makeUseVisualState=yn,t.motion=ko,t.motionValue=H,t.resolveMotionValue=ht,t.transform=Ho,t.useAnimation=function(){var e=D(ii);return o.useEffect(e.mount,[]),e},t.useAnimationFrame=oi,t.useCycle=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=o.useRef(0),i=r.__read(o.useState(e[n.current]),2),a=i[0],u=i[1];return[a,function(t){n.current="number"!=typeof t?s.wrap(0,e.length,n.current+1):t,u(e[n.current])}]},t.useDeprecatedAnimatedState=function(e){var t=r.__read(o.useState(e),2),n=t[0],i=t[1],a=di({},!1),s=D((function(){return fi({props:{},visualState:a},{initialState:e})}));return o.useEffect((function(){return s.mount({}),s.unmount}),[s]),o.useEffect((function(){s.setProps({onUpdate:function(e){i(r.__assign({},e))}})}),[i,s]),[n,D((function(){return function(e){return vr(s,e)}}))]},t.useDeprecatedInvertedScale=function(e){var t=zo(1),n=zo(1),r=x();return i.invariant(!(!e&&!r),"If no scale values are provided, useInvertedScale must be used within a child of another motion component."),i.warning(hi,"useInvertedScale is deprecated and will be removed in 3.0. Use the layout prop instead."),hi=!0,e?(t=e.scaleX||t,n=e.scaleY||n):r&&(t=r.getValue("scaleX",1),n=r.getValue("scaleY",1)),{scaleX:qo(t,pi),scaleY:qo(n,pi)}},t.useDomEvent=kn,t.useDragControls=function(){return D(si)},t.useElementScroll=function(e){var t=D(Zo);return S((function(){var n=e.current;if(i.invariant(!!n,"ref provided to useScroll must be passed into a HTML element."),n){var r=ei(t,function(e){return function(){return{xOffset:e.scrollLeft,yOffset:e.scrollTop,xMaxOffset:e.scrollWidth-e.offsetWidth,yMaxOffset:e.scrollHeight-e.offsetHeight}}}(n)),o=En(n,"scroll",r,{passive:!0}),a=En(n,"resize",r);return function(){o&&o(),a&&a()}}}),[]),t},t.useForceUpdate=Po,t.useInstantLayoutTransition=ui,t.useInstantTransition=function(){var e=r.__read(Po(),2),t=e[0],n=e[1],i=ui();return o.useEffect((function(){p.default.postRender((function(){return p.default.postRender((function(){return ae.current=!1}))}))}),[n]),function(e){i((function(){ae.current=!0,t(),e()}))}},t.useIsPresent=function(){return null===(e=o.useContext(E))||e.isPresent;var e},t.useIsomorphicLayoutEffect=S,t.useMotionTemplate=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];var r=e.length;function o(){for(var n="",o=0;o<r;o++)n+=e[o],t[o]&&(n+=t[o].get());return n}return Wo(t,o)},t.useMotionValue=zo,t.usePresence=rr,t.useReducedMotion=O,t.useReducedMotionConfig=T,t.useResetProjection=function(){return f.useCallback((function(){var e=_o.current;e&&e.resetTree()}),[])},t.useSpring=function(e,t){void 0===t&&(t={});var n=o.useContext(w).isStatic,i=o.useRef(null),a=zo(W(e)?e.get():e);return o.useMemo((function(){return a.attach((function(e,o){return n?o(e):(i.current&&i.current.stop(),i.current=s.animate(r.__assign(r.__assign({from:a.get(),to:e,velocity:a.getVelocity()},t),{onUpdate:o})),a.get())}))}),Object.values(t)),function(e,t){o.useEffect((function(){if(W(e))return e.onChange(t)}),[t])}(e,(function(e){return a.set(parseFloat(e))})),a},t.useTime=function(){var e=zo(0);return oi((function(t){return e.set(t)})),e},t.useTransform=qo,t.useUnmountEffect=Wn,t.useVelocity=function(e){var t=zo(e.getVelocity());return o.useEffect((function(){return e.velocityUpdateSubscribers.add((function(e){t.set(e)}))}),[e]),t},t.useViewportScroll=function(){return Xo||(Xo=Zo()),S((function(){!ni&&function(){if(ni=!0,"undefined"!=typeof window){var e=ei(Xo,ti);En(window,"scroll",e,{passive:!0}),En(window,"resize",e)}}()}),[]),Xo},t.useVisualElementContext=x,t.visualElement=qr,t.wrapHandler=An},1439:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__extends:()=>o,__assign:()=>i,__rest:()=>a,__decorate:()=>s,__param:()=>u,__metadata:()=>l,__awaiter:()=>c,__generator:()=>f,__createBinding:()=>d,__exportStar:()=>p,__values:()=>h,__read:()=>m,__spread:()=>v,__spreadArrays:()=>y,__spreadArray:()=>g,__await:()=>b,__asyncGenerator:()=>w,__asyncDelegator:()=>_,__asyncValues:()=>x,__makeTemplateObject:()=>E,__importStar:()=>S,__importDefault:()=>C,__classPrivateFieldGet:()=>P,__classPrivateFieldSet:()=>O});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function s(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function u(e,t){return function(n,r){t(n,r,e)}}function l(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var d=Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function p(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||d(t,e,n)}function h(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function y(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,o++)r[o]=i[a];return r}function g(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function b(e){return this instanceof b?(this.v=e,this):new b(e)}function w(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=o[e](t)).value instanceof b?Promise.resolve(n.value.v).then(u,l):c(i[0][2],n)}catch(e){c(i[0][3],e)}var n}function u(e){s("next",e)}function l(e){s("throw",e)}function c(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}}function _(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:b(e[r](t)),done:"return"===r}:o?o(t):t}:o}}function x(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=h(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}function E(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var k=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function S(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&d(t,e,n);return k(t,e),t}function C(e){return e&&e.__esModule?e:{default:e}}function P(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}function O(e,t,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(e,n):o?o.value=n:t.set(e,n),n}},4839:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=1/60*1e3,r="undefined"!=typeof performance?()=>performance.now():()=>Date.now(),o="undefined"!=typeof window?e=>window.requestAnimationFrame(e):e=>setTimeout((()=>e(r())),n);let i=!0,a=!1,s=!1;const u={delta:0,timestamp:0},l=["read","update","preRender","render","postRender"],c=l.reduce(((e,t)=>(e[t]=function(e){let t=[],n=[],r=0,o=!1,i=!1;const a=new WeakSet,s={schedule:(e,i=!1,s=!1)=>{const u=s&&o,l=u?t:n;return i&&a.add(e),-1===l.indexOf(e)&&(l.push(e),u&&o&&(r=t.length)),e},cancel:e=>{const t=n.indexOf(e);-1!==t&&n.splice(t,1),a.delete(e)},process:u=>{if(o)i=!0;else{if(o=!0,[t,n]=[n,t],n.length=0,r=t.length,r)for(let n=0;n<r;n++){const r=t[n];r(u),a.has(r)&&(s.schedule(r),e())}o=!1,i&&(i=!1,s.process(u))}}};return s}((()=>a=!0)),e)),{}),f=l.reduce(((e,t)=>{const n=c[t];return e[t]=(e,t=!1,r=!1)=>(a||v(),n.schedule(e,t,r)),e}),{}),d=l.reduce(((e,t)=>(e[t]=c[t].cancel,e)),{}),p=l.reduce(((e,t)=>(e[t]=()=>c[t].process(u),e)),{}),h=e=>c[e].process(u),m=e=>{a=!1,u.delta=i?n:Math.max(Math.min(e-u.timestamp,40),1),u.timestamp=e,s=!0,l.forEach(h),s=!1,a&&(i=!1,o(m))},v=()=>{a=!0,i=!0,s||o(m)};t.cancelSync=d,t.default=f,t.flushSync=p,t.getFrameData=()=>u},8058:e=>{try{e.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(t){e.exports=!1}},4394:(e,t,n)=>{"use strict";n.r(t),n.d(t,{invariant:()=>o,warning:()=>r});var r=function(){},o=function(){}},8679:(e,t,n)=>{"use strict";var r=n(9864),o={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},i={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function u(e){return r.isMemo(e)?a:s[e.$$typeof]||o}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},s[r.Memo]=a;var l=Object.defineProperty,c=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var o=p(n);o&&o!==h&&e(t,o,r)}var a=c(n);f&&(a=a.concat(f(n)));for(var s=u(t),m=u(n),v=0;v<a.length;++v){var y=a[v];if(!(i[y]||r&&r[y]||m&&m[y]||s&&s[y])){var g=d(n,y);try{l(t,y,g)}catch(e){}}}}return t}},3096:(e,t,n)=>{var r="Expected a function",o=/^\s+|\s+$/g,i=/^[-+]0x[0-9a-f]+$/i,a=/^0b[01]+$/i,s=/^0o[0-7]+$/i,u=parseInt,l="object"==typeof n.g&&n.g&&n.g.Object===Object&&n.g,c="object"==typeof self&&self&&self.Object===Object&&self,f=l||c||Function("return this")(),d=Object.prototype.toString,p=Math.max,h=Math.min,m=function(){return f.Date.now()};function v(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function y(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==d.call(e)}(e))return NaN;if(v(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=v(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(o,"");var n=a.test(e);return n||s.test(e)?u(e.slice(2),n?2:8):i.test(e)?NaN:+e}e.exports=function(e,t,n){var o=!0,i=!0;if("function"!=typeof e)throw new TypeError(r);return v(n)&&(o="leading"in n?!!n.leading:o,i="trailing"in n?!!n.trailing:i),function(e,t,n){var o,i,a,s,u,l,c=0,f=!1,d=!1,g=!0;if("function"!=typeof e)throw new TypeError(r);function b(t){var n=o,r=i;return o=i=void 0,c=t,s=e.apply(r,n)}function w(e){return c=e,u=setTimeout(x,t),f?b(e):s}function _(e){var n=e-l;return void 0===l||n>=t||n<0||d&&e-c>=a}function x(){var e=m();if(_(e))return E(e);u=setTimeout(x,function(e){var n=t-(e-l);return d?h(n,a-(e-c)):n}(e))}function E(e){return u=void 0,g&&o?b(e):(o=i=void 0,s)}function k(){var e=m(),n=_(e);if(o=arguments,i=this,l=e,n){if(void 0===u)return w(l);if(d)return u=setTimeout(x,t),b(l)}return void 0===u&&(u=setTimeout(x,t)),s}return t=y(t)||0,v(n)&&(f=!!n.leading,a=(d="maxWait"in n)?p(y(n.maxWait)||0,t):a,g="trailing"in n?!!n.trailing:g),k.cancel=function(){void 0!==u&&clearTimeout(u),c=0,o=l=i=u=void 0},k.flush=function(){return void 0===u?s:E(m())},k}(e,t,{leading:o,maxWait:t,trailing:i})}},7418:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;function o(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var a,s,u=o(e),l=1;l<arguments.length;l++){for(var c in a=Object(arguments[l]))n.call(a,c)&&(u[c]=a[c]);if(t){s=t(a);for(var f=0;f<s.length;f++)r.call(a,s[f])&&(u[s[f]]=a[s[f]])}}return u}},1830:(e,t)=>{t.encode=function(e){var t="";for(var n in e)e.hasOwnProperty(n)&&(t.length&&(t+="&"),t+=encodeURIComponent(n)+"="+encodeURIComponent(e[n]));return t},t.decode=function(e){for(var t={},n=e.split("&"),r=0,o=n.length;r<o;r++){var i=n[r].split("=");t[decodeURIComponent(i[0])]=decodeURIComponent(i[1])}return t}},4187:e=>{var t=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];e.exports=function(e){var r,o,i=e,a=e.indexOf("["),s=e.indexOf("]");-1!=a&&-1!=s&&(e=e.substring(0,a)+e.substring(a,s).replace(/:/g,";")+e.substring(s,e.length));for(var u,l,c=t.exec(e||""),f={},d=14;d--;)f[n[d]]=c[d]||"";return-1!=a&&-1!=s&&(f.source=i,f.host=f.host.substring(1,f.host.length-1).replace(/;/g,":"),f.authority=f.authority.replace("[","").replace("]","").replace(/;/g,":"),f.ipv6uri=!0),f.pathNames=(r=f.path,o=r.replace(/\/{2,9}/g,"/").split("/"),"/"!=r.substr(0,1)&&0!==r.length||o.splice(0,1),"/"==r.substr(r.length-1,1)&&o.splice(o.length-1,1),o),f.queryKey=(u=f.query,l={},u.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(e,t,n){t&&(l[t]=n)})),l),f}},9294:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2224),o=n(4394),i=n(3573),a=n(4839);function s(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var u=s(a);const l=(e,t,n)=>Math.min(Math.max(n,e),t);function c(e,t){return e*Math.sqrt(1-t*t)}const f=["duration","bounce"],d=["stiffness","damping","mass"];function p(e,t){return t.some((t=>void 0!==e[t]))}function h(e){var{from:t=0,to:n=1,restSpeed:i=2,restDelta:a}=e,s=r.__rest(e,["from","to","restSpeed","restDelta"]);const u={done:!1,value:t};let{stiffness:h,damping:v,mass:y,velocity:g,duration:b,isResolvedFromDuration:w}=function(e){let t=Object.assign({velocity:0,stiffness:100,damping:10,mass:1,isResolvedFromDuration:!1},e);if(!p(e,d)&&p(e,f)){const n=function({duration:e=800,bounce:t=.25,velocity:n=0,mass:r=1}){let i,a;o.warning(e<=1e4,"Spring duration must be 10 seconds or less");let s=1-t;s=l(.05,1,s),e=l(.01,10,e/1e3),s<1?(i=t=>{const r=t*s,o=r*e;return.001-(r-n)/c(t,s)*Math.exp(-o)},a=t=>{const r=t*s*e,o=r*n+n,a=Math.pow(s,2)*Math.pow(t,2)*e,u=Math.exp(-r),l=c(Math.pow(t,2),s);return(.001-i(t)>0?-1:1)*((o-a)*u)/l}):(i=t=>Math.exp(-t*e)*((t-n)*e+1)-.001,a=t=>Math.exp(-t*e)*(e*e*(n-t)));const u=function(e,t,n){let r=n;for(let n=1;n<12;n++)r-=e(r)/t(r);return r}(i,a,5/e);if(e*=1e3,isNaN(u))return{stiffness:100,damping:10,duration:e};{const t=Math.pow(u,2)*r;return{stiffness:t,damping:2*s*Math.sqrt(r*t),duration:e}}}(e);t=Object.assign(Object.assign(Object.assign({},t),n),{velocity:0,mass:1}),t.isResolvedFromDuration=!0}return t}(s),_=m,x=m;function E(){const e=g?-g/1e3:0,r=n-t,o=v/(2*Math.sqrt(h*y)),i=Math.sqrt(h/y)/1e3;if(void 0===a&&(a=Math.min(Math.abs(n-t)/100,.4)),o<1){const t=c(i,o);_=a=>{const s=Math.exp(-o*i*a);return n-s*((e+o*i*r)/t*Math.sin(t*a)+r*Math.cos(t*a))},x=n=>{const a=Math.exp(-o*i*n);return o*i*a*(Math.sin(t*n)*(e+o*i*r)/t+r*Math.cos(t*n))-a*(Math.cos(t*n)*(e+o*i*r)-t*r*Math.sin(t*n))}}else if(1===o)_=t=>n-Math.exp(-i*t)*(r+(e+i*r)*t);else{const t=i*Math.sqrt(o*o-1);_=a=>{const s=Math.exp(-o*i*a),u=Math.min(t*a,300);return n-s*((e+o*i*r)*Math.sinh(u)+t*r*Math.cosh(u))/t}}}return E(),{next:e=>{const t=_(e);if(w)u.done=e>=b;else{const r=1e3*x(e),o=Math.abs(r)<=i,s=Math.abs(n-t)<=a;u.done=o&&s}return u.value=u.done?n:t,u},flipTarget:()=>{g=-g,[t,n]=[n,t],E()}}}h.needsInterpolation=(e,t)=>"string"==typeof e||"string"==typeof t;const m=e=>0,v=(e,t,n)=>{const r=t-e;return 0===r?1:(n-e)/r},y=(e,t,n)=>-n*e+n*t+e;function g(e,t,n){return n<0&&(n+=1),n>1&&(n-=1),n<1/6?e+6*(t-e)*n:n<.5?t:n<2/3?e+(t-e)*(2/3-n)*6:e}function b({hue:e,saturation:t,lightness:n,alpha:r}){e/=360,n/=100;let o=0,i=0,a=0;if(t/=100){const r=n<.5?n*(1+t):n+t-n*t,s=2*n-r;o=g(s,r,e+1/3),i=g(s,r,e),a=g(s,r,e-1/3)}else o=i=a=n;return{red:Math.round(255*o),green:Math.round(255*i),blue:Math.round(255*a),alpha:r}}const w=(e,t,n)=>{const r=e*e,o=t*t;return Math.sqrt(Math.max(0,n*(o-r)+r))},_=[i.hex,i.rgba,i.hsla],x=e=>_.find((t=>t.test(e))),E=e=>`'${e}' is not an animatable color. Use the equivalent color code instead.`,k=(e,t)=>{let n=x(e),r=x(t);o.invariant(!!n,E(e)),o.invariant(!!r,E(t));let a=n.parse(e),s=r.parse(t);n===i.hsla&&(a=b(a),n=i.rgba),r===i.hsla&&(s=b(s),r=i.rgba);const u=Object.assign({},a);return e=>{for(const t in u)"alpha"!==t&&(u[t]=w(a[t],s[t],e));return u.alpha=y(a.alpha,s.alpha,e),n.transform(u)}},S={x:0,y:0,z:0},C=e=>"number"==typeof e,P=(e,t)=>n=>t(e(n)),O=(...e)=>e.reduce(P);function T(e,t){return C(e)?n=>y(e,t,n):i.color.test(e)?k(e,t):j(e,t)}const M=(e,t)=>{const n=[...e],r=n.length,o=e.map(((e,n)=>T(e,t[n])));return e=>{for(let t=0;t<r;t++)n[t]=o[t](e);return n}},A=(e,t)=>{const n=Object.assign(Object.assign({},e),t),r={};for(const o in n)void 0!==e[o]&&void 0!==t[o]&&(r[o]=T(e[o],t[o]));return e=>{for(const t in r)n[t]=r[t](e);return n}};function R(e){const t=i.complex.parse(e),n=t.length;let r=0,o=0,a=0;for(let e=0;e<n;e++)r||"number"==typeof t[e]?r++:void 0!==t[e].hue?a++:o++;return{parsed:t,numNumbers:r,numRGB:o,numHSL:a}}const j=(e,t)=>{const n=i.complex.createTransformer(t),r=R(e),a=R(t);return r.numHSL===a.numHSL&&r.numRGB===a.numRGB&&r.numNumbers>=a.numNumbers?O(M(r.parsed,a.parsed),n):(o.warning(!0,`Complex values '${e}' and '${t}' too different to mix. Ensure all colors are of the same type, and that each contains the same quantity of number and color values. Falling back to instant transition.`),n=>`${n>0?t:e}`)},N=(e,t)=>n=>y(e,t,n);function L(e,t,{clamp:n=!0,ease:r,mixer:a}={}){const s=e.length;o.invariant(s===t.length,"Both input and output ranges must be the same length"),o.invariant(!r||!Array.isArray(r)||r.length===s-1,"Array of easing functions must be of length `input.length - 1`, as it applies to the transitions **between** the defined values."),e[0]>e[s-1]&&(e=[].concat(e),t=[].concat(t),e.reverse(),t.reverse());const u=function(e,t,n){const r=[],o=n||("number"==typeof(a=e[0])?N:"string"==typeof a?i.color.test(a)?k:j:Array.isArray(a)?M:"object"==typeof a?A:void 0);var a;const s=e.length-1;for(let n=0;n<s;n++){let i=o(e[n],e[n+1]);if(t){const e=Array.isArray(t)?t[n]:t;i=O(e,i)}r.push(i)}return r}(t,r,a),c=2===s?function([e,t],[n]){return r=>n(v(e,t,r))}(e,u):function(e,t){const n=e.length,r=n-1;return o=>{let i=0,a=!1;if(o<=e[0]?a=!0:o>=e[r]&&(i=r-1,a=!0),!a){let t=1;for(;t<n&&!(e[t]>o||t===r);t++);i=t-1}const s=v(e[i],e[i+1],o);return t[i](s)}}(e,u);return n?t=>c(l(e[0],e[s-1],t)):c}const F=e=>t=>1-e(1-t),I=e=>t=>t<=.5?e(2*t)/2:(2-e(2*(1-t)))/2,D=e=>t=>Math.pow(t,e),V=e=>t=>t*t*((e+1)*t-e),B=e=>{const t=V(e);return e=>(e*=2)<1?.5*t(e):.5*(2-Math.pow(2,-10*(e-1)))},z=e=>e,U=D(2),H=F(U),W=I(U),q=e=>1-Math.sin(Math.acos(e)),$=F(q),Y=I($),X=V(1.525),K=F(X),Q=I(X),G=B(1.525),Z=e=>{if(1===e||0===e)return e;const t=e*e;return e<.36363636363636365?7.5625*t:e<.7272727272727273?9.075*t-9.9*e+3.4:e<.9?12.066481994459833*t-19.63545706371191*e+8.898060941828255:10.8*e*e-20.52*e+10.72},J=F(Z);function ee(e,t){return e.map((()=>t||W)).splice(0,e.length-1)}function te({from:e=0,to:t=1,ease:n,offset:r,duration:o=300}){const i={done:!1,value:e},a=Array.isArray(t)?t:[e,t],s=function(e,t){return e.map((e=>e*t))}(r&&r.length===a.length?r:function(e){const t=e.length;return e.map(((e,n)=>0!==n?n/(t-1):0))}(a),o);function u(){return L(s,a,{ease:Array.isArray(n)?n:ee(a,n)})}let l=u();return{next:e=>(i.value=l(e),i.done=e>=o,i),flipTarget:()=>{a.reverse(),l=u()}}}function ne({velocity:e=0,from:t=0,power:n=.8,timeConstant:r=350,restDelta:o=.5,modifyTarget:i}){const a={done:!1,value:t};let s=n*e;const u=t+s,l=void 0===i?u:i(u);return l!==u&&(s=l-t),{next:e=>{const t=-s*Math.exp(-e/r);return a.done=!(t>o||t<-o),a.value=a.done?l:l+t,a},flipTarget:()=>{}}}const re={keyframes:te,spring:h,decay:ne};function oe(e,t,n=0){return e-t-n}const ie=e=>{const t=({delta:t})=>e(t);return{start:()=>u.default.update(t,!0),stop:()=>a.cancelSync.update(t)}};function ae(e){var t,n,{from:o,autoplay:i=!0,driver:a=ie,elapsed:s=0,repeat:u=0,repeatType:l="loop",repeatDelay:c=0,onPlay:f,onStop:d,onComplete:p,onRepeat:m,onUpdate:v}=e,y=r.__rest(e,["from","autoplay","driver","elapsed","repeat","repeatType","repeatDelay","onPlay","onStop","onComplete","onRepeat","onUpdate"]);let g,b,w,{to:_}=y,x=0,E=y.duration,k=!1,S=!0;const C=function(e){if(Array.isArray(e.to))return te;if(re[e.type])return re[e.type];const t=new Set(Object.keys(e));return t.has("ease")||t.has("duration")&&!t.has("dampingRatio")?te:t.has("dampingRatio")||t.has("stiffness")||t.has("mass")||t.has("damping")||t.has("restSpeed")||t.has("restDelta")?h:te}(y);(null===(n=(t=C).needsInterpolation)||void 0===n?void 0:n.call(t,o,_))&&(w=L([0,100],[o,_],{clamp:!1}),o=0,_=100);const P=C(Object.assign(Object.assign({},y),{from:o,to:_}));return i&&(null==f||f(),g=a((function(e){if(S||(e=-e),s+=e,!k){const e=P.next(Math.max(0,s));b=e.value,w&&(b=w(b)),k=S?e.done:s<=0}null==v||v(b),k&&(0===x&&(null!=E||(E=s)),x<u?function(e,t,n,r){return r?e>=t+n:e<=-n}(s,E,c,S)&&(x++,"reverse"===l?(S=x%2==0,s=function(e,t,n=0,r=!0){return r?oe(t+-e,t,n):t-(e-t)+n}(s,E,c,S)):(s=oe(s,E,c),"mirror"===l&&P.flipTarget()),k=!1,m&&m()):(g.stop(),p&&p()))})),g.start()),{stop:()=>{null==d||d(),g.stop()}}}function se(e,t){return t?e*(1e3/t):0}const ue=e=>180*e/Math.PI,le=e=>e,ce=(e=le)=>(t,n,r)=>{const o=n-r,i=-(0-t+1)*(0-e(Math.abs(o)));return o<=0?n+i:n-i},fe=ce(),de=ce(Math.sqrt),pe=e=>e*Math.PI/180,he=e=>e.hasOwnProperty("x")&&e.hasOwnProperty("y"),me=e=>he(e)&&e.hasOwnProperty("z"),ve=(e,t)=>Math.abs(e-t),ye=(e,t=2)=>(t=Math.pow(10,t),Math.round(e*t)/t),ge=(e,t,n,r=0)=>ye(e+n*(t-e)/Math.max(r,n)),be=(e,t)=>1-3*t+3*e,we=(e,t)=>3*t-6*e,_e=e=>3*e,xe=(e,t,n)=>((be(t,n)*e+we(t,n))*e+_e(t))*e,Ee=(e,t,n)=>3*be(t,n)*e*e+2*we(t,n)*e+_e(t),ke=.1;t.angle=(e,t=S)=>ue(Math.atan2(t.y-e.y,t.x-e.x)),t.animate=ae,t.anticipate=G,t.applyOffset=(e,t)=>{let n=!0;return void 0===t&&(t=e,n=!1),r=>n?r-e+t:(e=r,n=!0,t)},t.attract=fe,t.attractExpo=de,t.backIn=X,t.backInOut=Q,t.backOut=K,t.bounceIn=J,t.bounceInOut=e=>e<.5?.5*(1-Z(1-2*e)):.5*Z(2*e-1)+.5,t.bounceOut=Z,t.circIn=q,t.circInOut=Y,t.circOut=$,t.clamp=l,t.createAnticipate=B,t.createAttractor=ce,t.createBackIn=V,t.createExpoIn=D,t.cubicBezier=function(e,t,n,r){if(e===t&&n===r)return z;const o=new Float32Array(11);for(let t=0;t<11;++t)o[t]=xe(t*ke,e,n);return i=>0===i||1===i?i:xe(function(t){let r=0,i=1;for(;10!==i&&o[i]<=t;++i)r+=ke;--i;const a=r+(t-o[i])/(o[i+1]-o[i])*ke,s=Ee(a,e,n);return s>=.001?function(e,t,n,r){for(let o=0;o<8;++o){const o=Ee(t,n,r);if(0===o)return t;t-=(xe(t,n,r)-e)/o}return t}(t,a,e,n):0===s?a:function(e,t,n,r,o){let i,a,s=0;do{a=t+(n-t)/2,i=xe(a,r,o)-e,i>0?n=a:t=a}while(Math.abs(i)>1e-7&&++s<10);return a}(t,r,r+ke,e,n)}(i),t,r)},t.decay=ne,t.degreesToRadians=pe,t.distance=function(e,t){if(C(e)&&C(t))return ve(e,t);if(he(e)&&he(t)){const n=ve(e.x,t.x),r=ve(e.y,t.y),o=me(e)&&me(t)?ve(e.z,t.z):0;return Math.sqrt(Math.pow(n,2)+Math.pow(r,2)+Math.pow(o,2))}},t.easeIn=U,t.easeInOut=W,t.easeOut=H,t.inertia=function({from:e=0,velocity:t=0,min:n,max:r,power:o=.8,timeConstant:i=750,bounceStiffness:s=500,bounceDamping:u=10,restDelta:l=1,modifyTarget:c,driver:f,onUpdate:d,onComplete:p,onStop:h}){let m;function v(e){return void 0!==n&&e<n||void 0!==r&&e>r}function y(e){return void 0===n?r:void 0===r||Math.abs(n-e)<Math.abs(r-e)?n:r}function g(e){null==m||m.stop(),m=ae(Object.assign(Object.assign({},e),{driver:f,onUpdate:t=>{var n;null==d||d(t),null===(n=e.onUpdate)||void 0===n||n.call(e,t)},onComplete:p,onStop:h}))}function b(e){g(Object.assign({type:"spring",stiffness:s,damping:u,restDelta:l},e))}if(v(e))b({from:e,velocity:t,to:y(e)});else{let r=o*t+e;void 0!==c&&(r=c(r));const s=y(r),u=s===n?-1:1;let f,d;const p=e=>{f=d,d=e,t=se(e-f,a.getFrameData().delta),(1===u&&e>s||-1===u&&e<s)&&b({from:e,to:s,velocity:t})};g({type:"decay",from:e,velocity:t,timeConstant:i,power:o,restDelta:l,modifyTarget:c,onUpdate:v(r)?p:void 0})}return{stop:()=>null==m?void 0:m.stop()}},t.interpolate=L,t.isPoint=he,t.isPoint3D=me,t.keyframes=te,t.linear=z,t.mirrorEasing=I,t.mix=y,t.mixColor=k,t.mixComplex=j,t.pipe=O,t.pointFromVector=(e,t,n)=>(t=pe(t),{x:n*Math.cos(t)+e.x,y:n*Math.sin(t)+e.y}),t.progress=v,t.radiansToDegrees=ue,t.reverseEasing=F,t.smooth=(e=50)=>{let t=0,n=0;return r=>{const o=a.getFrameData().timestamp,i=o!==n?o-n:0,s=i?ge(t,r,i,e):t;return n=o,t=s,s}},t.smoothFrame=ge,t.snap=e=>{if("number"==typeof e)return t=>Math.round(t/e)*e;{let t=0;const n=e.length;return r=>{let o=Math.abs(e[0]-r);for(t=1;t<n;t++){const i=e[t],a=Math.abs(i-r);if(0===a)return i;if(a>o)return e[t-1];if(t===n-1)return i;o=a}}}},t.spring=h,t.steps=(e,t="end")=>n=>{const r=(n="end"===t?Math.min(n,.999):Math.max(n,.001))*e,o="end"===t?Math.floor(r):Math.ceil(r);return l(0,1,o/e)},t.toDecimal=ye,t.velocityPerFrame=function(e,t){return e/(1e3/t)},t.velocityPerSecond=se,t.wrap=(e,t,n)=>{const r=t-e;return((n-e)%r+r)%r+e}},2224:(e,t,n)=>{"use strict";n.r(t),n.d(t,{__extends:()=>o,__assign:()=>i,__rest:()=>a,__decorate:()=>s,__param:()=>u,__metadata:()=>l,__awaiter:()=>c,__generator:()=>f,__createBinding:()=>d,__exportStar:()=>p,__values:()=>h,__read:()=>m,__spread:()=>v,__spreadArrays:()=>y,__spreadArray:()=>g,__await:()=>b,__asyncGenerator:()=>w,__asyncDelegator:()=>_,__asyncValues:()=>x,__makeTemplateObject:()=>E,__importStar:()=>S,__importDefault:()=>C,__classPrivateFieldGet:()=>P,__classPrivateFieldSet:()=>O});var r=function(e,t){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&(e[n]=t[n])},r(e,t)};function o(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Class extends value "+String(t)+" is not a constructor or null");function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var i=function(){return i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},i.apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var o=0;for(r=Object.getOwnPropertySymbols(e);o<r.length;o++)t.indexOf(r[o])<0&&Object.prototype.propertyIsEnumerable.call(e,r[o])&&(n[r[o]]=e[r[o]])}return n}function s(e,t,n,r){var o,i=arguments.length,a=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(o=e[s])&&(a=(i<3?o(a):i>3?o(t,n,a):o(t,n))||a);return i>3&&a&&Object.defineProperty(t,n,a),a}function u(e,t){return function(n,r){t(n,r,e)}}function l(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function c(e,t,n,r){return new(n||(n=Promise))((function(o,i){function a(e){try{u(r.next(e))}catch(e){i(e)}}function s(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!((o=(o=a.trys).length>0&&o[o.length-1])||6!==i[0]&&2!==i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}}var d=Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]};function p(e,t){for(var n in e)"default"===n||Object.prototype.hasOwnProperty.call(t,n)||d(t,e,n)}function h(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}function m(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(m(arguments[t]));return e}function y(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),o=0;for(t=0;t<n;t++)for(var i=arguments[t],a=0,s=i.length;a<s;a++,o++)r[o]=i[a];return r}function g(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))}function b(e){return this instanceof b?(this.v=e,this):new b(e)}function w(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,o=n.apply(e,t||[]),i=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){o[e]&&(r[e]=function(t){return new Promise((function(n,r){i.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=o[e](t)).value instanceof b?Promise.resolve(n.value.v).then(u,l):c(i[0][2],n)}catch(e){c(i[0][3],e)}var n}function u(e){s("next",e)}function l(e){s("throw",e)}function c(e,t){e(t),i.shift(),i.length&&s(i[0][0],i[0][1])}}function _(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,o){t[r]=e[r]?function(t){return(n=!n)?{value:b(e[r](t)),done:"return"===r}:o?o(t):t}:o}}function x(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=h(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,o){!function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)}(r,o,(t=e[n](t)).done,t.value)}))}}}function E(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}var k=Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t};function S(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&d(t,e,n);return k(t,e),t}function C(e){return e&&e.__esModule?e:{default:e}}function P(e,t,n,r){if("a"===n&&!r)throw new TypeError("Private accessor was defined without a getter");if("function"==typeof t?e!==t||!r:!t.has(e))throw new TypeError("Cannot read private member from an object whose class did not declare it");return"m"===n?r:"a"===n?r.call(e):r?r.value:t.get(e)}function O(e,t,n,r,o){if("m"===r)throw new TypeError("Private method is not writable");if("a"===r&&!o)throw new TypeError("Private accessor was defined without a setter");if("function"==typeof t?e!==t||!o:!t.has(e))throw new TypeError("Cannot write private member to an object whose class did not declare it");return"a"===r?o.call(e,n):o?o.value=n:t.set(e,n),n}},2703:(e,t,n)=>{"use strict";var r=n(414);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,n,o,i,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bigint:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return n.PropTypes=n,n}},5697:(e,t,n)=>{e.exports=n(2703)()},414:e=>{"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},4448:(e,t,n)=>{"use strict";var r=n(7294),o=n(7418),i=n(3840);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,u={};function l(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)s.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,p=Object.prototype.hasOwnProperty,h={},m={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function w(e,t,n,r){var o=y.hasOwnProperty(t)?y[t]:null;(null!==o?0===o.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,o,r)&&(n=null),r||null===o?function(e){return!!p.call(m,e)||!p.call(h,e)&&(d.test(e)?m[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):o.mustUseProperty?e[o.propertyName]=null===n?3!==o.type&&"":n:(t=o.attributeName,r=o.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(o=o.type)||4===o&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);y[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var _=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,x=60103,E=60106,k=60107,S=60108,C=60114,P=60109,O=60110,T=60112,M=60113,A=60120,R=60115,j=60116,N=60121,L=60128,F=60129,I=60130,D=60131;if("function"==typeof Symbol&&Symbol.for){var V=Symbol.for;x=V("react.element"),E=V("react.portal"),k=V("react.fragment"),S=V("react.strict_mode"),C=V("react.profiler"),P=V("react.provider"),O=V("react.context"),T=V("react.forward_ref"),M=V("react.suspense"),A=V("react.suspense_list"),R=V("react.memo"),j=V("react.lazy"),N=V("react.block"),V("react.scope"),L=V("react.opaque.id"),F=V("react.debug_trace_mode"),I=V("react.offscreen"),D=V("react.legacy_hidden")}var B,z="function"==typeof Symbol&&Symbol.iterator;function U(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=z&&e[z]||e["@@iterator"])?e:null}function H(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var W=!1;function q(e,t){if(!e||W)return"";W=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var o=e.stack.split("\n"),i=r.stack.split("\n"),a=o.length-1,s=i.length-1;1<=a&&0<=s&&o[a]!==i[s];)s--;for(;1<=a&&0<=s;a--,s--)if(o[a]!==i[s]){if(1!==a||1!==s)do{if(a--,0>--s||o[a]!==i[s])return"\n"+o[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{W=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?H(e):""}function $(e){switch(e.tag){case 5:return H(e.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return q(e.type,!1);case 11:return q(e.type.render,!1);case 22:return q(e.type._render,!1);case 1:return q(e.type,!0);default:return""}}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case k:return"Fragment";case E:return"Portal";case C:return"Profiler";case S:return"StrictMode";case M:return"Suspense";case A:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case O:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case T:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case R:return Y(e.type);case N:return Y(e._render);case j:t=e._payload,e=e._init;try{return Y(e(t))}catch(e){}}return null}function X(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function K(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Q(e){e._valueTracker||(e._valueTracker=function(e){var t=K(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=K(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Z(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function J(e,t){var n=t.checked;return o({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=X(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&w(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=X(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&oe(e,t.type,X(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function oe(e,t,n){"number"===t&&Z(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=o({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+X(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return o({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:X(n)}}function le(e,t){var n=X(t.value),r=X(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ce(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var fe="http://www.w3.org/1999/xhtml";function de(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function pe(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?de(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var he,me,ve=(me=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((he=he||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=he.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return me(e,t)}))}:me);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},be=["Webkit","ms","Moz","O"];function we(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function _e(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=we(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(ge).forEach((function(e){be.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var xe=o({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Ee(e,t){if(t){if(xe[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function ke(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Ce=null,Pe=null,Oe=null;function Te(e){if(e=no(e)){if("function"!=typeof Ce)throw Error(a(280));var t=e.stateNode;t&&(t=oo(t),Ce(e.stateNode,e.type,t))}}function Me(e){Pe?Oe?Oe.push(e):Oe=[e]:Pe=e}function Ae(){if(Pe){var e=Pe,t=Oe;if(Oe=Pe=null,Te(e),t)for(e=0;e<t.length;e++)Te(t[e])}}function Re(e,t){return e(t)}function je(e,t,n,r,o){return e(t,n,r,o)}function Ne(){}var Le=Re,Fe=!1,Ie=!1;function De(){null===Pe&&null===Oe||(Ne(),Ae())}function Ve(e,t){var n=e.stateNode;if(null===n)return null;var r=oo(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Be=!1;if(f)try{var ze={};Object.defineProperty(ze,"passive",{get:function(){Be=!0}}),window.addEventListener("test",ze,ze),window.removeEventListener("test",ze,ze)}catch(me){Be=!1}function Ue(e,t,n,r,o,i,a,s,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var He=!1,We=null,qe=!1,$e=null,Ye={onError:function(e){He=!0,We=e}};function Xe(e,t,n,r,o,i,a,s,u){He=!1,We=null,Ue.apply(Ye,arguments)}function Ke(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Qe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ge(e){if(Ke(e)!==e)throw Error(a(188))}function Ze(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ke(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return Ge(o),e;if(i===r)return Ge(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var s=!1,u=o.child;u;){if(u===n){s=!0,n=o,r=i;break}if(u===r){s=!0,r=o,n=i;break}u=u.sibling}if(!s){for(u=i.child;u;){if(u===n){s=!0,n=i,r=o;break}if(u===r){s=!0,r=i,n=o;break}u=u.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Je(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,ot=!1,it=[],at=null,st=null,ut=null,lt=new Map,ct=new Map,ft=[],dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function pt(e,t,n,r,o){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:o,targetContainers:[r]}}function ht(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":ut=null;break;case"pointerover":case"pointerout":lt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ct.delete(t.pointerId)}}function mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e=pt(t,n,r,o,i),null!==t&&null!==(t=no(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function vt(e){var t=to(e.target);if(null!==t){var n=Ke(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Qe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function yt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=no(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function gt(e,t,n){yt(e)&&n.delete(t)}function bt(){for(ot=!1;0<it.length;){var e=it[0];if(null!==e.blockedOn){null!==(e=no(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Zt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&it.shift()}null!==at&&yt(at)&&(at=null),null!==st&&yt(st)&&(st=null),null!==ut&&yt(ut)&&(ut=null),lt.forEach(gt),ct.forEach(gt)}function wt(e,t){e.blockedOn===t&&(e.blockedOn=null,ot||(ot=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,bt)))}function _t(e){function t(t){return wt(t,e)}if(0<it.length){wt(it[0],e);for(var n=1;n<it.length;n++){var r=it[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&wt(at,e),null!==st&&wt(st,e),null!==ut&&wt(ut,e),lt.forEach(t),ct.forEach(t),n=0;n<ft.length;n++)(r=ft[n]).blockedOn===e&&(r.blockedOn=null);for(;0<ft.length&&null===(n=ft[0]).blockedOn;)vt(n),null===n.blockedOn&&ft.shift()}function xt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Et={animationend:xt("Animation","AnimationEnd"),animationiteration:xt("Animation","AnimationIteration"),animationstart:xt("Animation","AnimationStart"),transitionend:xt("Transition","TransitionEnd")},kt={},St={};function Ct(e){if(kt[e])return kt[e];if(!Et[e])return e;var t,n=Et[e];for(t in n)if(n.hasOwnProperty(t)&&t in St)return kt[e]=n[t];return e}f&&(St=document.createElement("div").style,"AnimationEvent"in window||(delete Et.animationend.animation,delete Et.animationiteration.animation,delete Et.animationstart.animation),"TransitionEvent"in window||delete Et.transitionend.transition);var Pt=Ct("animationend"),Ot=Ct("animationiteration"),Tt=Ct("animationstart"),Mt=Ct("transitionend"),At=new Map,Rt=new Map,jt=["abort","abort",Pt,"animationEnd",Ot,"animationIteration",Tt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Mt,"transitionEnd","waiting","waiting"];function Nt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],o=e[n+1];o="on"+(o[0].toUpperCase()+o.slice(1)),Rt.set(r,t),At.set(r,o),l(o,[r])}}(0,i.unstable_now)();var Lt=8;function Ft(e){if(0!=(1&e))return Lt=15,1;if(0!=(2&e))return Lt=14,2;if(0!=(4&e))return Lt=13,4;var t=24&e;return 0!==t?(Lt=12,t):0!=(32&e)?(Lt=11,32):0!=(t=192&e)?(Lt=10,t):0!=(256&e)?(Lt=9,256):0!=(t=3584&e)?(Lt=8,t):0!=(4096&e)?(Lt=7,4096):0!=(t=4186112&e)?(Lt=6,t):0!=(t=62914560&e)?(Lt=5,t):67108864&e?(Lt=4,67108864):0!=(134217728&e)?(Lt=3,134217728):0!=(t=805306368&e)?(Lt=2,t):0!=(1073741824&e)?(Lt=1,1073741824):(Lt=8,e)}function It(e,t){var n=e.pendingLanes;if(0===n)return Lt=0;var r=0,o=0,i=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==i)r=i,o=Lt=15;else if(0!=(i=134217727&n)){var u=i&~a;0!==u?(r=Ft(u),o=Lt):0!=(s&=i)&&(r=Ft(s),o=Lt)}else 0!=(i=n&~a)?(r=Ft(i),o=Lt):0!==s&&(r=Ft(s),o=Lt);if(0===r)return 0;if(r=n&((0>(r=31-Ht(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&0==(t&a)){if(Ft(t),o<=Lt)return t;Lt=o}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-Ht(t)),r|=e[n],t&=~o;return r}function Dt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Vt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?Vt(10,t):e;case 10:return 0===(e=Bt(192&~t))?Vt(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&0===(e=Bt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Bt(e){return e&-e}function zt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Ut(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ht(t)]=n}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Wt(e)/qt|0)|0},Wt=Math.log,qt=Math.LN2,$t=i.unstable_UserBlockingPriority,Yt=i.unstable_runWithPriority,Xt=!0;function Kt(e,t,n,r){Fe||Ne();var o=Gt,i=Fe;Fe=!0;try{je(o,e,t,n,r)}finally{(Fe=i)||De()}}function Qt(e,t,n,r){Yt($t,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var o;if(Xt)if((o=0==(4&t))&&0<it.length&&-1<dt.indexOf(e))e=pt(null,e,t,n,r),it.push(e);else{var i=Zt(e,t,n,r);if(null===i)o&&ht(e,r);else{if(o){if(-1<dt.indexOf(e))return e=pt(i,e,t,n,r),void it.push(e);if(function(e,t,n,r,o){switch(t){case"focusin":return at=mt(at,e,t,n,r,o),!0;case"dragenter":return st=mt(st,e,t,n,r,o),!0;case"mouseover":return ut=mt(ut,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return lt.set(i,mt(lt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,ct.set(i,mt(ct.get(i)||null,e,t,n,r,o)),!0}return!1}(i,e,t,n,r))return;ht(e,r)}Nr(e,t,r,null,n)}}}function Zt(e,t,n,r){var o=Se(r);if(null!==(o=to(o))){var i=Ke(o);if(null===i)o=null;else{var a=i.tag;if(13===a){if(null!==(o=Qe(i)))return o;o=null}else if(3===a){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;o=null}else i!==o&&(o=null)}}return Nr(e,t,r,o,n),null}var Jt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,o="value"in Jt?Jt.value:Jt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return tn=o.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?on:an,this.isPropagationStopped=an,this}return o(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var un,ln,cn,fn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},dn=sn(fn),pn=o({},fn,{view:0,detail:0}),hn=sn(pn),mn=o({},pn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==cn&&(cn&&"mousemove"===e.type?(un=e.screenX-cn.screenX,ln=e.screenY-cn.screenY):ln=un=0,cn=e),un)},movementY:function(e){return"movementY"in e?e.movementY:ln}}),vn=sn(mn),yn=sn(o({},mn,{dataTransfer:0})),gn=sn(o({},pn,{relatedTarget:0})),bn=sn(o({},fn,{animationName:0,elapsedTime:0,pseudoElement:0})),wn=o({},fn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),_n=sn(wn),xn=sn(o({},fn,{data:0})),En={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Cn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function Pn(){return Cn}var On=o({},pn,{key:function(e){if(e.key){var t=En[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Tn=sn(On),Mn=sn(o({},mn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),An=sn(o({},pn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),Rn=sn(o({},fn,{propertyName:0,elapsedTime:0,pseudoElement:0})),jn=o({},mn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Nn=sn(jn),Ln=[9,13,27,32],Fn=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Dn=f&&"TextEvent"in window&&!In,Vn=f&&(!Fn||In&&8<In&&11>=In),Bn=String.fromCharCode(32),zn=!1;function Un(e,t){switch(e){case"keyup":return-1!==Ln.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,qn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function $n(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!qn[e.type]:"textarea"===t}function Yn(e,t,n,r){Me(r),0<(t=Fr(t,"onChange")).length&&(n=new dn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Xn=null,Kn=null;function Qn(e){Or(e,0)}function Gn(e){if(G(ro(e)))return e}function Zn(e,t){if("change"===e)return t}var Jn=!1;if(f){var er;if(f){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Jn=er&&(!document.documentMode||9<document.documentMode)}function rr(){Xn&&(Xn.detachEvent("onpropertychange",or),Kn=Xn=null)}function or(e){if("value"===e.propertyName&&Gn(Kn)){var t=[];if(Yn(t,Kn,e,Se(e)),e=Qn,Fe)e(t);else{Fe=!0;try{Re(e,t)}finally{Fe=!1,De()}}}}function ir(e,t,n){"focusin"===e?(rr(),Kn=n,(Xn=t).attachEvent("onpropertychange",or)):"focusout"===e&&rr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Kn)}function sr(e,t){if("click"===e)return Gn(t)}function ur(e,t){if("input"===e||"change"===e)return Gn(t)}var lr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},cr=Object.prototype.hasOwnProperty;function fr(e,t){if(lr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!cr.call(t,n[r])||!lr(e[n[r]],t[n[r]]))return!1;return!0}function dr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function pr(e,t){var n,r=dr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=dr(r)}}function hr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?hr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function mr(){for(var e=window,t=Z();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Z((e=t.contentWindow).document)}return t}function vr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var yr=f&&"documentMode"in document&&11>=document.documentMode,gr=null,br=null,wr=null,_r=!1;function xr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;_r||null==gr||gr!==Z(r)||(r="selectionStart"in(r=gr)&&vr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},wr&&fr(wr,r)||(wr=r,0<(r=Fr(br,"onSelect")).length&&(t=new dn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=gr)))}Nt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Nt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Nt(jt,2);for(var Er="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),kr=0;kr<Er.length;kr++)Rt.set(Er[kr],0);c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Cr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function Pr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,s,u,l){if(Xe.apply(this,arguments),He){if(!He)throw Error(a(198));var c=We;He=!1,We=null,qe||(qe=!0,$e=c)}}(r,t,void 0,e),e.currentTarget=null}function Or(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],u=s.instance,l=s.currentTarget;if(s=s.listener,u!==i&&o.isPropagationStopped())break e;Pr(o,s,l),i=u}else for(a=0;a<r.length;a++){if(u=(s=r[a]).instance,l=s.currentTarget,s=s.listener,u!==i&&o.isPropagationStopped())break e;Pr(o,s,l),i=u}}}if(qe)throw e=$e,qe=!1,$e=null,e}function Tr(e,t){var n=io(t),r=e+"__bubble";n.has(r)||(jr(t,e,2,!1),n.add(r))}var Mr="_reactListening"+Math.random().toString(36).slice(2);function Ar(e){e[Mr]||(e[Mr]=!0,s.forEach((function(t){Cr.has(t)||Rr(t,!1,e,null),Rr(t,!0,e,null)})))}function Rr(e,t,n,r){var o=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&Cr.has(e)){if("scroll"!==e)return;o|=2,i=r}var a=io(i),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(o|=4),jr(i,e,o,t),a.add(s))}function jr(e,t,n,r){var o=Rt.get(t);switch(void 0===o?2:o){case 0:o=Kt;break;case 1:o=Qt;break;default:o=Gt}n=o.bind(null,t,n,e),o=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Nr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===o||8===s.nodeType&&s.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==s;){if(null===(a=to(s)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(Ie)return e();Ie=!0;try{Le(e,t,n)}finally{Ie=!1,De()}}((function(){var r=i,o=Se(n),a=[];e:{var s=At.get(e);if(void 0!==s){var u=dn,l=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":u=Tn;break;case"focusin":l="focus",u=gn;break;case"focusout":l="blur",u=gn;break;case"beforeblur":case"afterblur":u=gn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=vn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=yn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=An;break;case Pt:case Ot:case Tt:u=bn;break;case Mt:u=Rn;break;case"scroll":u=hn;break;case"wheel":u=Nn;break;case"copy":case"cut":case"paste":u=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Mn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==s?s+"Capture":null:s;c=[];for(var p,h=r;null!==h;){var m=(p=h).stateNode;if(5===p.tag&&null!==m&&(p=m,null!==d&&null!=(m=Ve(h,d))&&c.push(Lr(h,m,p))),f)break;h=h.return}0<c.length&&(s=new u(s,l,null,n,o),a.push({event:s,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||0!=(16&t)||!(l=n.relatedTarget||n.fromElement)||!to(l)&&!l[Jr])&&(u||s)&&(s=o.window===o?o:(s=o.ownerDocument)?s.defaultView||s.parentWindow:window,u?(u=r,null!==(l=(l=n.relatedTarget||n.toElement)?to(l):null)&&(l!==(f=Ke(l))||5!==l.tag&&6!==l.tag)&&(l=null)):(u=null,l=r),u!==l)){if(c=vn,m="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Mn,m="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?s:ro(u),p=null==l?s:ro(l),(s=new c(m,h+"leave",u,n,o)).target=f,s.relatedTarget=p,m=null,to(o)===r&&((c=new c(d,h+"enter",l,n,o)).target=p,c.relatedTarget=f,m=c),f=m,u&&l)e:{for(d=l,h=0,p=c=u;p;p=Ir(p))h++;for(p=0,m=d;m;m=Ir(m))p++;for(;0<h-p;)c=Ir(c),h--;for(;0<p-h;)d=Ir(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Ir(c),d=Ir(d)}c=null}else c=null;null!==u&&Dr(a,s,u,c,!1),null!==l&&null!==f&&Dr(a,f,l,c,!0)}if("select"===(u=(s=r?ro(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===u&&"file"===s.type)var v=Zn;else if($n(s))if(Jn)v=ur;else{v=ar;var y=ir}else(u=s.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(v=sr);switch(v&&(v=v(e,r))?Yn(a,v,n,o):(y&&y(e,s,r),"focusout"===e&&(y=s._wrapperState)&&y.controlled&&"number"===s.type&&oe(s,"number",s.value)),y=r?ro(r):window,e){case"focusin":($n(y)||"true"===y.contentEditable)&&(gr=y,br=r,wr=null);break;case"focusout":wr=br=gr=null;break;case"mousedown":_r=!0;break;case"contextmenu":case"mouseup":case"dragend":_r=!1,xr(a,n,o);break;case"selectionchange":if(yr)break;case"keydown":case"keyup":xr(a,n,o)}var g;if(Fn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Un(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Vn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(g=nn()):(en="value"in(Jt=o)?Jt.value:Jt.textContent,Wn=!0)),0<(y=Fr(r,b)).length&&(b=new xn(b,e,null,n,o),a.push({event:b,listeners:y}),(g||null!==(g=Hn(n)))&&(b.data=g))),(g=Dn?function(e,t){switch(e){case"compositionend":return Hn(t);case"keypress":return 32!==t.which?null:(zn=!0,Bn);case"textInput":return(e=t.data)===Bn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Fn&&Un(e,t)?(e=nn(),tn=en=Jt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Vn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Fr(r,"onBeforeInput")).length&&(o=new xn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g)}Or(a,t)}))}function Lr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Fr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Ve(e,n))&&r.unshift(Lr(e,i,o)),null!=(i=Ve(e,t))&&r.push(Lr(e,i,o))),e=e.return}return r}function Ir(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Dr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var s=n,u=s.alternate,l=s.stateNode;if(null!==u&&u===r)break;5===s.tag&&null!==l&&(s=l,o?null!=(u=Ve(n,i))&&a.unshift(Lr(n,u,s)):o||null!=(u=Ve(n,i))&&a.push(Lr(n,u,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Vr(){}var Br=null,zr=null;function Ur(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Hr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Wr="function"==typeof setTimeout?setTimeout:void 0,qr="function"==typeof clearTimeout?clearTimeout:void 0;function $r(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Yr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Xr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Kr=0,Qr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Qr,Zr="__reactProps$"+Qr,Jr="__reactContainer$"+Qr,eo="__reactEvents$"+Qr;function to(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Jr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Xr(e);null!==e;){if(n=e[Gr])return n;e=Xr(e)}return t}n=(e=n).parentNode}return null}function no(e){return!(e=e[Gr]||e[Jr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ro(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function oo(e){return e[Zr]||null}function io(e){var t=e[eo];return void 0===t&&(t=e[eo]=new Set),t}var ao=[],so=-1;function uo(e){return{current:e}}function lo(e){0>so||(e.current=ao[so],ao[so]=null,so--)}function co(e,t){so++,ao[so]=e.current,e.current=t}var fo={},po=uo(fo),ho=uo(!1),mo=fo;function vo(e,t){var n=e.type.contextTypes;if(!n)return fo;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function yo(e){return null!=e.childContextTypes}function go(){lo(ho),lo(po)}function bo(e,t,n){if(po.current!==fo)throw Error(a(168));co(po,t),co(ho,n)}function wo(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(a(108,Y(t)||"Unknown",i));return o({},n,r)}function _o(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||fo,mo=po.current,co(po,e),co(ho,ho.current),!0}function xo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=wo(e,t,mo),r.__reactInternalMemoizedMergedChildContext=e,lo(ho),lo(po),co(po,e)):lo(ho),co(ho,n)}var Eo=null,ko=null,So=i.unstable_runWithPriority,Co=i.unstable_scheduleCallback,Po=i.unstable_cancelCallback,Oo=i.unstable_shouldYield,To=i.unstable_requestPaint,Mo=i.unstable_now,Ao=i.unstable_getCurrentPriorityLevel,Ro=i.unstable_ImmediatePriority,jo=i.unstable_UserBlockingPriority,No=i.unstable_NormalPriority,Lo=i.unstable_LowPriority,Fo=i.unstable_IdlePriority,Io={},Do=void 0!==To?To:function(){},Vo=null,Bo=null,zo=!1,Uo=Mo(),Ho=1e4>Uo?Mo:function(){return Mo()-Uo};function Wo(){switch(Ao()){case Ro:return 99;case jo:return 98;case No:return 97;case Lo:return 96;case Fo:return 95;default:throw Error(a(332))}}function qo(e){switch(e){case 99:return Ro;case 98:return jo;case 97:return No;case 96:return Lo;case 95:return Fo;default:throw Error(a(332))}}function $o(e,t){return e=qo(e),So(e,t)}function Yo(e,t,n){return e=qo(e),Co(e,t,n)}function Xo(){if(null!==Bo){var e=Bo;Bo=null,Po(e)}Ko()}function Ko(){if(!zo&&null!==Vo){zo=!0;var e=0;try{var t=Vo;$o(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Vo=null}catch(t){throw null!==Vo&&(Vo=Vo.slice(e+1)),Co(Ro,Xo),t}finally{zo=!1}}}var Qo=_.ReactCurrentBatchConfig;function Go(e,t){if(e&&e.defaultProps){for(var n in t=o({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Zo=uo(null),Jo=null,ei=null,ti=null;function ni(){ti=ei=Jo=null}function ri(e){var t=Zo.current;lo(Zo),e.type._context._currentValue=t}function oi(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ii(e,t){Jo=e,ti=ei=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(Fa=!0),e.firstContext=null)}function ai(e,t){if(ti!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(ti=e,t=1073741823),t={context:e,observedBits:t,next:null},null===ei){if(null===Jo)throw Error(a(308));ei=t,Jo.dependencies={lanes:0,firstContext:t,responders:null}}else ei=ei.next=t;return e._currentValue}var si=!1;function ui(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function li(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ci(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function fi(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function di(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function pi(e,t,n,r){var i=e.updateQueue;si=!1;var a=i.firstBaseUpdate,s=i.lastBaseUpdate,u=i.shared.pending;if(null!==u){i.shared.pending=null;var l=u,c=l.next;l.next=null,null===s?a=c:s.next=c,s=l;var f=e.alternate;if(null!==f){var d=(f=f.updateQueue).lastBaseUpdate;d!==s&&(null===d?f.firstBaseUpdate=c:d.next=c,f.lastBaseUpdate=l)}}if(null!==a){for(d=i.baseState,s=0,f=c=l=null;;){u=a.lane;var p=a.eventTime;if((r&u)===u){null!==f&&(f=f.next={eventTime:p,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var h=e,m=a;switch(u=t,p=n,m.tag){case 1:if("function"==typeof(h=m.payload)){d=h.call(p,d,u);break e}d=h;break e;case 3:h.flags=-4097&h.flags|64;case 0:if(null==(u="function"==typeof(h=m.payload)?h.call(p,d,u):h))break e;d=o({},d,u);break e;case 2:si=!0}}null!==a.callback&&(e.flags|=32,null===(u=i.effects)?i.effects=[a]:u.push(a))}else p={eventTime:p,lane:u,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===f?(c=f=p,l=d):f=f.next=p,s|=u;if(null===(a=a.next)){if(null===(u=i.shared.pending))break;a=u.next,u.next=null,i.lastBaseUpdate=u,i.shared.pending=null}}null===f&&(l=d),i.baseState=l,i.firstBaseUpdate=c,i.lastBaseUpdate=f,Ds|=s,e.lanes=s,e.memoizedState=d}}function hi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var mi=(new r.Component).refs;function vi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:o({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var yi={isMounted:function(e){return!!(e=e._reactInternals)&&Ke(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=lu(),o=cu(e),i=ci(r,o);i.payload=t,null!=n&&(i.callback=n),fi(e,i),fu(e,o,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=lu(),o=cu(e),i=ci(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),fi(e,i),fu(e,o,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=lu(),r=cu(e),o=ci(n,r);o.tag=2,null!=t&&(o.callback=t),fi(e,o),fu(e,r,n)}};function gi(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&fr(n,r)&&fr(o,i))}function bi(e,t,n){var r=!1,o=fo,i=t.contextType;return"object"==typeof i&&null!==i?i=ai(i):(o=yo(t)?mo:po.current,i=(r=null!=(r=t.contextTypes))?vo(e,o):fo),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=yi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=o,e.__reactInternalMemoizedMaskedChildContext=i),t}function wi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&yi.enqueueReplaceState(t,t.state,null)}function _i(e,t,n,r){var o=e.stateNode;o.props=n,o.state=e.memoizedState,o.refs=mi,ui(e);var i=t.contextType;"object"==typeof i&&null!==i?o.context=ai(i):(i=yo(t)?mo:po.current,o.context=vo(e,i)),pi(e,n,o,r),o.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(vi(e,t,i,n),o.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof o.getSnapshotBeforeUpdate||"function"!=typeof o.UNSAFE_componentWillMount&&"function"!=typeof o.componentWillMount||(t=o.state,"function"==typeof o.componentWillMount&&o.componentWillMount(),"function"==typeof o.UNSAFE_componentWillMount&&o.UNSAFE_componentWillMount(),t!==o.state&&yi.enqueueReplaceState(o,o.state,null),pi(e,n,o,r),o.state=e.memoizedState),"function"==typeof o.componentDidMount&&(e.flags|=4)}var xi=Array.isArray;function Ei(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var o=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===o?t.ref:(t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[o]:t[o]=e},t._stringRef=o,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function ki(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function Si(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function o(e,t){return(e=Hu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Yu(n,e.mode,r)).return=e,t):((t=o(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=o(t,n.props)).ref=Ei(e,t,n),r.return=e,r):((r=Wu(n.type,n.key,n.props,null,e.mode,r)).ref=Ei(e,t,n),r.return=e,r)}function c(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Xu(n,e.mode,r)).return=e,t):((t=o(t,n.children||[])).return=e,t)}function f(e,t,n,r,i){return null===t||7!==t.tag?((t=qu(n,e.mode,r,i)).return=e,t):((t=o(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Yu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case x:return(n=Wu(t.type,t.key,t.props,null,e.mode,n)).ref=Ei(e,null,t),n.return=e,n;case E:return(t=Xu(t,e.mode,n)).return=e,t}if(xi(t)||U(t))return(t=qu(t,e.mode,n,null)).return=e,t;ki(e,t)}return null}function p(e,t,n,r){var o=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==o?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case x:return n.key===o?n.type===k?f(e,t,n.props.children,r,o):l(e,t,n,r):null;case E:return n.key===o?c(e,t,n,r):null}if(xi(n)||U(n))return null!==o?null:f(e,t,n,r,null);ki(e,n)}return null}function h(e,t,n,r,o){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,o);if("object"==typeof r&&null!==r){switch(r.$$typeof){case x:return e=e.get(null===r.key?n:r.key)||null,r.type===k?f(t,e,r.props.children,o,r.key):l(t,e,r,o);case E:return c(t,e=e.get(null===r.key?n:r.key)||null,r,o)}if(xi(r)||U(r))return f(t,e=e.get(n)||null,r,o,null);ki(t,r)}return null}function m(o,a,s,u){for(var l=null,c=null,f=a,m=a=0,v=null;null!==f&&m<s.length;m++){f.index>m?(v=f,f=null):v=f.sibling;var y=p(o,f,s[m],u);if(null===y){null===f&&(f=v);break}e&&f&&null===y.alternate&&t(o,f),a=i(y,a,m),null===c?l=y:c.sibling=y,c=y,f=v}if(m===s.length)return n(o,f),l;if(null===f){for(;m<s.length;m++)null!==(f=d(o,s[m],u))&&(a=i(f,a,m),null===c?l=f:c.sibling=f,c=f);return l}for(f=r(o,f);m<s.length;m++)null!==(v=h(f,o,m,s[m],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?m:v.key),a=i(v,a,m),null===c?l=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(o,e)})),l}function v(o,s,u,l){var c=U(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,m=s,v=s=0,y=null,g=u.next();null!==m&&!g.done;v++,g=u.next()){m.index>v?(y=m,m=null):y=m.sibling;var b=p(o,m,g.value,l);if(null===b){null===m&&(m=y);break}e&&m&&null===b.alternate&&t(o,m),s=i(b,s,v),null===f?c=b:f.sibling=b,f=b,m=y}if(g.done)return n(o,m),c;if(null===m){for(;!g.done;v++,g=u.next())null!==(g=d(o,g.value,l))&&(s=i(g,s,v),null===f?c=g:f.sibling=g,f=g);return c}for(m=r(o,m);!g.done;v++,g=u.next())null!==(g=h(m,o,v,g.value,l))&&(e&&null!==g.alternate&&m.delete(null===g.key?v:g.key),s=i(g,s,v),null===f?c=g:f.sibling=g,f=g);return e&&m.forEach((function(e){return t(o,e)})),c}return function(e,r,i,u){var l="object"==typeof i&&null!==i&&i.type===k&&null===i.key;l&&(i=i.props.children);var c="object"==typeof i&&null!==i;if(c)switch(i.$$typeof){case x:e:{for(c=i.key,l=r;null!==l;){if(l.key===c){if(7===l.tag){if(i.type===k){n(e,l.sibling),(r=o(l,i.props.children)).return=e,e=r;break e}}else if(l.elementType===i.type){n(e,l.sibling),(r=o(l,i.props)).ref=Ei(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===k?((r=qu(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Wu(i.type,i.key,i.props,null,e.mode,u)).ref=Ei(e,r,i),u.return=e,e=u)}return s(e);case E:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=o(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Xu(i,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=o(r,i)).return=e,e=r):(n(e,r),(r=Yu(i,e.mode,u)).return=e,e=r),s(e);if(xi(i))return m(e,r,i,u);if(U(i))return v(e,r,i,u);if(c&&ki(e,i),void 0===i&&!l)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,Y(e.type)||"Component"))}return n(e,r)}}var Ci=Si(!0),Pi=Si(!1),Oi={},Ti=uo(Oi),Mi=uo(Oi),Ai=uo(Oi);function Ri(e){if(e===Oi)throw Error(a(174));return e}function ji(e,t){switch(co(Ai,t),co(Mi,e),co(Ti,Oi),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:pe(null,"");break;default:t=pe(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}lo(Ti),co(Ti,t)}function Ni(){lo(Ti),lo(Mi),lo(Ai)}function Li(e){Ri(Ai.current);var t=Ri(Ti.current),n=pe(t,e.type);t!==n&&(co(Mi,e),co(Ti,n))}function Fi(e){Mi.current===e&&(lo(Ti),lo(Mi))}var Ii=uo(0);function Di(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Vi=null,Bi=null,zi=!1;function Ui(e,t){var n=zu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Hi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Wi(e){if(zi){var t=Bi;if(t){var n=t;if(!Hi(e,t)){if(!(t=Yr(n.nextSibling))||!Hi(e,t))return e.flags=-1025&e.flags|2,zi=!1,void(Vi=e);Ui(Vi,n)}Vi=e,Bi=Yr(t.firstChild)}else e.flags=-1025&e.flags|2,zi=!1,Vi=e}}function qi(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Vi=e}function $i(e){if(e!==Vi)return!1;if(!zi)return qi(e),zi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Hr(t,e.memoizedProps))for(t=Bi;t;)Ui(e,t),t=Yr(t.nextSibling);if(qi(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Bi=Yr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Bi=null}}else Bi=Vi?Yr(e.stateNode.nextSibling):null;return!0}function Yi(){Bi=Vi=null,zi=!1}var Xi=[];function Ki(){for(var e=0;e<Xi.length;e++)Xi[e]._workInProgressVersionPrimary=null;Xi.length=0}var Qi=_.ReactCurrentDispatcher,Gi=_.ReactCurrentBatchConfig,Zi=0,Ji=null,ea=null,ta=null,na=!1,ra=!1;function oa(){throw Error(a(321))}function ia(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!lr(e[n],t[n]))return!1;return!0}function aa(e,t,n,r,o,i){if(Zi=i,Ji=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Qi.current=null===e||null===e.memoizedState?Ra:ja,e=n(r,o),ra){i=0;do{if(ra=!1,!(25>i))throw Error(a(301));i+=1,ta=ea=null,t.updateQueue=null,Qi.current=Na,e=n(r,o)}while(ra)}if(Qi.current=Aa,t=null!==ea&&null!==ea.next,Zi=0,ta=ea=Ji=null,na=!1,t)throw Error(a(300));return e}function sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Ji.memoizedState=ta=e:ta=ta.next=e,ta}function ua(){if(null===ea){var e=Ji.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Ji.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Ji.memoizedState=ta=e:ta=ta.next=e}return ta}function la(e,t){return"function"==typeof t?t(e):t}function ca(e){var t=ua(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ea,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var s=o.next;o.next=i.next,i.next=s}r.baseQueue=o=i,n.pending=null}if(null!==o){o=o.next,r=r.baseState;var u=s=i=null,l=o;do{var c=l.lane;if((Zi&c)===c)null!==u&&(u=u.next={lane:0,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),r=l.eagerReducer===e?l.eagerState:e(r,l.action);else{var f={lane:c,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===u?(s=u=f,i=r):u=u.next=f,Ji.lanes|=c,Ds|=c}l=l.next}while(null!==l&&l!==o);null===u?i=r:u.next=s,lr(r,t.memoizedState)||(Fa=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function fa(e){var t=ua(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var s=o=o.next;do{i=e(i,s.action),s=s.next}while(s!==o);lr(i,t.memoizedState)||(Fa=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function da(e,t,n){var r=t._getVersion;r=r(t._source);var o=t._workInProgressVersionPrimary;if(null!==o?e=o===r:(e=e.mutableReadLanes,(e=(Zi&e)===e)&&(t._workInProgressVersionPrimary=r,Xi.push(t))),e)return n(t._source);throw Xi.push(t),Error(a(350))}function pa(e,t,n,r){var o=Ms;if(null===o)throw Error(a(349));var i=t._getVersion,s=i(t._source),u=Qi.current,l=u.useState((function(){return da(o,t,n)})),c=l[1],f=l[0];l=ta;var d=e.memoizedState,p=d.refs,h=p.getSnapshot,m=d.source;d=d.subscribe;var v=Ji;return e.memoizedState={refs:p,source:t,subscribe:r},u.useEffect((function(){p.getSnapshot=n,p.setSnapshot=c;var e=i(t._source);if(!lr(s,e)){e=n(t._source),lr(f,e)||(c(e),e=cu(v),o.mutableReadLanes|=e&o.pendingLanes),e=o.mutableReadLanes,o.entangledLanes|=e;for(var r=o.entanglements,a=e;0<a;){var u=31-Ht(a),l=1<<u;r[u]|=e,a&=~l}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=p.getSnapshot,n=p.setSnapshot;try{n(e(t._source));var r=cu(v);o.mutableReadLanes|=r&o.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),lr(h,n)&&lr(m,t)&&lr(d,r)||((e={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:f}).dispatch=c=Ma.bind(null,Ji,e),l.queue=e,l.baseQueue=null,f=da(o,t,n),l.memoizedState=l.baseState=f),f}function ha(e,t,n){return pa(ua(),e,t,n)}function ma(e){var t=sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:la,lastRenderedState:e}).dispatch=Ma.bind(null,Ji,e),[t.memoizedState,e]}function va(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Ji.updateQueue)?(t={lastEffect:null},Ji.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function ya(e){return e={current:e},sa().memoizedState=e}function ga(){return ua().memoizedState}function ba(e,t,n,r){var o=sa();Ji.flags|=e,o.memoizedState=va(1|t,n,void 0,void 0===r?null:r)}function wa(e,t,n,r){var o=ua();r=void 0===r?null:r;var i=void 0;if(null!==ea){var a=ea.memoizedState;if(i=a.destroy,null!==r&&ia(r,a.deps))return void va(t,n,i,r)}Ji.flags|=e,o.memoizedState=va(1|t,n,i,r)}function _a(e,t){return ba(516,4,e,t)}function xa(e,t){return wa(516,4,e,t)}function Ea(e,t){return wa(4,2,e,t)}function ka(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Sa(e,t,n){return n=null!=n?n.concat([e]):null,wa(4,2,ka.bind(null,t,e),n)}function Ca(){}function Pa(e,t){var n=ua();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Oa(e,t){var n=ua();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ia(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ta(e,t){var n=Wo();$o(98>n?98:n,(function(){e(!0)})),$o(97<n?97:n,(function(){var n=Gi.transition;Gi.transition=1;try{e(!1),t()}finally{Gi.transition=n}}))}function Ma(e,t,n){var r=lu(),o=cu(e),i={lane:o,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?i.next=i:(i.next=a.next,a.next=i),t.pending=i,a=e.alternate,e===Ji||null!==a&&a===Ji)ra=na=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,u=a(s,n);if(i.eagerReducer=a,i.eagerState=u,lr(u,s))return}catch(e){}fu(e,o,r)}}var Aa={readContext:ai,useCallback:oa,useContext:oa,useEffect:oa,useImperativeHandle:oa,useLayoutEffect:oa,useMemo:oa,useReducer:oa,useRef:oa,useState:oa,useDebugValue:oa,useDeferredValue:oa,useTransition:oa,useMutableSource:oa,useOpaqueIdentifier:oa,unstable_isNewReconciler:!1},Ra={readContext:ai,useCallback:function(e,t){return sa().memoizedState=[e,void 0===t?null:t],e},useContext:ai,useEffect:_a,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,2,ka.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,2,e,t)},useMemo:function(e,t){var n=sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=sa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ma.bind(null,Ji,e),[r.memoizedState,e]},useRef:ya,useState:ma,useDebugValue:Ca,useDeferredValue:function(e){var t=ma(e),n=t[0],r=t[1];return _a((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=ma(!1),t=e[0];return ya(e=Ta.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=sa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},pa(r,e,t,n)},useOpaqueIdentifier:function(){if(zi){var e=!1,t=function(e){return{$$typeof:L,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Kr++).toString(36))),Error(a(355))})),n=ma(t)[1];return 0==(2&Ji.mode)&&(Ji.flags|=516,va(5,(function(){n("r:"+(Kr++).toString(36))}),void 0,null)),t}return ma(t="r:"+(Kr++).toString(36)),t},unstable_isNewReconciler:!1},ja={readContext:ai,useCallback:Pa,useContext:ai,useEffect:xa,useImperativeHandle:Sa,useLayoutEffect:Ea,useMemo:Oa,useReducer:ca,useRef:ga,useState:function(){return ca(la)},useDebugValue:Ca,useDeferredValue:function(e){var t=ca(la),n=t[0],r=t[1];return xa((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=ca(la)[0];return[ga().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return ca(la)[0]},unstable_isNewReconciler:!1},Na={readContext:ai,useCallback:Pa,useContext:ai,useEffect:xa,useImperativeHandle:Sa,useLayoutEffect:Ea,useMemo:Oa,useReducer:fa,useRef:ga,useState:function(){return fa(la)},useDebugValue:Ca,useDeferredValue:function(e){var t=fa(la),n=t[0],r=t[1];return xa((function(){var t=Gi.transition;Gi.transition=1;try{r(e)}finally{Gi.transition=t}}),[e]),n},useTransition:function(){var e=fa(la)[0];return[ga().current,e]},useMutableSource:ha,useOpaqueIdentifier:function(){return fa(la)[0]},unstable_isNewReconciler:!1},La=_.ReactCurrentOwner,Fa=!1;function Ia(e,t,n,r){t.child=null===e?Pi(t,null,n,r):Ci(t,e.child,n,r)}function Da(e,t,n,r,o){n=n.render;var i=t.ref;return ii(t,o),r=aa(e,t,n,r,i,o),null===e||Fa?(t.flags|=1,Ia(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function Va(e,t,n,r,o,i){if(null===e){var a=n.type;return"function"!=typeof a||Uu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Wu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ba(e,t,a,r,o,i))}return a=e.child,0==(o&i)&&(o=a.memoizedProps,(n=null!==(n=n.compare)?n:fr)(o,r)&&e.ref===t.ref)?ns(e,t,i):(t.flags|=1,(e=Hu(a,r)).ref=t.ref,e.return=t,t.child=e)}function Ba(e,t,n,r,o,i){if(null!==e&&fr(e.memoizedProps,r)&&e.ref===t.ref){if(Fa=!1,0==(i&o))return t.lanes=e.lanes,ns(e,t,i);0!=(16384&e.flags)&&(Fa=!0)}return Ha(e,t,n,r,i)}function za(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(0==(4&t.mode))t.memoizedState={baseLanes:0},bu(0,n);else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},bu(0,e),null;t.memoizedState={baseLanes:0},bu(0,null!==i?i.baseLanes:n)}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,bu(0,r);return Ia(e,t,o,n),t.child}function Ua(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ha(e,t,n,r,o){var i=yo(n)?mo:po.current;return i=vo(t,i),ii(t,o),n=aa(e,t,n,r,i,o),null===e||Fa?(t.flags|=1,Ia(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~o,ns(e,t,o))}function Wa(e,t,n,r,o){if(yo(n)){var i=!0;_o(t)}else i=!1;if(ii(t,o),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),bi(t,n,r),_i(t,n,r,o),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var u=a.context,l=n.contextType;l="object"==typeof l&&null!==l?ai(l):vo(t,l=yo(n)?mo:po.current);var c=n.getDerivedStateFromProps,f="function"==typeof c||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||u!==l)&&wi(t,a,r,l),si=!1;var d=t.memoizedState;a.state=d,pi(t,r,a,o),u=t.memoizedState,s!==r||d!==u||ho.current||si?("function"==typeof c&&(vi(t,n,c,r),u=t.memoizedState),(s=si||gi(t,n,s,r,d,u,l))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=l,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,li(e,t),s=t.memoizedProps,l=t.type===t.elementType?s:Go(t.type,s),a.props=l,f=t.pendingProps,d=a.context,u="object"==typeof(u=n.contextType)&&null!==u?ai(u):vo(t,u=yo(n)?mo:po.current);var p=n.getDerivedStateFromProps;(c="function"==typeof p||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==f||d!==u)&&wi(t,a,r,u),si=!1,d=t.memoizedState,a.state=d,pi(t,r,a,o);var h=t.memoizedState;s!==f||d!==h||ho.current||si?("function"==typeof p&&(vi(t,n,p,r),h=t.memoizedState),(l=si||gi(t,n,l,r,d,h,u))?(c||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,u),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,u)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=u,r=l):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&d===e.memoizedState||(t.flags|=256),r=!1)}return qa(e,t,n,r,i,o)}function qa(e,t,n,r,o,i){Ua(e,t);var a=0!=(64&t.flags);if(!r&&!a)return o&&xo(t,n,!1),ns(e,t,i);r=t.stateNode,La.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Ci(t,e.child,null,i),t.child=Ci(t,null,s,i)):Ia(e,t,s,i),t.memoizedState=r.state,o&&xo(t,n,!0),t.child}function $a(e){var t=e.stateNode;t.pendingContext?bo(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bo(0,t.context,!1),ji(e,t.containerInfo)}var Ya,Xa,Ka,Qa={dehydrated:null,retryLane:0};function Ga(e,t,n){var r,o=t.pendingProps,i=Ii.current,a=!1;return(r=0!=(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(i|=1),co(Ii,1&i),null===e?(void 0!==o.fallback&&Wi(t),e=o.children,i=o.fallback,a?(e=Za(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qa,e):"number"==typeof o.unstable_expectedLoadTime?(e=Za(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Qa,t.lanes=33554432,e):((n=$u({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(o=function(e,t,n,r,o){var i=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 0==(2&i)&&t.child!==a?((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null):n=Hu(a,s),null!==e?r=Hu(e,r):(r=qu(r,i,o,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,o.children,o.fallback,n),a=t.child,i=e.child.memoizedState,a.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Qa,o):(n=function(e,t,n,r){var o=e.child;return e=o.sibling,n=Hu(o,{mode:"visible",children:n}),0==(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,o.children,n),t.memoizedState=null,n))}function Za(e,t,n,r){var o=e.mode,i=e.child;return t={mode:"hidden",children:t},0==(2&o)&&null!==i?(i.childLanes=0,i.pendingProps=t):i=$u(t,o,0,null),n=qu(n,o,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Ja(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),oi(e.return,t)}function es(e,t,n,r,o,i){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o,lastEffect:i}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=o,a.lastEffect=i)}function ts(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Ia(e,t,r.children,n),0!=(2&(r=Ii.current)))r=1&r|2,t.flags|=64;else{if(null!==e&&0!=(64&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ja(e,n);else if(19===e.tag)Ja(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(co(Ii,r),0==(2&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===Di(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),es(t,!1,o,n,i,t.lastEffect);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===Di(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}es(t,!0,n,null,i,t.lastEffect);break;case"together":es(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function ns(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ds|=t.lanes,0!=(n&t.childLanes)){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Hu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Hu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function rs(e,t){if(!zi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function os(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return yo(t.type)&&go(),null;case 3:return Ni(),lo(ho),lo(po),Ki(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||($i(t)?t.flags|=4:r.hydrate||(t.flags|=256)),null;case 5:Fi(t);var i=Ri(Ai.current);if(n=t.type,null!==e&&null!=t.stateNode)Xa(e,t,n,r),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ri(Ti.current),$i(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Gr]=t,r[Zr]=s,n){case"dialog":Tr("cancel",r),Tr("close",r);break;case"iframe":case"object":case"embed":Tr("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)Tr(Sr[e],r);break;case"source":Tr("error",r);break;case"img":case"image":case"link":Tr("error",r),Tr("load",r);break;case"details":Tr("toggle",r);break;case"input":ee(r,s),Tr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Tr("invalid",r);break;case"textarea":ue(r,s),Tr("invalid",r)}for(var l in Ee(n,s),e=null,s)s.hasOwnProperty(l)&&(i=s[l],"children"===l?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):u.hasOwnProperty(l)&&null!=i&&"onScroll"===l&&Tr("scroll",r));switch(n){case"input":Q(r),re(r,s,!0);break;case"textarea":Q(r),ce(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Vr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(l=9===i.nodeType?i:i.ownerDocument,e===fe&&(e=de(n)),e===fe?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[Gr]=t,e[Zr]=r,Ya(e,t),t.stateNode=e,l=ke(n,r),n){case"dialog":Tr("cancel",e),Tr("close",e),i=r;break;case"iframe":case"object":case"embed":Tr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Sr.length;i++)Tr(Sr[i],e);i=r;break;case"source":Tr("error",e),i=r;break;case"img":case"image":case"link":Tr("error",e),Tr("load",e),i=r;break;case"details":Tr("toggle",e),i=r;break;case"input":ee(e,r),i=J(e,r),Tr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=o({},r,{value:void 0}),Tr("invalid",e);break;case"textarea":ue(e,r),i=se(e,r),Tr("invalid",e);break;default:i=r}Ee(n,i);var c=i;for(s in c)if(c.hasOwnProperty(s)){var f=c[s];"style"===s?_e(e,f):"dangerouslySetInnerHTML"===s?null!=(f=f?f.__html:void 0)&&ve(e,f):"children"===s?"string"==typeof f?("textarea"!==n||""!==f)&&ye(e,f):"number"==typeof f&&ye(e,""+f):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(u.hasOwnProperty(s)?null!=f&&"onScroll"===s&&Tr("scroll",e):null!=f&&w(e,s,f,l))}switch(n){case"input":Q(e),re(e,r,!1);break;case"textarea":Q(e),ce(e);break;case"option":null!=r.value&&e.setAttribute("value",""+X(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Vr)}Ur(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Ka(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ri(Ai.current),Ri(Ti.current),$i(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return lo(Ii),r=t.memoizedState,0!=(64&t.flags)?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&$i(t):n=null!==e.memoizedState,r&&!n&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ii.current)?0===Ls&&(Ls=3):(0!==Ls&&3!==Ls||(Ls=4),null===Ms||0==(134217727&Ds)&&0==(134217727&Vs)||mu(Ms,Rs))),(r||n)&&(t.flags|=4),null);case 4:return Ni(),null===e&&Ar(t.stateNode.containerInfo),null;case 10:return ri(t),null;case 19:if(lo(Ii),null===(r=t.memoizedState))return null;if(s=0!=(64&t.flags),null===(l=r.rendering))if(s)rs(r,!1);else{if(0!==Ls||null!==e&&0!=(64&e.flags))for(e=t.child;null!==e;){if(null!==(l=Di(e))){for(t.flags|=64,rs(r,!1),null!==(s=l.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(l=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=l.childLanes,s.lanes=l.lanes,s.child=l.child,s.memoizedProps=l.memoizedProps,s.memoizedState=l.memoizedState,s.updateQueue=l.updateQueue,s.type=l.type,e=l.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return co(Ii,1&Ii.current|2),t.child}e=e.sibling}null!==r.tail&&Ho()>Hs&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=Di(l))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),rs(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate&&!zi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Ho()-r.renderingStartTime>Hs&&1073741824!==n&&(t.flags|=64,s=!0,rs(r,!1),t.lanes=33554432);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Ho(),n.sibling=null,t=Ii.current,co(Ii,s?1&t|2:1&t),n):null;case 23:case 24:return wu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function is(e){switch(e.tag){case 1:yo(e.type)&&go();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Ni(),lo(ho),lo(po),Ki(),0!=(64&(t=e.flags)))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Fi(e),null;case 13:return lo(Ii),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return lo(Ii),null;case 4:return Ni(),null;case 10:return ri(e),null;case 23:case 24:return wu(),null;default:return null}}function as(e,t){try{var n="",r=t;do{n+=$(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o}}function ss(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ya=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Xa=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Ri(Ti.current);var a,s=null;switch(n){case"input":i=J(e,i),r=J(e,r),s=[];break;case"option":i=ie(e,i),r=ie(e,r),s=[];break;case"select":i=o({},i,{value:void 0}),r=o({},r,{value:void 0}),s=[];break;case"textarea":i=se(e,i),r=se(e,r),s=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Vr)}for(f in Ee(n,r),n=null,i)if(!r.hasOwnProperty(f)&&i.hasOwnProperty(f)&&null!=i[f])if("style"===f){var l=i[f];for(a in l)l.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==f&&"children"!==f&&"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(u.hasOwnProperty(f)?s||(s=[]):(s=s||[]).push(f,null));for(f in r){var c=r[f];if(l=null!=i?i[f]:void 0,r.hasOwnProperty(f)&&c!==l&&(null!=c||null!=l))if("style"===f)if(l){for(a in l)!l.hasOwnProperty(a)||c&&c.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in c)c.hasOwnProperty(a)&&l[a]!==c[a]&&(n||(n={}),n[a]=c[a])}else n||(s||(s=[]),s.push(f,n)),n=c;else"dangerouslySetInnerHTML"===f?(c=c?c.__html:void 0,l=l?l.__html:void 0,null!=c&&l!==c&&(s=s||[]).push(f,c)):"children"===f?"string"!=typeof c&&"number"!=typeof c||(s=s||[]).push(f,""+c):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&(u.hasOwnProperty(f)?(null!=c&&"onScroll"===f&&Tr("scroll",e),s||l===c||(s=[])):"object"==typeof c&&null!==c&&c.$$typeof===L?c.toString():(s=s||[]).push(f,c))}n&&(s=s||[]).push("style",n);var f=s;(t.updateQueue=f)&&(t.flags|=4)}},Ka=function(e,t,n,r){n!==r&&(t.flags|=4)};var us="function"==typeof WeakMap?WeakMap:Map;function ls(e,t,n){(n=ci(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Ys||(Ys=!0,Xs=r),ss(0,t)},n}function cs(e,t,n){(n=ci(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return ss(0,t),r(o)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Ks?Ks=new Set([this]):Ks.add(this),ss(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fs="function"==typeof WeakSet?WeakSet:Set;function ds(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Iu(e,t)}else t.current=null}function ps(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Go(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&$r(t.stateNode.containerInfo))}throw Error(a(163))}function hs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(3==(3&e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var o=e;r=o.next,0!=(4&(o=o.tag))&&0!=(1&o)&&(Nu(n,e),ju(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Go(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&hi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}hi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Ur(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&_t(n)))))}throw Error(a(163))}function ms(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var o=n.memoizedProps.style;o=null!=o&&o.hasOwnProperty("display")?o.display:null,r.style.display=we("display",o)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vs(e,t){if(ko&&"function"==typeof ko.onCommitFiberUnmount)try{ko.onCommitFiberUnmount(Eo,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,o=r.destroy;if(r=r.tag,void 0!==o)if(0!=(4&r))Nu(t,n);else{r=t;try{o()}catch(e){Iu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(ds(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Iu(t,e)}break;case 5:ds(t);break;case 4:xs(e,t)}}function ys(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function gs(e){return 5===e.tag||3===e.tag||4===e.tag}function bs(e){e:{for(var t=e.return;null!==t;){if(gs(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?ws(e,n,t):_s(e,n,t)}function ws(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Vr));else if(4!==r&&null!==(e=e.child))for(ws(e,t,n),e=e.sibling;null!==e;)ws(e,t,n),e=e.sibling}function _s(e,t,n){var r=e.tag,o=5===r||6===r;if(o)e=o?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(_s(e,t,n),e=e.sibling;null!==e;)_s(e,t,n),e=e.sibling}function xs(e,t){for(var n,r,o=t,i=!1;;){if(!i){i=o.return;e:for(;;){if(null===i)throw Error(a(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===o.tag||6===o.tag){e:for(var s=e,u=o,l=u;;)if(vs(s,l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===u)break e;for(;null===l.sibling;){if(null===l.return||l.return===u)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}r?(s=n,u=o.stateNode,8===s.nodeType?s.parentNode.removeChild(u):s.removeChild(u)):n.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){n=o.stateNode.containerInfo,r=!0,o.child.return=o,o=o.child;continue}}else if(vs(e,o),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(i=!1)}o.sibling.return=o.return,o=o.sibling}}function Es(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{3==(3&r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var o=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Zr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),ke(e,o),t=ke(e,r),o=0;o<i.length;o+=2){var s=i[o],u=i[o+1];"style"===s?_e(n,u):"dangerouslySetInnerHTML"===s?ve(n,u):"children"===s?ye(n,u):w(n,s,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":le(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?ae(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,_t(n.containerInfo)));case 13:return null!==t.memoizedState&&(Us=Ho(),ms(t.child,!0)),void ks(t);case 19:return void ks(t);case 23:case 24:return void ms(t,null!==t.memoizedState)}throw Error(a(163))}function ks(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fs),t.forEach((function(t){var r=Vu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Ss(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Cs=Math.ceil,Ps=_.ReactCurrentDispatcher,Os=_.ReactCurrentOwner,Ts=0,Ms=null,As=null,Rs=0,js=0,Ns=uo(0),Ls=0,Fs=null,Is=0,Ds=0,Vs=0,Bs=0,zs=null,Us=0,Hs=1/0;function Ws(){Hs=Ho()+500}var qs,$s=null,Ys=!1,Xs=null,Ks=null,Qs=!1,Gs=null,Zs=90,Js=[],eu=[],tu=null,nu=0,ru=null,ou=-1,iu=0,au=0,su=null,uu=!1;function lu(){return 0!=(48&Ts)?Ho():-1!==ou?ou:ou=Ho()}function cu(e){if(0==(2&(e=e.mode)))return 1;if(0==(4&e))return 99===Wo()?1:2;if(0===iu&&(iu=Is),0!==Qo.transition){0!==au&&(au=null!==zs?zs.pendingLanes:0),e=iu;var t=4186112&~au;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Wo(),e=Vt(0!=(4&Ts)&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),iu)}function fu(e,t,n){if(50<nu)throw nu=0,ru=null,Error(a(185));if(null===(e=du(e,t)))return null;Ut(e,t,n),e===Ms&&(Vs|=t,4===Ls&&mu(e,Rs));var r=Wo();1===t?0!=(8&Ts)&&0==(48&Ts)?vu(e):(pu(e,n),0===Ts&&(Ws(),Xo())):(0==(4&Ts)||98!==r&&99!==r||(null===tu?tu=new Set([e]):tu.add(e)),pu(e,n)),zs=e}function du(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,o=e.pingedLanes,i=e.expirationTimes,s=e.pendingLanes;0<s;){var u=31-Ht(s),l=1<<u,c=i[u];if(-1===c){if(0==(l&r)||0!=(l&o)){c=t,Ft(l);var f=Lt;i[u]=10<=f?c+250:6<=f?c+5e3:-1}}else c<=t&&(e.expiredLanes|=l);s&=~l}if(r=It(e,e===Ms?Rs:0),t=Lt,0===r)null!==n&&(n!==Io&&Po(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Io&&Po(n)}15===t?(n=vu.bind(null,e),null===Vo?(Vo=[n],Bo=Co(Ro,Ko)):Vo.push(n),n=Io):14===t?n=Yo(99,vu.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=Yo(n,hu.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function hu(e){if(ou=-1,au=iu=0,0!=(48&Ts))throw Error(a(327));var t=e.callbackNode;if(Ru()&&e.callbackNode!==t)return null;var n=It(e,e===Ms?Rs:0);if(0===n)return null;var r=n,o=Ts;Ts|=16;var i=Eu();for(Ms===e&&Rs===r||(Ws(),_u(e,r));;)try{Cu();break}catch(t){xu(e,t)}if(ni(),Ps.current=i,Ts=o,null!==As?r=0:(Ms=null,Rs=0,r=Ls),0!=(Is&Vs))_u(e,0);else if(0!==r){if(2===r&&(Ts|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(n=Dt(e))&&(r=ku(e,n))),1===r)throw t=Fs,_u(e,0),mu(e,n),pu(e,Ho()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Tu(e);break;case 3:if(mu(e,n),(62914560&n)===n&&10<(r=Us+500-Ho())){if(0!==It(e,0))break;if(((o=e.suspendedLanes)&n)!==n){lu(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=Wr(Tu.bind(null,e),r);break}Tu(e);break;case 4:if(mu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,o=-1;0<n;){var s=31-Ht(n);i=1<<s,(s=r[s])>o&&(o=s),n&=~i}if(n=o,10<(n=(120>(n=Ho()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Cs(n/1960))-n)){e.timeoutHandle=Wr(Tu.bind(null,e),n);break}Tu(e);break;default:throw Error(a(329))}}return pu(e,Ho()),e.callbackNode===t?hu.bind(null,e):null}function mu(e,t){for(t&=~Bs,t&=~Vs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ht(t),r=1<<n;e[n]=-1,t&=~r}}function vu(e){if(0!=(48&Ts))throw Error(a(327));if(Ru(),e===Ms&&0!=(e.expiredLanes&Rs)){var t=Rs,n=ku(e,t);0!=(Is&Vs)&&(n=ku(e,t=It(e,t)))}else n=ku(e,t=It(e,0));if(0!==e.tag&&2===n&&(Ts|=64,e.hydrate&&(e.hydrate=!1,$r(e.containerInfo)),0!==(t=Dt(e))&&(n=ku(e,t))),1===n)throw n=Fs,_u(e,0),mu(e,t),pu(e,Ho()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Tu(e),pu(e,Ho()),null}function yu(e,t){var n=Ts;Ts|=1;try{return e(t)}finally{0===(Ts=n)&&(Ws(),Xo())}}function gu(e,t){var n=Ts;Ts&=-2,Ts|=8;try{return e(t)}finally{0===(Ts=n)&&(Ws(),Xo())}}function bu(e,t){co(Ns,js),js|=t,Is|=t}function wu(){js=Ns.current,lo(Ns)}function _u(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,qr(n)),null!==As)for(n=As.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&go();break;case 3:Ni(),lo(ho),lo(po),Ki();break;case 5:Fi(r);break;case 4:Ni();break;case 13:case 19:lo(Ii);break;case 10:ri(r);break;case 23:case 24:wu()}n=n.return}Ms=e,As=Hu(e.current,null),Rs=js=Is=t,Ls=0,Fs=null,Bs=Vs=Ds=0}function xu(e,t){for(;;){var n=As;try{if(ni(),Qi.current=Aa,na){for(var r=Ji.memoizedState;null!==r;){var o=r.queue;null!==o&&(o.pending=null),r=r.next}na=!1}if(Zi=0,ta=ea=Ji=null,ra=!1,Os.current=null,null===n||null===n.return){Ls=1,Fs=t,As=null;break}e:{var i=e,a=n.return,s=n,u=t;if(t=Rs,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&s.mode)){var c=s.alternate;c?(s.updateQueue=c.updateQueue,s.memoizedState=c.memoizedState,s.lanes=c.lanes):(s.updateQueue=null,s.memoizedState=null)}var f=0!=(1&Ii.current),d=a;do{var p;if(p=13===d.tag){var h=d.memoizedState;if(null!==h)p=null!==h.dehydrated;else{var m=d.memoizedProps;p=void 0!==m.fallback&&(!0!==m.unstable_avoidThisFallback||!f)}}if(p){var v=d.updateQueue;if(null===v){var y=new Set;y.add(l),d.updateQueue=y}else v.add(l);if(0==(2&d.mode)){if(d.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var g=ci(-1,1);g.tag=2,fi(s,g)}s.lanes|=1;break e}u=void 0,s=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new us,u=new Set,b.set(l,u)):void 0===(u=b.get(l))&&(u=new Set,b.set(l,u)),!u.has(s)){u.add(s);var w=Du.bind(null,i,l,s);l.then(w,w)}d.flags|=4096,d.lanes=t;break e}d=d.return}while(null!==d);u=Error((Y(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Ls&&(Ls=2),u=as(u,s),d=a;do{switch(d.tag){case 3:i=u,d.flags|=4096,t&=-t,d.lanes|=t,di(d,ls(0,i,t));break e;case 1:i=u;var _=d.type,x=d.stateNode;if(0==(64&d.flags)&&("function"==typeof _.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===Ks||!Ks.has(x)))){d.flags|=4096,t&=-t,d.lanes|=t,di(d,cs(d,i,t));break e}}d=d.return}while(null!==d)}Ou(n)}catch(e){t=e,As===n&&null!==n&&(As=n=n.return);continue}break}}function Eu(){var e=Ps.current;return Ps.current=Aa,null===e?Aa:e}function ku(e,t){var n=Ts;Ts|=16;var r=Eu();for(Ms===e&&Rs===t||_u(e,t);;)try{Su();break}catch(t){xu(e,t)}if(ni(),Ts=n,Ps.current=r,null!==As)throw Error(a(261));return Ms=null,Rs=0,Ls}function Su(){for(;null!==As;)Pu(As)}function Cu(){for(;null!==As&&!Oo();)Pu(As)}function Pu(e){var t=qs(e.alternate,e,js);e.memoizedProps=e.pendingProps,null===t?Ou(e):As=t,Os.current=null}function Ou(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(2048&t.flags)){if(null!==(n=os(n,t,js)))return void(As=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||0!=(1073741824&js)||0==(4&n.mode)){for(var r=0,o=n.child;null!==o;)r|=o.lanes|o.childLanes,o=o.sibling;n.childLanes=r}null!==e&&0==(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}else{if(null!==(n=is(t)))return n.flags&=2047,void(As=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}if(null!==(t=t.sibling))return void(As=t);As=t=e}while(null!==t);0===Ls&&(Ls=5)}function Tu(e){var t=Wo();return $o(99,Mu.bind(null,e,t)),null}function Mu(e,t){do{Ru()}while(null!==Gs);if(0!=(48&Ts))throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,o=r,i=e.pendingLanes&~o;e.pendingLanes=o,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=o,e.mutableReadLanes&=o,e.entangledLanes&=o,o=e.entanglements;for(var s=e.eventTimes,u=e.expirationTimes;0<i;){var l=31-Ht(i),c=1<<l;o[l]=0,s[l]=-1,u[l]=-1,i&=~c}if(null!==tu&&0==(24&r)&&tu.has(e)&&tu.delete(e),e===Ms&&(As=Ms=null,Rs=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(o=Ts,Ts|=32,Os.current=null,Br=Xt,vr(s=mr())){if("selectionStart"in s)u={start:s.selectionStart,end:s.selectionEnd};else e:if(u=(u=s.ownerDocument)&&u.defaultView||window,(c=u.getSelection&&u.getSelection())&&0!==c.rangeCount){u=c.anchorNode,i=c.anchorOffset,l=c.focusNode,c=c.focusOffset;try{u.nodeType,l.nodeType}catch(e){u=null;break e}var f=0,d=-1,p=-1,h=0,m=0,v=s,y=null;t:for(;;){for(var g;v!==u||0!==i&&3!==v.nodeType||(d=f+i),v!==l||0!==c&&3!==v.nodeType||(p=f+c),3===v.nodeType&&(f+=v.nodeValue.length),null!==(g=v.firstChild);)y=v,v=g;for(;;){if(v===s)break t;if(y===u&&++h===i&&(d=f),y===l&&++m===c&&(p=f),null!==(g=v.nextSibling))break;y=(v=y).parentNode}v=g}u=-1===d||-1===p?null:{start:d,end:p}}else u=null;u=u||{start:0,end:0}}else u=null;zr={focusedElem:s,selectionRange:u},Xt=!1,su=null,uu=!1,$s=r;do{try{Au()}catch(e){if(null===$s)throw Error(a(330));Iu($s,e),$s=$s.nextEffect}}while(null!==$s);su=null,$s=r;do{try{for(s=e;null!==$s;){var b=$s.flags;if(16&b&&ye($s.stateNode,""),128&b){var w=$s.alternate;if(null!==w){var _=w.ref;null!==_&&("function"==typeof _?_(null):_.current=null)}}switch(1038&b){case 2:bs($s),$s.flags&=-3;break;case 6:bs($s),$s.flags&=-3,Es($s.alternate,$s);break;case 1024:$s.flags&=-1025;break;case 1028:$s.flags&=-1025,Es($s.alternate,$s);break;case 4:Es($s.alternate,$s);break;case 8:xs(s,u=$s);var x=u.alternate;ys(u),null!==x&&ys(x)}$s=$s.nextEffect}}catch(e){if(null===$s)throw Error(a(330));Iu($s,e),$s=$s.nextEffect}}while(null!==$s);if(_=zr,w=mr(),b=_.focusedElem,s=_.selectionRange,w!==b&&b&&b.ownerDocument&&hr(b.ownerDocument.documentElement,b)){null!==s&&vr(b)&&(w=s.start,void 0===(_=s.end)&&(_=w),"selectionStart"in b?(b.selectionStart=w,b.selectionEnd=Math.min(_,b.value.length)):(_=(w=b.ownerDocument||document)&&w.defaultView||window).getSelection&&(_=_.getSelection(),u=b.textContent.length,x=Math.min(s.start,u),s=void 0===s.end?x:Math.min(s.end,u),!_.extend&&x>s&&(u=s,s=x,x=u),u=pr(b,x),i=pr(b,s),u&&i&&(1!==_.rangeCount||_.anchorNode!==u.node||_.anchorOffset!==u.offset||_.focusNode!==i.node||_.focusOffset!==i.offset)&&((w=w.createRange()).setStart(u.node,u.offset),_.removeAllRanges(),x>s?(_.addRange(w),_.extend(i.node,i.offset)):(w.setEnd(i.node,i.offset),_.addRange(w))))),w=[];for(_=b;_=_.parentNode;)1===_.nodeType&&w.push({element:_,left:_.scrollLeft,top:_.scrollTop});for("function"==typeof b.focus&&b.focus(),b=0;b<w.length;b++)(_=w[b]).element.scrollLeft=_.left,_.element.scrollTop=_.top}Xt=!!Br,zr=Br=null,e.current=n,$s=r;do{try{for(b=e;null!==$s;){var E=$s.flags;if(36&E&&hs(b,$s.alternate,$s),128&E){w=void 0;var k=$s.ref;if(null!==k){var S=$s.stateNode;$s.tag,w=S,"function"==typeof k?k(w):k.current=w}}$s=$s.nextEffect}}catch(e){if(null===$s)throw Error(a(330));Iu($s,e),$s=$s.nextEffect}}while(null!==$s);$s=null,Do(),Ts=o}else e.current=n;if(Qs)Qs=!1,Gs=e,Zs=t;else for($s=r;null!==$s;)t=$s.nextEffect,$s.nextEffect=null,8&$s.flags&&((E=$s).sibling=null,E.stateNode=null),$s=t;if(0===(r=e.pendingLanes)&&(Ks=null),1===r?e===ru?nu++:(nu=0,ru=e):nu=0,n=n.stateNode,ko&&"function"==typeof ko.onCommitFiberRoot)try{ko.onCommitFiberRoot(Eo,n,void 0,64==(64&n.current.flags))}catch(e){}if(pu(e,Ho()),Ys)throw Ys=!1,e=Xs,Xs=null,e;return 0!=(8&Ts)||Xo(),null}function Au(){for(;null!==$s;){var e=$s.alternate;uu||null===su||(0!=(8&$s.flags)?Je($s,su)&&(uu=!0):13===$s.tag&&Ss(e,$s)&&Je($s,su)&&(uu=!0));var t=$s.flags;0!=(256&t)&&ps(e,$s),0==(512&t)||Qs||(Qs=!0,Yo(97,(function(){return Ru(),null}))),$s=$s.nextEffect}}function Ru(){if(90!==Zs){var e=97<Zs?97:Zs;return Zs=90,$o(e,Lu)}return!1}function ju(e,t){Js.push(t,e),Qs||(Qs=!0,Yo(97,(function(){return Ru(),null})))}function Nu(e,t){eu.push(t,e),Qs||(Qs=!0,Yo(97,(function(){return Ru(),null})))}function Lu(){if(null===Gs)return!1;var e=Gs;if(Gs=null,0!=(48&Ts))throw Error(a(331));var t=Ts;Ts|=32;var n=eu;eu=[];for(var r=0;r<n.length;r+=2){var o=n[r],i=n[r+1],s=o.destroy;if(o.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===i)throw Error(a(330));Iu(i,e)}}for(n=Js,Js=[],r=0;r<n.length;r+=2){o=n[r],i=n[r+1];try{var u=o.create;o.destroy=u()}catch(e){if(null===i)throw Error(a(330));Iu(i,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return Ts=t,Xo(),!0}function Fu(e,t,n){fi(e,t=ls(0,t=as(n,t),1)),t=lu(),null!==(e=du(e,1))&&(Ut(e,1,t),pu(e,t))}function Iu(e,t){if(3===e.tag)Fu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Fu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ks||!Ks.has(r))){var o=cs(n,e=as(t,e),1);if(fi(n,o),o=lu(),null!==(n=du(n,1)))Ut(n,1,o),pu(n,o);else if("function"==typeof r.componentDidCatch&&(null===Ks||!Ks.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Du(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=lu(),e.pingedLanes|=e.suspendedLanes&n,Ms===e&&(Rs&n)===n&&(4===Ls||3===Ls&&(62914560&Rs)===Rs&&500>Ho()-Us?_u(e,0):Bs|=n),pu(e,t)}function Vu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(0==(2&(t=e.mode))?t=1:0==(4&t)?t=99===Wo()?1:2:(0===iu&&(iu=Is),0===(t=Bt(62914560&~iu))&&(t=4194304))),n=lu(),null!==(e=du(e,t))&&(Ut(e,t,n),pu(e,n))}function Bu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function zu(e,t,n,r){return new Bu(e,t,n,r)}function Uu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Hu(e,t){var n=e.alternate;return null===n?((n=zu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Wu(e,t,n,r,o,i){var s=2;if(r=e,"function"==typeof e)Uu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case k:return qu(n.children,o,i,t);case F:s=8,o|=16;break;case S:s=8,o|=1;break;case C:return(e=zu(12,n,t,8|o)).elementType=C,e.type=C,e.lanes=i,e;case M:return(e=zu(13,n,t,o)).type=M,e.elementType=M,e.lanes=i,e;case A:return(e=zu(19,n,t,o)).elementType=A,e.lanes=i,e;case I:return $u(n,o,i,t);case D:return(e=zu(24,n,t,o)).elementType=D,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:s=10;break e;case O:s=9;break e;case T:s=11;break e;case R:s=14;break e;case j:s=16,r=null;break e;case N:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=zu(s,n,t,o)).elementType=e,t.type=r,t.lanes=i,t}function qu(e,t,n,r){return(e=zu(7,e,r,t)).lanes=n,e}function $u(e,t,n,r){return(e=zu(23,e,r,t)).elementType=I,e.lanes=n,e}function Yu(e,t,n){return(e=zu(6,e,null,t)).lanes=n,e}function Xu(e,t,n){return(t=zu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Ku(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function Qu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:E,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Gu(e,t,n,r){var o=t.current,i=lu(),s=cu(o);e:if(n){t:{if(Ke(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(yo(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var l=n.type;if(yo(l)){n=wo(n,l,u);break e}}n=u}else n=fo;return null===t.context?t.context=n:t.pendingContext=n,(t=ci(i,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),fi(o,t),fu(o,s,i),s}function Zu(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ju(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function el(e,t){Ju(e,t),(e=e.alternate)&&Ju(e,t)}function tl(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Ku(e,t,null!=n&&!0===n.hydrate),t=zu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,ui(t),e[Jr]=n.current,Ar(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var o=(t=r[e])._getVersion;o=o(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,o]:n.mutableSourceEagerHydrationData.push(t,o)}this._internalRoot=n}function nl(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rl(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i._internalRoot;if("function"==typeof o){var s=o;o=function(){var e=Zu(a);s.call(e)}}Gu(t,a,e,o)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tl(e,0,t?{hydrate:!0}:void 0)}(n,r),a=i._internalRoot,"function"==typeof o){var u=o;o=function(){var e=Zu(a);u.call(e)}}gu((function(){Gu(t,a,e,o)}))}return Zu(a)}function ol(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nl(t))throw Error(a(200));return Qu(e,t,null,n)}qs=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||ho.current)Fa=!0;else{if(0==(n&r)){switch(Fa=!1,t.tag){case 3:$a(t),Yi();break;case 5:Li(t);break;case 1:yo(t.type)&&_o(t);break;case 4:ji(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var o=t.type._context;co(Zo,o._currentValue),o._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!=(n&t.child.childLanes)?Ga(e,t,n):(co(Ii,1&Ii.current),null!==(t=ns(e,t,n))?t.sibling:null);co(Ii,1&Ii.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(64&e.flags)){if(r)return ts(e,t,n);t.flags|=64}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),co(Ii,Ii.current),r)break;return null;case 23:case 24:return t.lanes=0,za(e,t,n)}return ns(e,t,n)}Fa=0!=(16384&e.flags)}else Fa=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=vo(t,po.current),ii(t,n),o=aa(null,t,r,e,o,n),t.flags|=1,"object"==typeof o&&null!==o&&"function"==typeof o.render&&void 0===o.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,yo(r)){var i=!0;_o(t)}else i=!1;t.memoizedState=null!==o.state&&void 0!==o.state?o.state:null,ui(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&vi(t,r,s,e),o.updater=yi,t.stateNode=o,o._reactInternals=t,_i(t,r,e,n),t=qa(null,t,r,!0,i,n)}else t.tag=0,Ia(null,t,o,n),t=t.child;return t;case 16:o=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Uu(e)?1:0;if(null!=e){if((e=e.$$typeof)===T)return 11;if(e===R)return 14}return 2}(o),e=Go(o,e),i){case 0:t=Ha(null,t,o,e,n);break e;case 1:t=Wa(null,t,o,e,n);break e;case 11:t=Da(null,t,o,e,n);break e;case 14:t=Va(null,t,o,Go(o.type,e),r,n);break e}throw Error(a(306,o,""))}return t;case 0:return r=t.type,o=t.pendingProps,Ha(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 1:return r=t.type,o=t.pendingProps,Wa(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 3:if($a(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,o=null!==(o=t.memoizedState)?o.element:null,li(e,t),pi(t,r,null,n),(r=t.memoizedState.element)===o)Yi(),t=ns(e,t,n);else{if((i=(o=t.stateNode).hydrate)&&(Bi=Yr(t.stateNode.containerInfo.firstChild),Vi=t,i=zi=!0),i){if(null!=(e=o.mutableSourceEagerHydrationData))for(o=0;o<e.length;o+=2)(i=e[o])._workInProgressVersionPrimary=e[o+1],Xi.push(i);for(n=Pi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Ia(e,t,r,n),Yi();t=t.child}return t;case 5:return Li(t),null===e&&Wi(t),r=t.type,o=t.pendingProps,i=null!==e?e.memoizedProps:null,s=o.children,Hr(r,o)?s=null:null!==i&&Hr(r,i)&&(t.flags|=16),Ua(e,t),Ia(e,t,s,n),t.child;case 6:return null===e&&Wi(t),null;case 13:return Ga(e,t,n);case 4:return ji(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ci(t,null,r,n):Ia(e,t,r,n),t.child;case 11:return r=t.type,o=t.pendingProps,Da(e,t,r,o=t.elementType===r?o:Go(r,o),n);case 7:return Ia(e,t,t.pendingProps,n),t.child;case 8:case 12:return Ia(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,o=t.pendingProps,s=t.memoizedProps,i=o.value;var u=t.type._context;if(co(Zo,u._currentValue),u._currentValue=i,null!==s)if(u=s.value,0==(i=lr(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(s.children===o.children&&!ho.current){t=ns(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var l=u.dependencies;if(null!==l){s=u.child;for(var c=l.firstContext;null!==c;){if(c.context===r&&0!=(c.observedBits&i)){1===u.tag&&((c=ci(-1,n&-n)).tag=2,fi(u,c)),u.lanes|=n,null!==(c=u.alternate)&&(c.lanes|=n),oi(u.return,n),l.lanes|=n;break}c=c.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}Ia(e,t,o.children,n),t=t.child}return t;case 9:return o=t.type,r=(i=t.pendingProps).children,ii(t,n),r=r(o=ai(o,i.unstable_observedBits)),t.flags|=1,Ia(e,t,r,n),t.child;case 14:return i=Go(o=t.type,t.pendingProps),Va(e,t,o,i=Go(o.type,i),r,n);case 15:return Ba(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,o=t.pendingProps,o=t.elementType===r?o:Go(r,o),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,yo(r)?(e=!0,_o(t)):e=!1,ii(t,n),bi(t,r,o),_i(t,r,o,n),qa(null,t,r,!0,e,n);case 19:return ts(e,t,n);case 23:case 24:return za(e,t,n)}throw Error(a(156,t.tag))},tl.prototype.render=function(e){Gu(e,this._internalRoot,null,null)},tl.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gu(null,e,null,(function(){t[Jr]=null}))},et=function(e){13===e.tag&&(fu(e,4,lu()),el(e,4))},tt=function(e){13===e.tag&&(fu(e,67108864,lu()),el(e,67108864))},nt=function(e){if(13===e.tag){var t=lu(),n=cu(e);fu(e,n,t),el(e,n)}},rt=function(e,t){return t()},Ce=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=oo(r);if(!o)throw Error(a(90));G(r),ne(r,o)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Re=yu,je=function(e,t,n,r,o){var i=Ts;Ts|=4;try{return $o(98,e.bind(null,t,n,r,o))}finally{0===(Ts=i)&&(Ws(),Xo())}},Ne=function(){0==(49&Ts)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pu(e,Ho())}))}Xo()}(),Ru())},Le=function(e,t){var n=Ts;Ts|=2;try{return e(t)}finally{0===(Ts=n)&&(Ws(),Xo())}};var il={Events:[no,ro,oo,Me,Ae,Ru,{current:!1}]},al={findFiberByHostInstance:to,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},sl={bundleType:al.bundleType,version:al.version,rendererPackageName:al.rendererPackageName,rendererConfig:al.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:_.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Ze(e))?null:e.stateNode},findFiberByHostInstance:al.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ul=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ul.isDisabled&&ul.supportsFiber)try{Eo=ul.inject(sl),ko=ul}catch(me){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=il,t.createPortal=ol,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Ze(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ts;if(0!=(48&n))return e(t);Ts|=1;try{if(e)return $o(99,e.bind(null,t))}finally{Ts=n,Xo()}},t.hydrate=function(e,t,n){if(!nl(t))throw Error(a(200));return rl(null,e,t,!0,n)},t.render=function(e,t,n){if(!nl(t))throw Error(a(200));return rl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nl(e))throw Error(a(40));return!!e._reactRootContainer&&(gu((function(){rl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Jr]=null}))})),!0)},t.unstable_batchedUpdates=yu,t.unstable_createPortal=function(e,t){return ol(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nl(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return rl(e,t,n,!1,r)},t.version="17.0.2"},3935:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(4448)},9921:(e,t)=>{"use strict";var n="function"==typeof Symbol&&Symbol.for,r=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,i=n?Symbol.for("react.fragment"):60107,a=n?Symbol.for("react.strict_mode"):60108,s=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,l=n?Symbol.for("react.context"):60110,c=n?Symbol.for("react.async_mode"):60111,f=n?Symbol.for("react.concurrent_mode"):60111,d=n?Symbol.for("react.forward_ref"):60112,p=n?Symbol.for("react.suspense"):60113,h=n?Symbol.for("react.suspense_list"):60120,m=n?Symbol.for("react.memo"):60115,v=n?Symbol.for("react.lazy"):60116,y=n?Symbol.for("react.block"):60121,g=n?Symbol.for("react.fundamental"):60117,b=n?Symbol.for("react.responder"):60118,w=n?Symbol.for("react.scope"):60119;function _(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case r:switch(e=e.type){case c:case f:case i:case s:case a:case p:return e;default:switch(e=e&&e.$$typeof){case l:case d:case v:case m:case u:return e;default:return t}}case o:return t}}}function x(e){return _(e)===f}t.AsyncMode=c,t.ConcurrentMode=f,t.ContextConsumer=l,t.ContextProvider=u,t.Element=r,t.ForwardRef=d,t.Fragment=i,t.Lazy=v,t.Memo=m,t.Portal=o,t.Profiler=s,t.StrictMode=a,t.Suspense=p,t.isAsyncMode=function(e){return x(e)||_(e)===c},t.isConcurrentMode=x,t.isContextConsumer=function(e){return _(e)===l},t.isContextProvider=function(e){return _(e)===u},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===r},t.isForwardRef=function(e){return _(e)===d},t.isFragment=function(e){return _(e)===i},t.isLazy=function(e){return _(e)===v},t.isMemo=function(e){return _(e)===m},t.isPortal=function(e){return _(e)===o},t.isProfiler=function(e){return _(e)===s},t.isStrictMode=function(e){return _(e)===a},t.isSuspense=function(e){return _(e)===p},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===i||e===f||e===s||e===a||e===p||e===h||"object"==typeof e&&null!==e&&(e.$$typeof===v||e.$$typeof===m||e.$$typeof===u||e.$$typeof===l||e.$$typeof===d||e.$$typeof===g||e.$$typeof===b||e.$$typeof===w||e.$$typeof===y)},t.typeOf=_},9864:(e,t,n)=>{"use strict";e.exports=n(9921)},8928:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Provider:()=>c,ReactReduxContext:()=>o,batch:()=>J.unstable_batchedUpdates,connect:()=>H,connectAdvanced:()=>S,createDispatchHook:()=>Y,createSelectorHook:()=>Q,createStoreHook:()=>q,shallowEqual:()=>P,useDispatch:()=>X,useSelector:()=>Z,useStore:()=>$});var r=n(7294),o=r.createContext(null),i=function(e){e()},a=function(){return i},s={notify:function(){},get:function(){return[]}};function u(e,t){var n,r=s;function o(){u.onStateChange&&u.onStateChange()}function i(){n||(n=t?t.addNestedSub(o):e.subscribe(o),r=function(){var e=a(),t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,o=n={callback:e,next:null,prev:n};return o.prev?o.prev.next=o:t=o,function(){r&&null!==t&&(r=!1,o.next?o.next.prev=o.prev:n=o.prev,o.prev?o.prev.next=o.next:t=o.next)}}}}())}var u={addNestedSub:function(e){return i(),r.subscribe(e)},notifyNestedSubs:function(){r.notify()},handleChangeWrapper:o,isSubscribed:function(){return Boolean(n)},trySubscribe:i,tryUnsubscribe:function(){n&&(n(),n=void 0,r.clear(),r=s)},getListeners:function(){return r}};return u}var l="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;const c=function(e){var t=e.store,n=e.context,i=e.children,a=(0,r.useMemo)((function(){var e=u(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),s=(0,r.useMemo)((function(){return t.getState()}),[t]);l((function(){var e=a.subscription;return e.trySubscribe(),s!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,s]);var c=n||o;return r.createElement(c.Provider,{value:a},i)};function f(){return f=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},f.apply(this,arguments)}function d(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}var p=n(8679),h=n.n(p),m=n(2973),v=["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"],y=["reactReduxForwardedRef"],g=[],b=[null,null];function w(e,t){var n=e[1];return[t.payload,n+1]}function _(e,t,n){l((function(){return e.apply(void 0,t)}),n)}function x(e,t,n,r,o,i,a){e.current=r,t.current=o,n.current=!1,i.current&&(i.current=null,a())}function E(e,t,n,r,o,i,a,s,u,l){if(e){var c=!1,f=null,d=function(){if(!c){var e,n,d=t.getState();try{e=r(d,o.current)}catch(e){n=e,f=e}n||(f=null),e===i.current?a.current||u():(i.current=e,s.current=e,a.current=!0,l({type:"STORE_UPDATED",payload:{error:n}}))}};return n.onStateChange=d,n.trySubscribe(),d(),function(){if(c=!0,n.tryUnsubscribe(),n.onStateChange=null,f)throw f}}}var k=function(){return[null,0]};function S(e,t){void 0===t&&(t={});var n=t,i=n.getDisplayName,a=void 0===i?function(e){return"ConnectAdvanced("+e+")"}:i,s=n.methodName,l=void 0===s?"connectAdvanced":s,c=n.renderCountProp,p=void 0===c?void 0:c,S=n.shouldHandleStateChanges,C=void 0===S||S,P=n.storeKey,O=void 0===P?"store":P,T=(n.withRef,n.forwardRef),M=void 0!==T&&T,A=n.context,R=void 0===A?o:A,j=d(n,v),N=R;return function(t){var n=t.displayName||t.name||"Component",o=a(n),i=f({},j,{getDisplayName:a,methodName:l,renderCountProp:p,shouldHandleStateChanges:C,storeKey:O,displayName:o,wrappedComponentName:n,WrappedComponent:t}),s=j.pure,c=s?r.useMemo:function(e){return e()};function v(n){var o=(0,r.useMemo)((function(){var e=n.reactReduxForwardedRef,t=d(n,y);return[n.context,e,t]}),[n]),a=o[0],s=o[1],l=o[2],p=(0,r.useMemo)((function(){return a&&a.Consumer&&(0,m.isContextConsumer)(r.createElement(a.Consumer,null))?a:N}),[a,N]),h=(0,r.useContext)(p),v=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch);Boolean(h)&&Boolean(h.store);var S=v?n.store:h.store,P=(0,r.useMemo)((function(){return function(t){return e(t.dispatch,i)}(S)}),[S]),O=(0,r.useMemo)((function(){if(!C)return b;var e=u(S,v?null:h.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[S,v,h]),T=O[0],M=O[1],A=(0,r.useMemo)((function(){return v?h:f({},h,{subscription:T})}),[v,h,T]),R=(0,r.useReducer)(w,g,k),j=R[0][0],L=R[1];if(j&&j.error)throw j.error;var F=(0,r.useRef)(),I=(0,r.useRef)(l),D=(0,r.useRef)(),V=(0,r.useRef)(!1),B=c((function(){return D.current&&l===I.current?D.current:P(S.getState(),l)}),[S,j,l]);_(x,[I,F,V,l,B,D,M]),_(E,[C,S,T,P,I,F,V,D,M,L],[S,T,P]);var z=(0,r.useMemo)((function(){return r.createElement(t,f({},B,{ref:s}))}),[s,t,B]);return(0,r.useMemo)((function(){return C?r.createElement(p.Provider,{value:A},z):z}),[p,z,A])}var S=s?r.memo(v):v;if(S.WrappedComponent=t,S.displayName=v.displayName=o,M){var P=r.forwardRef((function(e,t){return r.createElement(S,f({},e,{reactReduxForwardedRef:t}))}));return P.displayName=o,P.WrappedComponent=t,h()(P,t)}return h()(S,t)}}function C(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function P(e,t){if(C(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var o=0;o<n.length;o++)if(!Object.prototype.hasOwnProperty.call(t,n[o])||!C(e[n[o]],t[n[o]]))return!1;return!0}function O(e){return function(t,n){var r=e(t,n);function o(){return r}return o.dependsOnOwnProps=!1,o}}function T(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function M(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=T(e);var o=r(t,n);return"function"==typeof o&&(r.mapToProps=o,r.dependsOnOwnProps=T(o),o=r(t,n)),o},r}}const A=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:O((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?O((function(t){return function(e,t){var n={},r=function(r){var o=e[r];"function"==typeof o&&(n[r]=function(){return t(o.apply(void 0,arguments))})};for(var o in e)r(o);return n}(e,t)})):void 0}],R=[function(e){return"function"==typeof e?M(e):void 0},function(e){return e?void 0:O((function(){return{}}))}];function j(e,t,n){return f({},n,e,t)}const N=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,o=n.pure,i=n.areMergedPropsEqual,a=!1;return function(t,n,s){var u=e(t,n,s);return a?o&&i(u,r)||(r=u):(a=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return j}}];var L=["initMapStateToProps","initMapDispatchToProps","initMergeProps"];function F(e,t,n,r){return function(o,i){return n(e(o,i),t(r,i),i)}}function I(e,t,n,r,o){var i,a,s,u,l,c=o.areStatesEqual,f=o.areOwnPropsEqual,d=o.areStatePropsEqual,p=!1;return function(o,h){return p?function(o,p){var h,m,v=!f(p,a),y=!c(o,i);return i=o,a=p,v&&y?(s=e(i,a),t.dependsOnOwnProps&&(u=t(r,a)),l=n(s,u,a)):v?(e.dependsOnOwnProps&&(s=e(i,a)),t.dependsOnOwnProps&&(u=t(r,a)),l=n(s,u,a)):y?(h=e(i,a),m=!d(h,s),s=h,m&&(l=n(s,u,a)),l):l}(o,h):(s=e(i=o,a=h),u=t(r,a),l=n(s,u,a),p=!0,l)}}function D(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,o=t.initMergeProps,i=d(t,L),a=n(e,i),s=r(e,i),u=o(e,i);return(i.pure?I:F)(a,s,u,e,i)}var V=["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"];function B(e,t,n){for(var r=t.length-1;r>=0;r--){var o=t[r](e);if(o)return o}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function z(e,t){return e===t}function U(e){var t=void 0===e?{}:e,n=t.connectHOC,r=void 0===n?S:n,o=t.mapStateToPropsFactories,i=void 0===o?R:o,a=t.mapDispatchToPropsFactories,s=void 0===a?A:a,u=t.mergePropsFactories,l=void 0===u?N:u,c=t.selectorFactory,p=void 0===c?D:c;return function(e,t,n,o){void 0===o&&(o={});var a=o,u=a.pure,c=void 0===u||u,h=a.areStatesEqual,m=void 0===h?z:h,v=a.areOwnPropsEqual,y=void 0===v?P:v,g=a.areStatePropsEqual,b=void 0===g?P:g,w=a.areMergedPropsEqual,_=void 0===w?P:w,x=d(a,V),E=B(e,i,"mapStateToProps"),k=B(t,s,"mapDispatchToProps"),S=B(n,l,"mergeProps");return r(p,f({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:E,initMapDispatchToProps:k,initMergeProps:S,pure:c,areStatesEqual:m,areOwnPropsEqual:y,areStatePropsEqual:b,areMergedPropsEqual:_},x))}}const H=U();function W(){return(0,r.useContext)(o)}function q(e){void 0===e&&(e=o);var t=e===o?W:function(){return(0,r.useContext)(e)};return function(){return t().store}}var $=q();function Y(e){void 0===e&&(e=o);var t=e===o?$:q(e);return function(){return t().dispatch}}var X=Y(),K=function(e,t){return e===t};function Q(e){void 0===e&&(e=o);var t=e===o?W:function(){return(0,r.useContext)(e)};return function(e,n){void 0===n&&(n=K);var o=t(),i=function(e,t,n,o){var i,a=(0,r.useReducer)((function(e){return e+1}),0)[1],s=(0,r.useMemo)((function(){return u(n,o)}),[n,o]),c=(0,r.useRef)(),f=(0,r.useRef)(),d=(0,r.useRef)(),p=(0,r.useRef)(),h=n.getState();try{if(e!==f.current||h!==d.current||c.current){var m=e(h);i=void 0!==p.current&&t(m,p.current)?p.current:m}else i=p.current}catch(e){throw c.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+c.current.stack+"\n\n"),e}return l((function(){f.current=e,d.current=h,p.current=i,c.current=void 0})),l((function(){function e(){try{var e=n.getState();if(e===d.current)return;var r=f.current(e);if(t(r,p.current))return;p.current=r,d.current=e}catch(e){c.current=e}a()}return s.onStateChange=e,s.trySubscribe(),e(),function(){return s.tryUnsubscribe()}}),[n,s]),i}(e,n,o.store,o.subscription);return(0,r.useDebugValue)(i),i}}var G,Z=Q(),J=n(3935);G=J.unstable_batchedUpdates,i=G},8359:(e,t)=>{"use strict";var n=60103,r=60106,o=60107,i=60108,a=60114,s=60109,u=60110,l=60112,c=60113,f=60120,d=60115,p=60116;if("function"==typeof Symbol&&Symbol.for){var h=Symbol.for;n=h("react.element"),r=h("react.portal"),o=h("react.fragment"),i=h("react.strict_mode"),a=h("react.profiler"),s=h("react.provider"),u=h("react.context"),l=h("react.forward_ref"),c=h("react.suspense"),f=h("react.suspense_list"),d=h("react.memo"),p=h("react.lazy"),h("react.block"),h("react.server.block"),h("react.fundamental"),h("react.debug_trace_mode"),h("react.legacy_hidden")}t.isContextConsumer=function(e){return function(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case n:switch(e=e.type){case o:case a:case i:case c:case f:return e;default:switch(e=e&&e.$$typeof){case u:case l:case p:case d:case s:return e;default:return t}}case r:return t}}}(e)===u}},2973:(e,t,n)=>{"use strict";e.exports=n(8359)},8477:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),o=a(n(7294)),i=a(n(1093));function a(e){return e&&e.__esModule?e:{default:e}}function s(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function u(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var l=function(e){function t(){return s(this,t),u(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),r(t,[{key:"render",value:function(){return o.default.createElement("input",this.props,this.props.children)}}]),t}(o.default.Component);t.default=(0,i.default)(l)},5343:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=u(n(7294)),a=u(n(8e3)),s=u(n(5697));function u(e){return e&&e.__esModule?e:{default:e}}function l(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function c(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var f=function(e){function t(){return l(this,t),c(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),o(t,[{key:"render",value:function(){var e=this,t=r({},this.props);return t.parentBindings&&delete t.parentBindings,i.default.createElement("div",r({},t,{ref:function(t){e.props.parentBindings.domNode=t}}),this.props.children)}}]),t}(i.default.Component);f.propTypes={name:s.default.string,id:s.default.string},t.default=(0,a.default)(f)},8939:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=i(n(7294)),o=i(n(1093));function i(e){return e&&e.__esModule?e:{default:e}}function a(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function s(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}var u=function(e){function t(){var e,n,o;a(this,t);for(var i=arguments.length,u=Array(i),l=0;l<i;l++)u[l]=arguments[l];return n=o=s(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),o.render=function(){return r.default.createElement("a",o.props,o.props.children)},s(o,n)}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,e),t}(r.default.Component);t.default=(0,o.default)(u)},6261:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Helpers=t.ScrollElement=t.ScrollLink=t.animateScroll=t.scrollSpy=t.Events=t.scroller=t.Element=t.Button=t.Link=void 0;var r=p(n(8939)),o=p(n(8477)),i=p(n(5343)),a=p(n(2628)),s=p(n(4592)),u=p(n(7606)),l=p(n(3200)),c=p(n(1093)),f=p(n(8e3)),d=p(n(8482));function p(e){return e&&e.__esModule?e:{default:e}}t.Link=r.default,t.Button=o.default,t.Element=i.default,t.scroller=a.default,t.Events=s.default,t.scrollSpy=u.default,t.animateScroll=l.default,t.ScrollLink=c.default,t.ScrollElement=f.default,t.Helpers=d.default,t.default={Link:r.default,Button:o.default,Element:i.default,scroller:a.default,Events:s.default,scrollSpy:u.default,animateScroll:l.default,ScrollLink:c.default,ScrollElement:f.default,Helpers:d.default}},8482:(e,t,n)=>{"use strict";var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();function i(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}var u=n(7294),l=(n(3935),n(4259),n(7606)),c=n(2628),f=n(5697),d=n(9678),p={to:f.string.isRequired,containerId:f.string,container:f.object,activeClass:f.string,spy:f.bool,smooth:f.oneOfType([f.bool,f.string]),offset:f.number,delay:f.number,isDynamic:f.bool,onClick:f.func,duration:f.oneOfType([f.number,f.func]),absolute:f.bool,onSetActive:f.func,onSetInactive:f.func,ignoreCancelEvents:f.bool,hashSpy:f.bool,spyThrottle:f.number},h={Scroll:function(e,t){console.warn("Helpers.Scroll is deprecated since v1.7.0");var n=t||c,f=function(t){function c(e){i(this,c);var t=a(this,(c.__proto__||Object.getPrototypeOf(c)).call(this,e));return h.call(t),t.state={active:!1},t}return s(c,t),o(c,[{key:"getScrollSpyContainer",value:function(){var e=this.props.containerId,t=this.props.container;return e?document.getElementById(e):t&&t.nodeType?t:document}},{key:"componentDidMount",value:function(){if(this.props.spy||this.props.hashSpy){var e=this.getScrollSpyContainer();l.isMounted(e)||l.mount(e,this.props.spyThrottle),this.props.hashSpy&&(d.isMounted()||d.mount(n),d.mapContainer(this.props.to,e)),this.props.spy&&l.addStateHandler(this.stateHandler),l.addSpyHandler(this.spyHandler,e),this.setState({container:e})}}},{key:"componentWillUnmount",value:function(){l.unmount(this.stateHandler,this.spyHandler)}},{key:"render",value:function(){var t;t=this.state&&this.state.active?((this.props.className||"")+" "+(this.props.activeClass||"active")).trim():this.props.className;var n=r({},this.props);for(var o in p)n.hasOwnProperty(o)&&delete n[o];return n.className=t,n.onClick=this.handleClick,u.createElement(e,n)}}]),c}(u.Component),h=function(){var e=this;this.scrollTo=function(t,o){n.scrollTo(t,r({},e.state,o))},this.handleClick=function(t){e.props.onClick&&e.props.onClick(t),t.stopPropagation&&t.stopPropagation(),t.preventDefault&&t.preventDefault(),e.scrollTo(e.props.to,e.props)},this.stateHandler=function(){n.getActiveLink()!==e.props.to&&(null!==e.state&&e.state.active&&e.props.onSetInactive&&e.props.onSetInactive(),e.setState({active:!1}))},this.spyHandler=function(t){var r=e.getScrollSpyContainer();if(!d.isMounted()||d.isInitialized()){var o=e.props.to,i=null,a=0,s=0,u=0;if(r.getBoundingClientRect&&(u=r.getBoundingClientRect().top),!i||e.props.isDynamic){if(!(i=n.get(o)))return;var c=i.getBoundingClientRect();s=(a=c.top-u+t)+c.height}var f=t-e.props.offset,p=f>=Math.floor(a)&&f<Math.floor(s),h=f<Math.floor(a)||f>=Math.floor(s),m=n.getActiveLink();return h?(o===m&&n.setActiveLink(void 0),e.props.hashSpy&&d.getHash()===o&&d.changeHash(),e.props.spy&&e.state.active&&(e.setState({active:!1}),e.props.onSetInactive&&e.props.onSetInactive()),l.updateStates()):p&&m!==o?(n.setActiveLink(o),e.props.hashSpy&&d.changeHash(o),e.props.spy&&(e.setState({active:!0}),e.props.onSetActive&&e.props.onSetActive(o)),l.updateStates()):void 0}}};return f.propTypes=p,f.defaultProps={offset:0},f},Element:function(e){console.warn("Helpers.Element is deprecated since v1.7.0");var t=function(t){function n(e){i(this,n);var t=a(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.childBindings={domNode:null},t}return s(n,t),o(n,[{key:"componentDidMount",value:function(){if("undefined"==typeof window)return!1;this.registerElems(this.props.name)}},{key:"componentDidUpdate",value:function(e){this.props.name!==e.name&&this.registerElems(this.props.name)}},{key:"componentWillUnmount",value:function(){if("undefined"==typeof window)return!1;c.unregister(this.props.name)}},{key:"registerElems",value:function(e){c.register(e,this.childBindings.domNode)}},{key:"render",value:function(){return u.createElement(e,r({},this.props,{parentBindings:this.childBindings}))}}]),n}(u.Component);return t.propTypes={name:f.string,id:f.string},t}};e.exports=h},3200:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=(s(n(4259)),s(n(9765))),i=s(n(140)),a=s(n(4592));function s(e){return e&&e.__esModule?e:{default:e}}var u=function(e){return o.default[e.smooth]||o.default.defaultEasing},l=function(){if("undefined"!=typeof window)return window.requestAnimationFrame||window.webkitRequestAnimationFrame}()||function(e,t,n){window.setTimeout(e,n||1e3/60,(new Date).getTime())},c=function(e){var t=e.data.containerElement;if(t&&t!==document&&t!==document.body)return t.scrollLeft;var n=void 0!==window.pageXOffset,r="CSS1Compat"===(document.compatMode||"");return n?window.pageXOffset:r?document.documentElement.scrollLeft:document.body.scrollLeft},f=function(e){var t=e.data.containerElement;if(t&&t!==document&&t!==document.body)return t.scrollTop;var n=void 0!==window.pageXOffset,r="CSS1Compat"===(document.compatMode||"");return n?window.pageYOffset:r?document.documentElement.scrollTop:document.body.scrollTop},d=function e(t,n,r){var o=n.data;if(n.ignoreCancelEvents||!o.cancel)if(o.delta=Math.round(o.targetPosition-o.startPosition),null===o.start&&(o.start=r),o.progress=r-o.start,o.percent=o.progress>=o.duration?1:t(o.progress/o.duration),o.currentPosition=o.startPosition+Math.ceil(o.delta*o.percent),o.containerElement&&o.containerElement!==document&&o.containerElement!==document.body?n.horizontal?o.containerElement.scrollLeft=o.currentPosition:o.containerElement.scrollTop=o.currentPosition:n.horizontal?window.scrollTo(o.currentPosition,0):window.scrollTo(0,o.currentPosition),o.percent<1){var i=e.bind(null,t,n);l.call(window,i)}else a.default.registered.end&&a.default.registered.end(o.to,o.target,o.currentPosition);else a.default.registered.end&&a.default.registered.end(o.to,o.target,o.currentPositionY)},p=function(e){e.data.containerElement=e?e.containerId?document.getElementById(e.containerId):e.container&&e.container.nodeType?e.container:document:null},h=function(e,t,n,r){if(t.data=t.data||{currentPosition:0,startPosition:0,targetPosition:0,progress:0,duration:0,cancel:!1,target:null,containerElement:null,to:null,start:null,delta:null,percent:null,delayTimeout:null},window.clearTimeout(t.data.delayTimeout),i.default.subscribe((function(){t.data.cancel=!0})),p(t),t.data.start=null,t.data.cancel=!1,t.data.startPosition=t.horizontal?c(t):f(t),t.data.targetPosition=t.absolute?e:e+t.data.startPosition,t.data.startPosition!==t.data.targetPosition){var o;t.data.delta=Math.round(t.data.targetPosition-t.data.startPosition),t.data.duration=("function"==typeof(o=t.duration)?o:function(){return o})(t.data.delta),t.data.duration=isNaN(parseFloat(t.data.duration))?1e3:parseFloat(t.data.duration),t.data.to=n,t.data.target=r;var s=u(t),h=d.bind(null,s,t);t&&t.delay>0?t.data.delayTimeout=window.setTimeout((function(){a.default.registered.begin&&a.default.registered.begin(t.data.to,t.data.target),l.call(window,h)}),t.delay):(a.default.registered.begin&&a.default.registered.begin(t.data.to,t.data.target),l.call(window,h))}else a.default.registered.end&&a.default.registered.end(t.data.to,t.data.target,t.data.currentPosition)},m=function(e){return(e=r({},e)).data=e.data||{currentPosition:0,startPosition:0,targetPosition:0,progress:0,duration:0,cancel:!1,target:null,containerElement:null,to:null,start:null,delta:null,percent:null,delayTimeout:null},e.absolute=!0,e};t.default={animateTopScroll:h,getAnimationType:u,scrollToTop:function(e){h(0,m(e))},scrollToBottom:function(e){e=m(e),p(e),h(e.horizontal?function(e){var t=e.data.containerElement;if(t&&t!==document&&t!==document.body)return t.scrollWidth-t.offsetWidth;var n=document.body,r=document.documentElement;return Math.max(n.scrollWidth,n.offsetWidth,r.clientWidth,r.scrollWidth,r.offsetWidth)}(e):function(e){var t=e.data.containerElement;if(t&&t!==document&&t!==document.body)return t.scrollHeight-t.offsetHeight;var n=document.body,r=document.documentElement;return Math.max(n.scrollHeight,n.offsetHeight,r.clientHeight,r.scrollHeight,r.offsetHeight)}(e),e)},scrollTo:function(e,t){h(e,m(t))},scrollMore:function(e,t){t=m(t),p(t);var n=t.horizontal?c(t):f(t);h(e+n,t)}}},140:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5236),o=["mousedown","mousewheel","touchmove","keydown"];t.default={subscribe:function(e){return"undefined"!=typeof document&&o.forEach((function(t){return(0,r.addPassiveEventListener)(document,t,e)}))}}},5236:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.addPassiveEventListener=function(e,t,n){var r=function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("test",null,t)}catch(e){}return e}();e.addEventListener(t,n,!!r&&{passive:!0})},t.removePassiveEventListener=function(e,t,n){e.removeEventListener(t,n)}},8e3:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=u(n(7294)),a=(u(n(3935)),u(n(2628))),s=u(n(5697));function u(e){return e&&e.__esModule?e:{default:e}}t.default=function(e){var t=function(t){function n(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n);var t=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(n.__proto__||Object.getPrototypeOf(n)).call(this,e));return t.childBindings={domNode:null},t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,t),o(n,[{key:"componentDidMount",value:function(){if("undefined"==typeof window)return!1;this.registerElems(this.props.name)}},{key:"componentDidUpdate",value:function(e){this.props.name!==e.name&&this.registerElems(this.props.name)}},{key:"componentWillUnmount",value:function(){if("undefined"==typeof window)return!1;a.default.unregister(this.props.name)}},{key:"registerElems",value:function(e){a.default.register(e,this.childBindings.domNode)}},{key:"render",value:function(){return i.default.createElement(e,r({},this.props,{parentBindings:this.childBindings}))}}]),n}(i.default.Component);return t.propTypes={name:s.default.string,id:s.default.string},t}},4592:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={registered:{},scrollEvent:{register:function(e,t){n.registered[e]=t},remove:function(e){n.registered[e]=null}}};t.default=n},9678:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),n(5236);var r,o=(r=n(4259))&&r.__esModule?r:{default:r},i={mountFlag:!1,initialized:!1,scroller:null,containers:{},mount:function(e){this.scroller=e,this.handleHashChange=this.handleHashChange.bind(this),window.addEventListener("hashchange",this.handleHashChange),this.initStateFromHash(),this.mountFlag=!0},mapContainer:function(e,t){this.containers[e]=t},isMounted:function(){return this.mountFlag},isInitialized:function(){return this.initialized},initStateFromHash:function(){var e=this,t=this.getHash();t?window.setTimeout((function(){e.scrollTo(t,!0),e.initialized=!0}),10):this.initialized=!0},scrollTo:function(e,t){var n=this.scroller;if(n.get(e)&&(t||e!==n.getActiveLink())){var r=this.containers[e]||document;n.scrollTo(e,{container:r})}},getHash:function(){return o.default.getHash()},changeHash:function(e,t){this.isInitialized()&&o.default.getHash()!==e&&o.default.updateHash(e,t)},handleHashChange:function(){this.scrollTo(this.getHash())},unmount:function(){this.scroller=null,this.containers=null,window.removeEventListener("hashchange",this.handleHashChange)}};t.default=i},1093:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),i=c(n(7294)),a=c(n(7606)),s=c(n(2628)),u=c(n(5697)),l=c(n(9678));function c(e){return e&&e.__esModule?e:{default:e}}var f={to:u.default.string.isRequired,containerId:u.default.string,container:u.default.object,activeClass:u.default.string,spy:u.default.bool,horizontal:u.default.bool,smooth:u.default.oneOfType([u.default.bool,u.default.string]),offset:u.default.number,delay:u.default.number,isDynamic:u.default.bool,onClick:u.default.func,duration:u.default.oneOfType([u.default.number,u.default.func]),absolute:u.default.bool,onSetActive:u.default.func,onSetInactive:u.default.func,ignoreCancelEvents:u.default.bool,hashSpy:u.default.bool,saveHashHistory:u.default.bool,spyThrottle:u.default.number};t.default=function(e,t){var n=t||s.default,u=function(t){function s(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,s);var t=function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(s.__proto__||Object.getPrototypeOf(s)).call(this,e));return c.call(t),t.state={active:!1},t}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(s,t),o(s,[{key:"getScrollSpyContainer",value:function(){var e=this.props.containerId,t=this.props.container;return e&&!t?document.getElementById(e):t&&t.nodeType?t:document}},{key:"componentDidMount",value:function(){if(this.props.spy||this.props.hashSpy){var e=this.getScrollSpyContainer();a.default.isMounted(e)||a.default.mount(e,this.props.spyThrottle),this.props.hashSpy&&(l.default.isMounted()||l.default.mount(n),l.default.mapContainer(this.props.to,e)),a.default.addSpyHandler(this.spyHandler,e),this.setState({container:e})}}},{key:"componentWillUnmount",value:function(){a.default.unmount(this.stateHandler,this.spyHandler)}},{key:"render",value:function(){var t;t=this.state&&this.state.active?((this.props.className||"")+" "+(this.props.activeClass||"active")).trim():this.props.className;var n=r({},this.props);for(var o in f)n.hasOwnProperty(o)&&delete n[o];return n.className=t,n.onClick=this.handleClick,i.default.createElement(e,n)}}]),s}(i.default.PureComponent),c=function(){var e=this;this.scrollTo=function(t,o){n.scrollTo(t,r({},e.state,o))},this.handleClick=function(t){e.props.onClick&&e.props.onClick(t),t.stopPropagation&&t.stopPropagation(),t.preventDefault&&t.preventDefault(),e.scrollTo(e.props.to,e.props)},this.spyHandler=function(t,r){var o=e.getScrollSpyContainer();if(!l.default.isMounted()||l.default.isInitialized()){var i=e.props.horizontal,a=e.props.to,s=null,u=void 0,c=void 0;if(i){var f=0,d=0,p=0;if(o.getBoundingClientRect&&(p=o.getBoundingClientRect().left),!s||e.props.isDynamic){if(!(s=n.get(a)))return;var h=s.getBoundingClientRect();d=(f=h.left-p+t)+h.width}var m=t-e.props.offset;u=m>=Math.floor(f)&&m<Math.floor(d),c=m<Math.floor(f)||m>=Math.floor(d)}else{var v=0,y=0,g=0;if(o.getBoundingClientRect&&(g=o.getBoundingClientRect().top),!s||e.props.isDynamic){if(!(s=n.get(a)))return;var b=s.getBoundingClientRect();y=(v=b.top-g+r)+b.height}var w=r-e.props.offset;u=w>=Math.floor(v)&&w<Math.floor(y),c=w<Math.floor(v)||w>=Math.floor(y)}var _=n.getActiveLink();if(c){if(a===_&&n.setActiveLink(void 0),e.props.hashSpy&&l.default.getHash()===a){var x=e.props.saveHashHistory,E=void 0!==x&&x;l.default.changeHash("",E)}e.props.spy&&e.state.active&&(e.setState({active:!1}),e.props.onSetInactive&&e.props.onSetInactive(a,s))}if(u&&(_!==a||!1===e.state.active)){n.setActiveLink(a);var k=e.props.saveHashHistory,S=void 0!==k&&k;e.props.hashSpy&&l.default.changeHash(a,S),e.props.spy&&(e.setState({active:!0}),e.props.onSetActive&&e.props.onSetActive(a,s))}}}};return u.propTypes=f,u.defaultProps={offset:0},u}},7606:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r=n(3096))&&r.__esModule?r:{default:r},i=n(5236),a={spyCallbacks:[],spySetState:[],scrollSpyContainers:[],mount:function(e,t){if(e){var n=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:66;return(0,o.default)(e,t)}((function(t){a.scrollHandler(e)}),t);a.scrollSpyContainers.push(e),(0,i.addPassiveEventListener)(e,"scroll",n)}},isMounted:function(e){return-1!==a.scrollSpyContainers.indexOf(e)},currentPositionX:function(e){if(e===document){var t=void 0!==window.pageYOffset,n="CSS1Compat"===(document.compatMode||"");return t?window.pageXOffset:n?document.documentElement.scrollLeft:document.body.scrollLeft}return e.scrollLeft},currentPositionY:function(e){if(e===document){var t=void 0!==window.pageXOffset,n="CSS1Compat"===(document.compatMode||"");return t?window.pageYOffset:n?document.documentElement.scrollTop:document.body.scrollTop}return e.scrollTop},scrollHandler:function(e){(a.scrollSpyContainers[a.scrollSpyContainers.indexOf(e)].spyCallbacks||[]).forEach((function(t){return t(a.currentPositionX(e),a.currentPositionY(e))}))},addStateHandler:function(e){a.spySetState.push(e)},addSpyHandler:function(e,t){var n=a.scrollSpyContainers[a.scrollSpyContainers.indexOf(t)];n.spyCallbacks||(n.spyCallbacks=[]),n.spyCallbacks.push(e),e(a.currentPositionX(t),a.currentPositionY(t))},updateStates:function(){a.spySetState.forEach((function(e){return e()}))},unmount:function(e,t){a.scrollSpyContainers.forEach((function(e){return e.spyCallbacks&&e.spyCallbacks.length&&e.spyCallbacks.splice(e.spyCallbacks.indexOf(t),1)})),a.spySetState&&a.spySetState.length&&a.spySetState.splice(a.spySetState.indexOf(e),1),document.removeEventListener("scroll",a.scrollHandler)},update:function(){return a.scrollSpyContainers.forEach((function(e){return a.scrollHandler(e)}))}};t.default=a},2628:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=s(n(4259)),i=s(n(3200)),a=s(n(4592));function s(e){return e&&e.__esModule?e:{default:e}}var u={},l=void 0;t.default={unmount:function(){u={}},register:function(e,t){u[e]=t},unregister:function(e){delete u[e]},get:function(e){return u[e]||document.getElementById(e)||document.getElementsByName(e)[0]||document.getElementsByClassName(e)[0]},setActiveLink:function(e){return l=e},getActiveLink:function(){return l},scrollTo:function(e,t){var n=this.get(e);if(n){var s=(t=r({},t,{absolute:!1})).containerId,u=t.container,l=void 0;l=s?document.getElementById(s):u&&u.nodeType?u:document,t.absolute=!0;var c=t.horizontal,f=o.default.scrollOffset(l,n,c)+(t.offset||0);if(!t.smooth)return a.default.registered.begin&&a.default.registered.begin(e,n),l===document?t.horizontal?window.scrollTo(f,0):window.scrollTo(0,f):l.scrollTop=f,void(a.default.registered.end&&a.default.registered.end(e,n));i.default.animateTopScroll(f,t,e,n)}else console.warn("target Element not found")}}},9765:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={defaultEasing:function(e){return e<.5?Math.pow(2*e,2)/2:1-Math.pow(2*(1-e),2)/2},linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return e*(2-e)},easeInOutQuad:function(e){return e<.5?2*e*e:(4-2*e)*e-1},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return--e*e*e+1},easeInOutCubic:function(e){return e<.5?4*e*e*e:(e-1)*(2*e-2)*(2*e-2)+1},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return 1- --e*e*e*e},easeInOutQuart:function(e){return e<.5?8*e*e*e*e:1-8*--e*e*e*e},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return 1+--e*e*e*e*e},easeInOutQuint:function(e){return e<.5?16*e*e*e*e*e:1+16*--e*e*e*e*e}}},4259:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n=function(e,t){for(var n=e.offsetTop,r=e.offsetParent;r&&!t(r);)n+=r.offsetTop,r=r.offsetParent;return{offsetTop:n,offsetParent:r}};t.default={updateHash:function(e,t){var n=0===e.indexOf("#")?e.substring(1):e,r=n?"#"+n:"",o=window&&window.location,i=r?o.pathname+o.search+r:o.pathname+o.search;t?history.pushState(null,"",i):history.replaceState(null,"",i)},getHash:function(){return window.location.hash.replace(/^#/,"")},filterElementInContainer:function(e){return function(t){return e.contains?e!=t&&e.contains(t):!!(16&e.compareDocumentPosition(t))}},scrollOffset:function(e,t,r){if(r)return e===document?t.getBoundingClientRect().left+(window.scrollX||window.pageXOffset):"static"!==getComputedStyle(e).position?t.offsetLeft:t.offsetLeft-e.offsetLeft;if(e===document)return t.getBoundingClientRect().top+(window.scrollY||window.pageYOffset);if("static"!==getComputedStyle(e).position){if(t.offsetParent!==e){var o=n(t,(function(t){return t===e||t===document})),i=o.offsetTop;if(o.offsetParent!==e)throw new Error("Seems containerElement is not an ancestor of the Element");return i}return t.offsetTop}if(t.offsetParent===e.offsetParent)return t.offsetTop-e.offsetTop;var a=function(e){return e===document};return n(t,a).offsetTop-n(e,a).offsetTop}}},2408:(e,t,n)=>{"use strict";var r=n(7418),o=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,u=60112;t.Suspense=60113;var l=60115,c=60116;if("function"==typeof Symbol&&Symbol.for){var f=Symbol.for;o=f("react.element"),i=f("react.portal"),t.Fragment=f("react.fragment"),t.StrictMode=f("react.strict_mode"),t.Profiler=f("react.profiler"),a=f("react.provider"),s=f("react.context"),u=f("react.forward_ref"),t.Suspense=f("react.suspense"),l=f("react.memo"),c=f("react.lazy")}var d="function"==typeof Symbol&&Symbol.iterator;function p(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var h={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function v(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||h}v.prototype.isReactComponent={},v.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(p(85));this.updater.enqueueSetState(this,e,t,"setState")},v.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=v.prototype;var b=g.prototype=new y;b.constructor=g,r(b,v.prototype),b.isPureReactComponent=!0;var w={current:null},_=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var r,i={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)_.call(t,r)&&!x.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var l=Array(u),c=0;c<u;c++)l[c]=arguments[c+2];i.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:s,props:i,_owner:w.current}}function k(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var S=/\/+/g;function C(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var u=!1;if(null===e)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case o:case i:u=!0}}if(u)return a=a(u=e),e=""===r?"."+C(u,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(S,"$&/")+"/"),P(a,t,n,"",(function(e){return e}))):null!=a&&(k(a)&&(a=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||u&&u.key===a.key?"":(""+a.key).replace(S,"$&/")+"/")+e)),t.push(a)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var l=0;l<e.length;l++){var c=r+C(s=e[l],l);u+=P(s,t,n,c,a)}else if(c=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=d&&e[d]||e["@@iterator"])?e:null}(e),"function"==typeof c)for(e=c.call(e),l=0;!(s=e.next()).done;)u+=P(s=s.value,t,n,c=r+C(s,l++),a);else if("object"===s)throw t=""+e,Error(p(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function O(e,t,n){if(null==e)return e;var r=[],o=0;return P(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function T(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var M={current:null};function A(){var e=M.current;if(null===e)throw Error(p(321));return e}var R={ReactCurrentDispatcher:M,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:w,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:O,forEach:function(e,t,n){O(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return O(e,(function(){t++})),t},toArray:function(e){return O(e,(function(e){return e}))||[]},only:function(e){if(!k(e))throw Error(p(143));return e}},t.Component=v,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=R,t.cloneElement=function(e,t,n){if(null==e)throw Error(p(267,e));var i=r({},e.props),a=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=w.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(c in t)_.call(t,c)&&!x.hasOwnProperty(c)&&(i[c]=void 0===t[c]&&void 0!==l?l[c]:t[c])}var c=arguments.length-2;if(1===c)i.children=n;else if(1<c){l=Array(c);for(var f=0;f<c;f++)l[f]=arguments[f+2];i.children=l}return{$$typeof:o,type:e.type,key:a,ref:s,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=k,t.lazy=function(e){return{$$typeof:c,_payload:{_status:-1,_result:e},_init:T}},t.memo=function(e,t){return{$$typeof:l,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return A().useCallback(e,t)},t.useContext=function(e,t){return A().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return A().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return A().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return A().useLayoutEffect(e,t)},t.useMemo=function(e,t){return A().useMemo(e,t)},t.useReducer=function(e,t,n){return A().useReducer(e,t,n)},t.useRef=function(e){return A().useRef(e)},t.useState=function(e){return A().useState(e)},t.version="17.0.2"},7294:(e,t,n)=>{"use strict";e.exports=n(2408)},8500:(e,t,n)=>{"use strict";var r=n(5857).compose;t.__esModule=!0,t.composeWithDevTools="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__?window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__:function(){if(0!==arguments.length)return"object"==typeof arguments[0]?r:r.apply(null,arguments)},t.devToolsEnhancer="undefined"!=typeof window&&window.__REDUX_DEVTOOLS_EXTENSION__?window.__REDUX_DEVTOOLS_EXTENSION__:function(){return function(e){return e}}},5857:(e,t,n)=>{"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e){return"Minified Redux error #"+e+"; visit https://redux.js.org/Errors?code="+e+" for the full message or use the non-minified dev environment for full errors. "}n.r(t),n.d(t,{__DO_NOT_USE__ActionTypes:()=>l,applyMiddleware:()=>v,bindActionCreators:()=>h,combineReducers:()=>d,compose:()=>m,createStore:()=>f});var s="function"==typeof Symbol&&Symbol.observable||"@@observable",u=function(){return Math.random().toString(36).substring(7).split("").join(".")},l={INIT:"@@redux/INIT"+u(),REPLACE:"@@redux/REPLACE"+u(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+u()}};function c(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function f(e,t,n){var r;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error(a(0));if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error(a(1));return n(f)(e,t)}if("function"!=typeof e)throw new Error(a(2));var o=e,i=t,u=[],d=u,p=!1;function h(){d===u&&(d=u.slice())}function m(){if(p)throw new Error(a(3));return i}function v(e){if("function"!=typeof e)throw new Error(a(4));if(p)throw new Error(a(5));var t=!0;return h(),d.push(e),function(){if(t){if(p)throw new Error(a(6));t=!1,h();var n=d.indexOf(e);d.splice(n,1),u=null}}}function y(e){if(!c(e))throw new Error(a(7));if(void 0===e.type)throw new Error(a(8));if(p)throw new Error(a(9));try{p=!0,i=o(i,e)}finally{p=!1}for(var t=u=d,n=0;n<t.length;n++)(0,t[n])();return e}function g(e){if("function"!=typeof e)throw new Error(a(10));o=e,y({type:l.REPLACE})}function b(){var e,t=v;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new Error(a(11));function n(){e.next&&e.next(m())}return n(),{unsubscribe:t(n)}}})[s]=function(){return this},e}return y({type:l.INIT}),(r={dispatch:y,subscribe:v,getState:m,replaceReducer:g})[s]=b,r}function d(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,s=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:l.INIT}))throw new Error(a(12));if(void 0===n(void 0,{type:l.PROBE_UNKNOWN_ACTION()}))throw new Error(a(13))}))}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<s.length;u++){var l=s[u],c=n[l],f=e[l],d=c(f,t);if(void 0===d)throw t&&t.type,new Error(a(14));o[l]=d,r=r||d!==f}return(r=r||s.length!==Object.keys(e).length)?o:e}}function p(e,t){return function(){return t(e.apply(this,arguments))}}function h(e,t){if("function"==typeof e)return p(e,t);if("object"!=typeof e||null===e)throw new Error(a(16));var n={};for(var r in e){var o=e[r];"function"==typeof o&&(n[r]=p(o,t))}return n}function m(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error(a(15))},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},s=t.map((function(e){return e(o)}));return r=m.apply(void 0,s)(n.dispatch),i(i({},n),{},{dispatch:r})}}}},53:(e,t)=>{"use strict";var n,r,o,i;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,u=s.now();t.unstable_now=function(){return s.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,f=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(f,0),e}};n=function(e){null!==l?setTimeout(n,0,e):(l=e,setTimeout(f,0))},r=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var d=window.setTimeout,p=window.clearTimeout;if("undefined"!=typeof console){var h=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof h&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var m=!1,v=null,y=-1,g=5,b=0;t.unstable_shouldYield=function(){return t.unstable_now()>=b},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var w=new MessageChannel,_=w.port2;w.port1.onmessage=function(){if(null!==v){var e=t.unstable_now();b=e+g;try{v(!0,e)?_.postMessage(null):(m=!1,v=null)}catch(e){throw _.postMessage(null),e}}else m=!1},n=function(e){v=e,m||(m=!0,_.postMessage(null))},r=function(e,n){y=d((function(){e(t.unstable_now())}),n)},o=function(){p(y),y=-1}}function x(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,o=e[r];if(!(void 0!==o&&0<S(o,t)))break e;e[r]=t,e[n]=o,n=r}}function E(e){return void 0===(e=e[0])?null:e}function k(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length;r<o;){var i=2*(r+1)-1,a=e[i],s=i+1,u=e[s];if(void 0!==a&&0>S(a,n))void 0!==u&&0>S(u,a)?(e[r]=u,e[s]=n,r=s):(e[r]=a,e[i]=n,r=i);else{if(!(void 0!==u&&0>S(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var C=[],P=[],O=1,T=null,M=3,A=!1,R=!1,j=!1;function N(e){for(var t=E(P);null!==t;){if(null===t.callback)k(P);else{if(!(t.startTime<=e))break;k(P),t.sortIndex=t.expirationTime,x(C,t)}t=E(P)}}function L(e){if(j=!1,N(e),!R)if(null!==E(C))R=!0,n(F);else{var t=E(P);null!==t&&r(L,t.startTime-e)}}function F(e,n){R=!1,j&&(j=!1,o()),A=!0;var i=M;try{for(N(n),T=E(C);null!==T&&(!(T.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=T.callback;if("function"==typeof a){T.callback=null,M=T.priorityLevel;var s=a(T.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?T.callback=s:T===E(C)&&k(C),N(n)}else k(C);T=E(C)}if(null!==T)var u=!0;else{var l=E(P);null!==l&&r(L,l.startTime-n),u=!1}return u}finally{T=null,M=i,A=!1}}var I=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){R||A||(R=!0,n(F))},t.unstable_getCurrentPriorityLevel=function(){return M},t.unstable_getFirstCallbackNode=function(){return E(C)},t.unstable_next=function(e){switch(M){case 1:case 2:case 3:var t=3;break;default:t=M}var n=M;M=t;try{return e()}finally{M=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=I,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=M;M=e;try{return t()}finally{M=n}},t.unstable_scheduleCallback=function(e,i,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:O++,callback:i,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>s?(e.sortIndex=a,x(P,e),null===E(C)&&e===E(P)&&(j?o():j=!0,r(L,a-s))):(e.sortIndex=u,x(C,e),R||A||(R=!0,n(F))),e},t.unstable_wrapCallback=function(e){var t=M;return function(){var n=M;M=t;try{return e.apply(this,arguments)}finally{M=n}}}},3840:(e,t,n)=>{"use strict";e.exports=n(53)},3669:(e,t,n)=>{t.formatArgs=function(t){if(t[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+t[0]+(this.useColors?"%c ":" ")+"+"+e.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;t.splice(1,0,n,"color: inherit");let r=0,o=0;t[0].replace(/%[a-zA-Z%]/g,(e=>{"%%"!==e&&(r++,"%c"===e&&(o=r))})),t.splice(o,0,n)},t.save=function(e){try{e?t.storage.setItem("debug",e):t.storage.removeItem("debug")}catch(e){}},t.load=function(){let e;try{e=t.storage.getItem("debug")}catch(e){}return!e&&"undefined"!=typeof process&&"env"in process&&(e=process.env.DEBUG),e},t.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},t.storage=function(){try{return localStorage}catch(e){}}(),t.destroy=(()=>{let e=!1;return()=>{e||(e=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),t.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],t.log=console.debug||console.log||(()=>{}),e.exports=n(9231)(t);const{formatters:r}=e.exports;r.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}}},9231:(e,t,n)=>{e.exports=function(e){function t(e){let n,o,i,a=null;function s(...e){if(!s.enabled)return;const r=s,o=Number(new Date),i=o-(n||o);r.diff=i,r.prev=n,r.curr=o,n=o,e[0]=t.coerce(e[0]),"string"!=typeof e[0]&&e.unshift("%O");let a=0;e[0]=e[0].replace(/%([a-zA-Z%])/g,((n,o)=>{if("%%"===n)return"%";a++;const i=t.formatters[o];if("function"==typeof i){const t=e[a];n=i.call(r,t),e.splice(a,1),a--}return n})),t.formatArgs.call(r,e),(r.log||t.log).apply(r,e)}return s.namespace=e,s.useColors=t.useColors(),s.color=t.selectColor(e),s.extend=r,s.destroy=t.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(o!==t.namespaces&&(o=t.namespaces,i=t.enabled(e)),i),set:e=>{a=e}}),"function"==typeof t.init&&t.init(s),s}function r(e,n){const r=t(this.namespace+(void 0===n?":":n)+e);return r.log=this.log,r}function o(e){return e.toString().substring(2,e.toString().length-2).replace(/\.\*\?$/,"*")}return t.debug=t,t.default=t,t.coerce=function(e){return e instanceof Error?e.stack||e.message:e},t.disable=function(){const e=[...t.names.map(o),...t.skips.map(o).map((e=>"-"+e))].join(",");return t.enable(""),e},t.enable=function(e){let n;t.save(e),t.namespaces=e,t.names=[],t.skips=[];const r=("string"==typeof e?e:"").split(/[\s,]+/),o=r.length;for(n=0;n<o;n++)r[n]&&("-"===(e=r[n].replace(/\*/g,".*?"))[0]?t.skips.push(new RegExp("^"+e.substr(1)+"$")):t.names.push(new RegExp("^"+e+"$")))},t.enabled=function(e){if("*"===e[e.length-1])return!0;let n,r;for(n=0,r=t.skips.length;n<r;n++)if(t.skips[n].test(e))return!1;for(n=0,r=t.names.length;n<r;n++)if(t.names[n].test(e))return!0;return!1},t.humanize=n(4241),t.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(e).forEach((n=>{t[n]=e[n]})),t.names=[],t.skips=[],t.formatters={},t.selectColor=function(e){let n=0;for(let t=0;t<e.length;t++)n=(n<<5)-n+e.charCodeAt(t),n|=0;return t.colors[Math.abs(n)%t.colors.length]},t.enable(t.load()),t}},4241:e=>{var t=1e3,n=60*t,r=60*n,o=24*r;function i(e,t,n,r){var o=t>=1.5*n;return Math.round(e/n)+" "+r+(o?"s":"")}e.exports=function(e,a){a=a||{};var s,u,l=typeof e;if("string"===l&&e.length>0)return function(e){if(!((e=String(e)).length>100)){var i=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(e);if(i){var a=parseFloat(i[1]);switch((i[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return 6048e5*a;case"days":case"day":case"d":return a*o;case"hours":case"hour":case"hrs":case"hr":case"h":return a*r;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*t;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(e);if("number"===l&&isFinite(e))return a.long?(s=e,(u=Math.abs(s))>=o?i(s,u,o,"day"):u>=r?i(s,u,r,"hour"):u>=n?i(s,u,n,"minute"):u>=t?i(s,u,t,"second"):s+" ms"):function(e){var i=Math.abs(e);return i>=o?Math.round(e/o)+"d":i>=r?Math.round(e/r)+"h":i>=n?Math.round(e/n)+"m":i>=t?Math.round(e/t)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},3573:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const n=(e,t)=>n=>Math.max(Math.min(n,t),e),r=e=>e%1?Number(e.toFixed(5)):e,o=/(-)?([\d]*\.?[\d])+/g,i=/(#[0-9a-f]{6}|#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))/gi,a=/^(#[0-9a-f]{3}|#(?:[0-9a-f]{2}){2,4}|(rgb|hsl)a?\((-?[\d\.]+%?[,\s]+){2,3}\s*\/*\s*[\d\.]+%?\))$/i;function s(e){return"string"==typeof e}const u={test:e=>"number"==typeof e,parse:parseFloat,transform:e=>e},l=Object.assign(Object.assign({},u),{transform:n(0,1)}),c=Object.assign(Object.assign({},u),{default:1}),f=e=>({test:t=>s(t)&&t.endsWith(e)&&1===t.split(" ").length,parse:parseFloat,transform:t=>`${t}${e}`}),d=f("deg"),p=f("%"),h=f("px"),m=f("vh"),v=f("vw"),y=Object.assign(Object.assign({},p),{parse:e=>p.parse(e)/100,transform:e=>p.transform(100*e)}),g=(e,t)=>n=>Boolean(s(n)&&a.test(n)&&n.startsWith(e)||t&&Object.prototype.hasOwnProperty.call(n,t)),b=(e,t,n)=>r=>{if(!s(r))return r;const[i,a,u,l]=r.match(o);return{[e]:parseFloat(i),[t]:parseFloat(a),[n]:parseFloat(u),alpha:void 0!==l?parseFloat(l):1}},w={test:g("hsl","hue"),parse:b("hue","saturation","lightness"),transform:({hue:e,saturation:t,lightness:n,alpha:o=1})=>"hsla("+Math.round(e)+", "+p.transform(r(t))+", "+p.transform(r(n))+", "+r(l.transform(o))+")"},_=n(0,255),x=Object.assign(Object.assign({},u),{transform:e=>Math.round(_(e))}),E={test:g("rgb","red"),parse:b("red","green","blue"),transform:({red:e,green:t,blue:n,alpha:o=1})=>"rgba("+x.transform(e)+", "+x.transform(t)+", "+x.transform(n)+", "+r(l.transform(o))+")"},k={test:g("#"),parse:function(e){let t="",n="",r="",o="";return e.length>5?(t=e.substr(1,2),n=e.substr(3,2),r=e.substr(5,2),o=e.substr(7,2)):(t=e.substr(1,1),n=e.substr(2,1),r=e.substr(3,1),o=e.substr(4,1),t+=t,n+=n,r+=r,o+=o),{red:parseInt(t,16),green:parseInt(n,16),blue:parseInt(r,16),alpha:o?parseInt(o,16)/255:1}},transform:E.transform},S={test:e=>E.test(e)||k.test(e)||w.test(e),parse:e=>E.test(e)?E.parse(e):w.test(e)?w.parse(e):k.parse(e),transform:e=>s(e)?e:e.hasOwnProperty("red")?E.transform(e):w.transform(e)},C="${c}",P="${n}";function O(e){"number"==typeof e&&(e=`${e}`);const t=[];let n=0;const r=e.match(i);r&&(n=r.length,e=e.replace(i,C),t.push(...r.map(S.parse)));const a=e.match(o);return a&&(e=e.replace(o,P),t.push(...a.map(u.parse))),{values:t,numColors:n,tokenised:e}}function T(e){return O(e).values}function M(e){const{values:t,numColors:n,tokenised:o}=O(e),i=t.length;return e=>{let t=o;for(let o=0;o<i;o++)t=t.replace(o<n?C:P,o<n?S.transform(e[o]):r(e[o]));return t}}const A=e=>"number"==typeof e?0:e,R={test:function(e){var t,n,r,a;return isNaN(e)&&s(e)&&(null!==(n=null===(t=e.match(o))||void 0===t?void 0:t.length)&&void 0!==n?n:0)+(null!==(a=null===(r=e.match(i))||void 0===r?void 0:r.length)&&void 0!==a?a:0)>0},parse:T,createTransformer:M,getAnimatableNone:function(e){const t=T(e);return M(e)(t.map(A))}},j=new Set(["brightness","contrast","saturate","opacity"]);function N(e){let[t,n]=e.slice(0,-1).split("(");if("drop-shadow"===t)return e;const[r]=n.match(o)||[];if(!r)return e;const i=n.replace(r,"");let a=j.has(t)?1:0;return r!==n&&(a*=100),t+"("+a+i+")"}const L=/([a-z-]*)\(.*?\)/g,F=Object.assign(Object.assign({},R),{getAnimatableNone:e=>{const t=e.match(L);return t?t.map(N).join(" "):e}});t.alpha=l,t.color=S,t.complex=R,t.degrees=d,t.filter=F,t.hex=k,t.hsla=w,t.number=u,t.percent=p,t.progressPercentage=y,t.px=h,t.rgbUnit=x,t.rgba=E,t.scale=c,t.vh=m,t.vw=v},8913:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default={serverUrl:"https://chronosrv.glitch.me/"}},7914:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Cover=void 0;var o=r(n(7294)),i=n(6431);t.Cover=function(){return o.default.createElement("div",{className:"h-96 bg-secondary"},o.default.createElement(i.motion.div,{initial:{opacity:0,x:"100vw"},animate:{opacity:1,x:"0"},transition:{type:"spring",duration:.1,stiffness:500,damping:50},className:"absolute w-full grid place-items-end h-96"},o.default.createElement("img",{className:"h-36 sm:h-52 md:h-72 pixel text-subcontrast",src:"./view/public/chrono.png",alt:"Chrono"})),o.default.createElement(i.motion.div,{initial:{opacity:0,x:"100vw"},animate:{opacity:1,x:"0"},transition:{type:"spring",duration:.5,stiffness:500,damping:25},className:"text-contrast font-bold  text-4xl sm:text-6xl text-center px-0 py-24 sm:px-24"},"<ChronoAero/>"),o.default.createElement(i.motion.div,{initial:{opacity:0,x:"-100vw"},animate:{opacity:1,x:"0"},transition:{type:"spring",duration:.5,stiffness:500,damping:25},className:"px-12 py-24 sm:px-24"},o.default.createElement("img",{className:"rounded-xl shadow-lg",src:"https://avatars.githubusercontent.com/u/75560157?v=4",alt:"Profile Picture"})))}},5140:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.EquationGen=void 0;var o=r(n(7294)),i=n(8928);t.EquationGen=function(){var e=(0,i.useSelector)((function(e){return e.equation})),t=(0,i.useDispatch)(),n=function(){function e(){return Math.floor(20*Math.random()-10)||1}var t=[e(),e(),e()];function n(e,t){var n="".concat(t);return 1!=t&&-1!=t||(n=n.replace(/1/g,"")),e||t<0?n:"+".concat(n)}for(var r=["x","y","z"],i=[],a=0;a<3;a++){for(var s=[e(),e(),e()],u=0,l="",c=0;c<3;c++)u+=s[c]*t[c],l+="".concat(n(0==c,s[c])).concat(r[c]);l+=" = ".concat(u,"\n"),i[a]=o.default.createElement("div",{key:a},l)}return i};return o.default.createElement("div",{className:"flex gap-12"},o.default.createElement("div",{className:"flex-1"},o.default.createElement("div",{className:"font-bold"},"Equation Generator"),o.default.createElement("div",null,"Generates a three variable linear equation, I use this myself for my test practice once. I like to solve my school problems with coding sometimes"),o.default.createElement("div",{className:"grid place-items-center",onClick:function(){return t({type:"showcase/equation_rendr",payload:n()})}},o.default.createElement("button",{className:"my-5 px-5 py-2 bg-subcontrast text-white rounded-md"},"Generate!"))),o.default.createElement("div",{className:"flex-1"},o.default.createElement("div",null,"Result:"),e))}},9180:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Navbar=void 0;var o=r(n(7294)),i=n(7628);t.Navbar=function(){return o.default.createElement("div",{className:"h-12 shadow-lg flex items-center bg-primary overflow-x-auto overflow-y-hidden"},o.default.createElement(i.SpeedScroll,{text:"About Me",id:"aboutme"}),o.default.createElement(i.SpeedScroll,{text:"Prologue",id:"prologue"}),o.default.createElement(i.SpeedScroll,{text:"Doing",id:"doing"}),o.default.createElement(i.SpeedScroll,{text:"Plans",id:"plans"}),o.default.createElement(i.SpeedScroll,{text:"Showcase",id:"showcase"}),o.default.createElement(i.SpeedScroll,{text:"Contacts",id:"contacts"}))}},5317:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Section=void 0;var o=n(6431),i=r(n(7294));t.Section=function(e){return i.default.createElement("div",{className:"flex flex-col-reverse items-stretch ".concat(e.right?"sm:flex-row-reverse":"sm:flex-row")},i.default.createElement(o.motion.div,{initial:{opacity:0,x:"-150px"},whileInView:{opacity:1,x:"0"},transition:{type:"spring",duration:1,stiffness:500,damping:25},viewport:{once:!0},className:"flex-[5]"},i.default.createElement("div",{className:"font-bold text-3xl p-1 py-6 text-subcontrast ".concat(e.id)},e.title),e.desc.map((function(e,t){return i.default.createElement("div",{key:t,className:"p-1 text-subcontrast"},e)}))),i.default.createElement(o.motion.div,{initial:{opacity:0,scale:.3},whileInView:{opacity:1,scale:1},transition:{ease:"easeOut",duration:.5},viewport:{once:!0},className:"flex-[3] p-4 grid place-items-center"},i.default.createElement("img",{className:"rounded-xl w-full max-w-xs text-subcontrast pixel",src:e.img,alt:e.alt})))}},4228:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.Showcase=void 0;var a=i(n(7294)),s=n(7458),u=n(8928),l=n(5140),c=n(6192),f=n(6431),d=n(7195),p=["showcase/equation_gen","showcase/webhook","showcase/videocall"],h=["Equation Generator","Webhook","Video Call"],m=["|","/","-","\\"];t.Showcase=function(e){var t=(0,u.useSelector)((function(e){return e.page})),n=(0,u.useSelector)((function(e){return e.spinner})),r=(0,u.useDispatch)();return(0,a.useEffect)((function(){var e=setInterval((function(){r({type:"showcase/spin"})}),100);return function(){return clearInterval(e)}}),[]),a.default.createElement("div",null,a.default.createElement(f.motion.div,{initial:{opacity:0,x:"-150px"},whileInView:{opacity:1,x:"0"},transition:{type:"spring",duration:1,stiffness:500,damping:25},viewport:{once:!0},className:"p-1 text-subcontrast font-bold"},"Web-Related"),a.default.createElement(f.motion.div,{initial:{opacity:0,x:"-150px"},whileInView:{opacity:1,x:"0"},transition:{type:"spring",duration:1,stiffness:500,damping:25},viewport:{once:!0},className:"bg-secondary flex flex-row h-12 items-center mx-1 p-1 overflow-x-auto overflow-y-hidden"},p.map((function(e,t){return a.default.createElement(f.motion.button,{whileHover:{scale:1.05},whileTap:{scale:.95},initial:{opacity:0,y:"-50px"},animate:{opacity:1,y:"0"},transition:{type:"spring",duration:.5,stiffness:500,damping:25},key:t,onClick:function(){r({type:e})},className:"text-subcontrast p-5 hover:text-contrast w-auto whitespace-nowrap"},h[t])}))),a.default.createElement(f.motion.div,{initial:{opacity:0,scale:.3},whileInView:{opacity:1,scale:1},transition:{ease:"easeOut",duration:.5},viewport:{once:!0},className:"bg-secondary h-56 rounded-md my-5 mx-1 p-5 overflow-y-auto"},a.default.createElement("div",{className:"text-subcontrast font-mono"},function(e){switch(e){case s.Pages.EQUATION_GEN:return a.default.createElement(l.EquationGen,null);case s.Pages.WEBHOOK:return a.default.createElement(c.Webhook,null);case s.Pages.VIDEOCALL:return a.default.createElement(d.UnderConstruction,null);default:return a.default.createElement("div",null,"Shell is ready, waiting for your commands...",a.default.createElement("span",{className:"text-symbols"},m[n]))}}(t))),a.default.createElement(f.motion.div,{initial:{opacity:0,x:"-150px"},whileInView:{opacity:1,x:"0"},transition:{type:"spring",duration:1,stiffness:500,damping:25},viewport:{once:!0},className:"p-1 text-subcontrast font-bold"},"In for a challenge?"),a.default.createElement(f.motion.div,{initial:{opacity:0,scale:.3},whileInView:{opacity:1,scale:1},transition:{ease:"easeOut",duration:.5},viewport:{once:!0},className:"bg-secondary h-56 rounded-md my-5 mx-1 p-5 overflow-y-auto"},a.default.createElement(d.UnderConstruction,null)),a.default.createElement(f.motion.div,{initial:{opacity:0,x:"-150px"},whileInView:{opacity:1,x:"0"},transition:{type:"spring",duration:1,stiffness:500,damping:25},viewport:{once:!0},className:"p-1 text-subcontrast font-bold"},"Game Development"),a.default.createElement(f.motion.div,{initial:{opacity:0,scale:.3},whileInView:{opacity:1,scale:1},transition:{ease:"easeOut",duration:.5},viewport:{once:!0},className:"bg-secondary h-56 rounded-md my-5 mx-1 p-5 overflow-y-auto"},a.default.createElement(d.UnderConstruction,null)))}},7628:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.SpeedScroll=void 0;var o=r(n(7294)),i=n(6261),a=n(6431);t.SpeedScroll=function(e){return o.default.createElement(a.motion.button,{whileHover:{scale:1.05},whileTap:{scale:.95},initial:{opacity:0,y:"-50px"},animate:{opacity:1,y:"0"},transition:{type:"spring",duration:.5,stiffness:500,damping:25},className:"p-5 text-subcontrast hover:text-contrast whitespace-nowrap",onClick:function(){i.scroller.scrollTo(e.id,{duration:800,delay:0,smooth:"easeInOutQuart"})}},e.text)}},7195:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.UnderConstruction=void 0;var o=r(n(7294));t.UnderConstruction=function(){return o.default.createElement("div",{className:"grid place-items-center"},o.default.createElement("div",{className:"grid place-content-center"},o.default.createElement("img",{className:"text-subcontrast h-40 p-6 pixel",src:"./view/public/construction.png",alt:"Construction Image"})),o.default.createElement("div",{className:"text-subcontrast font-mono"},"This section is under development... I'll make it available soon"))}},6192:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Webhook=void 0;var o=r(n(7294)),i=n(8928);t.Webhook=function(){var e=(0,i.useDispatch)(),t=(0,i.useSelector)((function(e){return e.socket})),n=(0,i.useSelector)((function(e){return e.requests}));return(0,i.useSelector)((function(e){return e.setupDone}))||(t.on("webhook/request_data",(function(t){e({type:"showcase/append_requests",payload:t})})),e({type:"showcase/socket_setup"})),o.default.createElement("div",{className:"flex gap-12"},o.default.createElement("div",{className:"flex-1"},"Send your request to http://localhost:4201/webhook/",t.id),o.default.createElement("div",{className:"flex-1"},"Incoming Request(s):",n.map((function(e,t){return o.default.createElement("div",{className:"p-5",key:t},o.default.createElement("div",null,"The shell received a ",e.method||""," request!"),o.default.createElement("div",null,o.default.createElement("div",null,"Headers:"),o.default.createElement("div",null,"Content-Type: ",e.headers["content-type"]||"Not sent"),o.default.createElement("div",null,"Content-Length: ",e.headers["content-length"]||"Not sent")),o.default.createElement("div",null,o.default.createElement("div",null,"Body:"),o.default.createElement("div",null,JSON.stringify(e.body)),"{}"===JSON.stringify(e.body)?o.default.createElement("div",null,"The shell doesn't seem to support your content-type, it supports JSON and url enconded only..."):o.default.createElement(o.default.Fragment,null)))}))))}},1095:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.rootStore=void 0;var o=r(n(7294)),i=r(n(3935)),a=n(5857),s=n(8500),u=n(7458),l=n(8928),c=n(7914),f=n(9180),d=n(5317),p=n(4228),h=n(6431);t.rootStore=(0,a.createStore)(u.showcaseReducer,(0,s.composeWithDevTools)()),i.default.render(o.default.createElement((function(){return o.default.createElement("div",{className:"overflow-x-hidden"},o.default.createElement(f.Navbar,null),o.default.createElement(c.Cover,null),o.default.createElement("div",{className:"px-6 py-24 sm:px-24 bg-primary shadow-lg"},o.default.createElement(d.Section,{img:"./view/public/chrono_code.png",alt:"Coding chrono",right:!0,id:"aboutme",title:"About Me",desc:[o.default.createElement(o.default.Fragment,null,"I'm a high school student and simply a ",o.default.createElement("del",null,"hacker")," programmer"),"I've been working and experimenting around the amazing field of programming since junior high school.","I'm someone with a rather calm and serious nature that helps me to be a better listener when it comes to projects and urges me to try my best on delivering my work output.","I might not be that really extroverted one, but I'm open to programming discussions. Since you reach me out this way, this means we should understand each other well.","Looking forward to working together with you."]})),o.default.createElement("div",{className:"px-6 py-24 sm:px-24 bg-secondary shadow-lg"},o.default.createElement(d.Section,{img:"./view/public/chrono_packages.png",alt:"Chrono carries packages",right:!1,id:"prologue",title:"How I Started",desc:["It started from my interest towards games, and I once wanted to make one myself.","I, well, accidentally, learnt JavaScript and got my hands into the basics of programming a few years ago. It wasn't something I expected to work with though, at the time, and I started learning about game development instead of more JavaScript. During the process I've learnt more about the basic concepts of programming languages (e.g. types).","However, then I got somewhat sidetracked to web development due to some stuff related to making bots, but that just expanded the area I can experiment around, and I ended up here."]})),o.default.createElement("div",{className:"px-6 py-24 sm:px-24 bg-primary shadow-lg"},o.default.createElement(d.Section,{img:"./view/public/chrono_work.png",alt:"Chrono at work",right:!0,id:"doing",title:"Currently Working on...",desc:["Currently, I'm still learning as a high school student. I enjoy learning subjects taught at school. Some even helped me to build my programming logic, especially mathematics, and their science manifestations (physics and chemistry for example).","Learning is a never ending process, there is still a lot to learn even when you think you have learnt a lot, there is just always something new.","Same thing happens when I learn to code, there's just stuff related to syntax, algorithm efficiency, and much more, and if you ever work with installed modules, you know what I've mentioned is not the end, and I'm excited to learn more.","Currently I am learning about web related things (it of course revolves around JavaScript), and sometimes, game development. I'm also excited to learn other fields of programming as well.","So far, I just enjoy what I do."]})),o.default.createElement("div",{className:"px-6 py-24 sm:px-24 bg-secondary shadow-lg"},o.default.createElement(d.Section,{img:"./view/public/chrono_git.png",alt:"Chrono managing version control",right:!1,id:"plans",title:"Planning on...",desc:["I just plan to keep learning to code, and I hope I can find an interesting field that I can work on in the future.","I also wish I actually can collaborate with others on something, to at least understand more about conventions when people work together.","Also, due to my initial motivation, I'm hoping that I can really finish a game (trust me, I'm trying)."]})),o.default.createElement("div",{className:"px-6 py-24 sm:px-24 bg-primary shadow-lg"},o.default.createElement(h.motion.div,{initial:{opacity:0,x:"-150px"},whileInView:{opacity:1,x:"0"},transition:{type:"spring",duration:1,stiffness:500,damping:25},viewport:{once:!0},className:"font-bold text-3xl p-1 py-6 text-subcontrast showcase"},"Showcase"),o.default.createElement(l.Provider,{store:t.rootStore},o.default.createElement(p.Showcase,null))),o.default.createElement("div",{className:"px-6 py-24 sm:px-24 bg-secondary shadow-lg"},o.default.createElement(d.Section,{img:"./view/public/chrono_contacts.png",alt:"Chrono holding a letter",right:!0,id:"contacts",title:"Want to reach me out?",desc:["Let me know if you want to work on something together :)","Here are my contacts:",'{Discord: "Chrono#9327", Github: "ChronoAero", Email: "tanjoshua13tj@gmail.com"}']})))}),null),document.getElementById("root"))},7458:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},r.apply(this,arguments)},o=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,o=0,i=t.length;o<i;o++)!r&&o in t||(r||(r=Array.prototype.slice.call(t,0,o)),r[o]=t[o]);return e.concat(r||Array.prototype.slice.call(t))},i=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.showcaseReducer=t.Pages=void 0;var a,s=n(7046),u=i(n(8913));!function(e){e[e.NULL=0]="NULL",e[e.EQUATION_GEN=1]="EQUATION_GEN",e[e.WEBHOOK=2]="WEBHOOK",e[e.VIDEOCALL=3]="VIDEOCALL"}(a=t.Pages||(t.Pages={})),t.showcaseReducer=function(e,t){switch(void 0===e&&(e={page:NaN,equation:"",socket:(0,s.io)(u.default.serverUrl),setupDone:!1,requests:[],spinner:0}),t.type){case"showcase/equation_gen":return r(r({},e),{page:a.EQUATION_GEN});case"showcase/webhook":return r(r({},e),{page:a.WEBHOOK});case"showcase/videocall":return r(r({},e),{page:a.VIDEOCALL});case"showcase/decrement":return r(r({},e),{page:e.page-1||1});case"showcase/increment":return r(r({},e),{page:e.page+1>=Object.keys(a).length/2-1?Object.keys(a).length/2-1:e.page+1});case"showcase/equation_rendr":return r(r({},e),{equation:t.payload||"[Error, nothing to render!]"});case"showcase/socket_setup":return r(r({},e),{setupDone:!0});case"showcase/append_requests":return r(r({},e),{requests:o(o([],e.requests,!0),[t.payload],!1)});case"showcase/spin":return r(r({},e),{spinner:e.spinner+1>3?0:e.spinner+1});default:return e}}},2281:e=>{"use strict";var t,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),r={},o=0,i=0;function a(e){var t="";do{t=n[e%64]+t,e=Math.floor(e/64)}while(e>0);return t}function s(){var e=a(+new Date);return e!==t?(o=0,t=e):e+"."+a(o++)}for(;i<64;i++)r[n[i]]=i;s.encode=a,s.decode=function(e){var t=0;for(i=0;i<e.length;i++)t=64*t+r[e.charAt(i)];return t},e.exports=s},6242:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},4679:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.installTimerFunctions=t.transports=t.Transport=t.protocol=t.Socket=void 0;const r=n(3481);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return r.Socket}}),t.protocol=r.Socket.protocol;var o=n(9870);Object.defineProperty(t,"Transport",{enumerable:!0,get:function(){return o.Transport}});var i=n(7385);Object.defineProperty(t,"transports",{enumerable:!0,get:function(){return i.transports}});var a=n(9622);Object.defineProperty(t,"installTimerFunctions",{enumerable:!0,get:function(){return a.installTimerFunctions}})},3481:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const o=n(7385),i=n(9622),a=r(n(1830)),s=r(n(4187)),u=r(n(4802)),l=n(3063),c=n(1373),f=(0,u.default)("engine.io-client:socket");class d extends l.Emitter{constructor(e,t={}){super(),e&&"object"==typeof e&&(t=e,e=null),e?(e=(0,s.default)(e),t.hostname=e.host,t.secure="https"===e.protocol||"wss"===e.protocol,t.port=e.port,e.query&&(t.query=e.query)):t.host&&(t.hostname=(0,s.default)(t.host).host),(0,i.installTimerFunctions)(this,t),this.secure=null!=t.secure?t.secure:"undefined"!=typeof location&&"https:"===location.protocol,t.hostname&&!t.port&&(t.port=this.secure?"443":"80"),this.hostname=t.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=t.port||("undefined"!=typeof location&&location.port?location.port:this.secure?"443":"80"),this.transports=t.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},t),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=a.default.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(e){f('creating transport "%s"',e);const t=function(e){const t={};for(let n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}(this.opts.query);t.EIO=c.protocol,t.transport=e,this.id&&(t.sid=this.id);const n=Object.assign({},this.opts.transportOptions[e],this.opts,{query:t,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return f("options: %j",n),new o.transports[e](n)}open(){let e;if(this.opts.rememberUpgrade&&d.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))e="websocket";else{if(0===this.transports.length)return void this.setTimeoutFn((()=>{this.emitReserved("error","No transports available")}),0);e=this.transports[0]}this.readyState="opening";try{e=this.createTransport(e)}catch(e){return f("error while creating transport: %s",e),this.transports.shift(),void this.open()}e.open(),this.setTransport(e)}setTransport(e){f("setting transport %s",e.name),this.transport&&(f("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=e,e.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(e){f('probing transport "%s"',e);let t=this.createTransport(e),n=!1;d.priorWebsocketSuccess=!1;const r=()=>{n||(f('probe transport "%s" opened',e),t.send([{type:"ping",data:"probe"}]),t.once("packet",(r=>{if(!n)if("pong"===r.type&&"probe"===r.data){if(f('probe transport "%s" pong',e),this.upgrading=!0,this.emitReserved("upgrading",t),!t)return;d.priorWebsocketSuccess="websocket"===t.name,f('pausing current transport "%s"',this.transport.name),this.transport.pause((()=>{n||"closed"!==this.readyState&&(f("changing transport and sending upgrade packet"),l(),this.setTransport(t),t.send([{type:"upgrade"}]),this.emitReserved("upgrade",t),t=null,this.upgrading=!1,this.flush())}))}else{f('probe transport "%s" failed',e);const n=new Error("probe error");n.transport=t.name,this.emitReserved("upgradeError",n)}})))};function o(){n||(n=!0,l(),t.close(),t=null)}const i=n=>{const r=new Error("probe error: "+n);r.transport=t.name,o(),f('probe transport "%s" failed because of error: %s',e,n),this.emitReserved("upgradeError",r)};function a(){i("transport closed")}function s(){i("socket closed")}function u(e){t&&e.name!==t.name&&(f('"%s" works - aborting "%s"',e.name,t.name),o())}const l=()=>{t.removeListener("open",r),t.removeListener("error",i),t.removeListener("close",a),this.off("close",s),this.off("upgrading",u)};t.once("open",r),t.once("error",i),t.once("close",a),this.once("close",s),this.once("upgrading",u),t.open()}onOpen(){if(f("socket open"),this.readyState="open",d.priorWebsocketSuccess="websocket"===this.transport.name,this.emitReserved("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){f("starting upgrade probes");let e=0;const t=this.upgrades.length;for(;e<t;e++)this.probe(this.upgrades[e])}}onPacket(e){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(f('socket receive: type "%s", data "%s"',e.type,e.data),this.emitReserved("packet",e),this.emitReserved("heartbeat"),e.type){case"open":this.onHandshake(JSON.parse(e.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emitReserved("ping"),this.emitReserved("pong");break;case"error":const t=new Error("server error");t.code=e.data,this.onError(t);break;case"message":this.emitReserved("data",e.data),this.emitReserved("message",e.data)}else f('packet received with socket readyState "%s"',this.readyState)}onHandshake(e){this.emitReserved("handshake",e),this.id=e.sid,this.transport.query.sid=e.sid,this.upgrades=this.filterUpgrades(e.upgrades),this.pingInterval=e.pingInterval,this.pingTimeout=e.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){this.clearTimeoutFn(this.pingTimeoutTimer),this.pingTimeoutTimer=this.setTimeoutFn((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emitReserved("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(f("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emitReserved("flush"))}write(e,t,n){return this.sendPacket("message",e,t,n),this}send(e,t,n){return this.sendPacket("message",e,t,n),this}sendPacket(e,t,n,r){if("function"==typeof t&&(r=t,t=void 0),"function"==typeof n&&(r=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const o={type:e,data:t,options:n};this.emitReserved("packetCreate",o),this.writeBuffer.push(o),r&&this.once("flush",r),this.flush()}close(){const e=()=>{this.onClose("forced close"),f("socket closing - telling transport to close"),this.transport.close()},t=()=>{this.off("upgrade",t),this.off("upgradeError",t),e()},n=()=>{this.once("upgrade",t),this.once("upgradeError",t)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():e()})):this.upgrading?n():e()),this}onError(e){f("socket error %j",e),d.priorWebsocketSuccess=!1,this.emitReserved("error",e),this.onClose("transport error",e)}onClose(e,t){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(f('socket close with reason: "%s"',e),this.clearTimeoutFn(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emitReserved("close",e,t),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(e){const t=[];let n=0;const r=e.length;for(;n<r;n++)~this.transports.indexOf(e[n])&&t.push(e[n]);return t}}t.Socket=d,d.protocol=c.protocol},9870:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Transport=void 0;const o=n(1373),i=n(3063),a=n(9622),s=(0,r(n(4802)).default)("engine.io-client:transport");class u extends i.Emitter{constructor(e){super(),this.writable=!1,(0,a.installTimerFunctions)(this,e),this.opts=e,this.query=e.query,this.readyState="",this.socket=e.socket}onError(e,t){const n=new Error(e);return n.type="TransportError",n.description=t,super.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(e){"open"===this.readyState?this.write(e):s("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,super.emit("open")}onData(e){const t=(0,o.decodePacket)(e,this.socket.binaryType);this.onPacket(t)}onPacket(e){super.emit("packet",e)}onClose(){this.readyState="closed",super.emit("close")}}t.Transport=u},7385:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.transports=void 0;const r=n(715),o=n(1308);t.transports={websocket:o.WS,polling:r.XHR}},715:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Request=t.XHR=void 0;const o=r(n(6666)),i=r(n(4802)),a=r(n(6242)),s=n(9622),u=n(3063),l=n(484),c=(0,i.default)("engine.io-client:polling-xhr");function f(){}const d=null!=new o.default({xdomain:!1}).responseType;class p extends l.Polling{constructor(e){if(super(e),"undefined"!=typeof location){const t="https:"===location.protocol;let n=location.port;n||(n=t?"443":"80"),this.xd="undefined"!=typeof location&&e.hostname!==location.hostname||n!==e.port,this.xs=e.secure!==t}const t=e&&e.forceBase64;this.supportsBinary=d&&!t}request(e={}){return Object.assign(e,{xd:this.xd,xs:this.xs},this.opts),new h(this.uri(),e)}doWrite(e,t){const n=this.request({method:"POST",data:e});n.on("success",t),n.on("error",(e=>{this.onError("xhr post error",e)}))}doPoll(){c("xhr poll");const e=this.request();e.on("data",this.onData.bind(this)),e.on("error",(e=>{this.onError("xhr poll error",e)})),this.pollXhr=e}}t.XHR=p;class h extends u.Emitter{constructor(e,t){super(),(0,s.installTimerFunctions)(this,t),this.opts=t,this.method=t.method||"GET",this.uri=e,this.async=!1!==t.async,this.data=void 0!==t.data?t.data:null,this.create()}create(){const e=(0,s.pick)(this.opts,"agent","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");e.xdomain=!!this.opts.xd,e.xscheme=!!this.opts.xs;const t=this.xhr=new o.default(e);try{c("xhr open %s: %s",this.method,this.uri),t.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){t.setDisableHeaderCheck&&t.setDisableHeaderCheck(!0);for(let e in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(e)&&t.setRequestHeader(e,this.opts.extraHeaders[e])}}catch(e){}if("POST"===this.method)try{t.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(e){}try{t.setRequestHeader("Accept","*/*")}catch(e){}"withCredentials"in t&&(t.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(t.timeout=this.opts.requestTimeout),t.onreadystatechange=()=>{4===t.readyState&&(200===t.status||1223===t.status?this.onLoad():this.setTimeoutFn((()=>{this.onError("number"==typeof t.status?t.status:0)}),0))},c("xhr data %s",this.data),t.send(this.data)}catch(e){return void this.setTimeoutFn((()=>{this.onError(e)}),0)}"undefined"!=typeof document&&(this.index=h.requestsCount++,h.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(e){this.emit("data",e),this.onSuccess()}onError(e){this.emit("error",e),this.cleanup(!0)}cleanup(e){if(void 0!==this.xhr&&null!==this.xhr){if(this.xhr.onreadystatechange=f,e)try{this.xhr.abort()}catch(e){}"undefined"!=typeof document&&delete h.requests[this.index],this.xhr=null}}onLoad(){const e=this.xhr.responseText;null!==e&&this.onData(e)}abort(){this.cleanup()}}if(t.Request=h,h.requestsCount=0,h.requests={},"undefined"!=typeof document)if("function"==typeof attachEvent)attachEvent("onunload",m);else if("function"==typeof addEventListener){const e="onpagehide"in a.default?"pagehide":"unload";addEventListener(e,m,!1)}function m(){for(let e in h.requests)h.requests.hasOwnProperty(e)&&h.requests[e].abort()}},484:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Polling=void 0;const o=n(9870),i=r(n(4802)),a=r(n(2281)),s=r(n(1830)),u=n(1373),l=(0,i.default)("engine.io-client:polling");class c extends o.Transport{constructor(){super(...arguments),this.polling=!1}get name(){return"polling"}doOpen(){this.poll()}pause(e){this.readyState="pausing";const t=()=>{l("paused"),this.readyState="paused",e()};if(this.polling||!this.writable){let e=0;this.polling&&(l("we are currently polling - waiting to pause"),e++,this.once("pollComplete",(function(){l("pre-pause polling complete"),--e||t()}))),this.writable||(l("we are currently writing - waiting to pause"),e++,this.once("drain",(function(){l("pre-pause writing complete"),--e||t()})))}else t()}poll(){l("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(e){l("polling got data %s",e),(0,u.decodePayload)(e,this.socket.binaryType).forEach((e=>{if("opening"===this.readyState&&"open"===e.type&&this.onOpen(),"close"===e.type)return this.onClose(),!1;this.onPacket(e)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():l('ignoring poll - transport state "%s"',this.readyState))}doClose(){const e=()=>{l("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(l("transport open - closing"),e()):(l("transport not open - deferring close"),this.once("open",e))}write(e){this.writable=!1,(0,u.encodePayload)(e,(e=>{this.doWrite(e,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let e=this.query||{};const t=this.opts.secure?"https":"http";let n="";!1!==this.opts.timestampRequests&&(e[this.opts.timestampParam]=(0,a.default)()),this.supportsBinary||e.sid||(e.b64=1),this.opts.port&&("https"===t&&443!==Number(this.opts.port)||"http"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port);const r=s.default.encode(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}}t.Polling=c},5552:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.defaultBinaryType=t.usingBrowserWebSocket=t.WebSocket=t.nextTick=void 0;const o=r(n(6242));t.nextTick="function"==typeof Promise&&"function"==typeof Promise.resolve?e=>Promise.resolve().then(e):(e,t)=>t(e,0),t.WebSocket=o.default.WebSocket||o.default.MozWebSocket,t.usingBrowserWebSocket=!0,t.defaultBinaryType="arraybuffer"},1308:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.WS=void 0;const o=n(9870),i=r(n(1830)),a=r(n(2281)),s=n(9622),u=n(5552),l=r(n(4802)),c=n(1373),f=(0,l.default)("engine.io-client:websocket"),d="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class p extends o.Transport{constructor(e){super(e),this.supportsBinary=!e.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const e=this.uri(),t=this.opts.protocols,n=d?{}:(0,s.pick)(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=u.usingBrowserWebSocket&&!d?t?new u.WebSocket(e,t):new u.WebSocket(e):new u.WebSocket(e,t,n)}catch(e){return this.emit("error",e)}this.ws.binaryType=this.socket.binaryType||u.defaultBinaryType,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=e=>this.onData(e.data),this.ws.onerror=e=>this.onError("websocket error",e)}write(e){this.writable=!1;for(let t=0;t<e.length;t++){const n=e[t],r=t===e.length-1;(0,c.encodePacket)(n,this.supportsBinary,(e=>{const t={};!u.usingBrowserWebSocket&&(n.options&&(t.compress=n.options.compress),this.opts.perMessageDeflate)&&("string"==typeof e?Buffer.byteLength(e):e.length)<this.opts.perMessageDeflate.threshold&&(t.compress=!1);try{u.usingBrowserWebSocket?this.ws.send(e):this.ws.send(e,t)}catch(e){f("websocket closed before onclose event")}r&&(0,u.nextTick)((()=>{this.writable=!0,this.emit("drain")}),this.setTimeoutFn)}))}}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let e=this.query||{};const t=this.opts.secure?"wss":"ws";let n="";this.opts.port&&("wss"===t&&443!==Number(this.opts.port)||"ws"===t&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(e[this.opts.timestampParam]=(0,a.default)()),this.supportsBinary||(e.b64=1);const r=i.default.encode(e);return t+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+(r.length?"?"+r:"")}check(){return!(!u.WebSocket||"__initialize"in u.WebSocket&&this.name===p.prototype.name)}}t.WS=p},6666:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const o=r(n(8058)),i=r(n(6242));t.default=function(e){const t=e.xdomain;try{if("undefined"!=typeof XMLHttpRequest&&(!t||o.default))return new XMLHttpRequest}catch(e){}if(!t)try{return new(i.default[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(e){}}},9622:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.installTimerFunctions=t.pick=void 0;const o=r(n(6242));t.pick=function(e,...t){return t.reduce(((t,n)=>(e.hasOwnProperty(n)&&(t[n]=e[n]),t)),{})};const i=setTimeout,a=clearTimeout;t.installTimerFunctions=function(e,t){t.useNativeTimers?(e.setTimeoutFn=i.bind(o.default),e.clearTimeoutFn=a.bind(o.default)):(e.setTimeoutFn=setTimeout.bind(o.default),e.clearTimeoutFn=clearTimeout.bind(o.default))}},3087:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ERROR_PACKET=t.PACKET_TYPES_REVERSE=t.PACKET_TYPES=void 0;const n=Object.create(null);t.PACKET_TYPES=n,n.open="0",n.close="1",n.ping="2",n.pong="3",n.message="4",n.upgrade="5",n.noop="6";const r=Object.create(null);t.PACKET_TYPES_REVERSE=r,Object.keys(n).forEach((e=>{r[n[e]]=e})),t.ERROR_PACKET={type:"error",data:"parser error"}},7572:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3087),o=n(3426),i="function"==typeof ArrayBuffer,a=(e,t)=>{if(i){const n=(0,o.decode)(e);return s(n,t)}return{base64:!0,data:e}},s=(e,t)=>"blob"===t&&e instanceof ArrayBuffer?new Blob([e]):e;t.default=(e,t)=>{if("string"!=typeof e)return{type:"message",data:s(e,t)};const n=e.charAt(0);return"b"===n?{type:"message",data:a(e.substring(1),t)}:r.PACKET_TYPES_REVERSE[n]?e.length>1?{type:r.PACKET_TYPES_REVERSE[n],data:e.substring(1)}:{type:r.PACKET_TYPES_REVERSE[n]}:r.ERROR_PACKET}},3908:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(3087),o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),i="function"==typeof ArrayBuffer,a=(e,t)=>{const n=new FileReader;return n.onload=function(){const e=n.result.split(",")[1];t("b"+e)},n.readAsDataURL(e)};t.default=({type:e,data:t},n,s)=>{return o&&t instanceof Blob?n?s(t):a(t,s):i&&(t instanceof ArrayBuffer||(u=t,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(u):u&&u.buffer instanceof ArrayBuffer))?n?s(t):a(new Blob([t]),s):s(r.PACKET_TYPES[e]+(t||""));var u}},1373:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.decodePayload=t.decodePacket=t.encodePayload=t.encodePacket=t.protocol=void 0;const r=n(3908);t.encodePacket=r.default;const o=n(7572);t.decodePacket=o.default;const i=String.fromCharCode(30);t.encodePayload=(e,t)=>{const n=e.length,o=new Array(n);let a=0;e.forEach(((e,s)=>{(0,r.default)(e,!1,(e=>{o[s]=e,++a===n&&t(o.join(i))}))}))},t.decodePayload=(e,t)=>{const n=e.split(i),r=[];for(let e=0;e<n.length;e++){const i=(0,o.default)(n[e],t);if(r.push(i),"error"===i.type)break}return r},t.protocol=4},7046:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.connect=t.io=t.Socket=t.Manager=t.protocol=void 0;const o=n(3084),i=n(4168);Object.defineProperty(t,"Manager",{enumerable:!0,get:function(){return i.Manager}});const a=n(8312);Object.defineProperty(t,"Socket",{enumerable:!0,get:function(){return a.Socket}});const s=r(n(3669)).default("socket.io-client"),u={};function l(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};const n=o.url(e,t.path||"/socket.io"),r=n.source,a=n.id,l=n.path,c=u[a]&&l in u[a].nsps;let f;return t.forceNew||t["force new connection"]||!1===t.multiplex||c?(s("ignoring socket cache for %s",r),f=new i.Manager(r,t)):(u[a]||(s("new io instance for %s",r),u[a]=new i.Manager(r,t)),f=u[a]),n.query&&!t.query&&(t.query=n.queryKey),f.socket(n.path,t)}t.io=l,t.connect=l,t.default=l,Object.assign(l,{Manager:i.Manager,Socket:a.Socket,io:l,connect:l});var c=n(7116);Object.defineProperty(t,"protocol",{enumerable:!0,get:function(){return c.protocol}}),e.exports=l},4168:function(e,t,n){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),o=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return o(t,e),t},a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Manager=void 0;const s=n(4679),u=n(8312),l=i(n(7116)),c=n(7149),f=a(n(3010)),d=n(3063),p=a(n(3669)).default("socket.io-client:manager");class h extends d.Emitter{constructor(e,t){var n;super(),this.nsps={},this.subs=[],e&&"object"==typeof e&&(t=e,e=void 0),(t=t||{}).path=t.path||"/socket.io",this.opts=t,s.installTimerFunctions(this,t),this.reconnection(!1!==t.reconnection),this.reconnectionAttempts(t.reconnectionAttempts||1/0),this.reconnectionDelay(t.reconnectionDelay||1e3),this.reconnectionDelayMax(t.reconnectionDelayMax||5e3),this.randomizationFactor(null!==(n=t.randomizationFactor)&&void 0!==n?n:.5),this.backoff=new f.default({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==t.timeout?2e4:t.timeout),this._readyState="closed",this.uri=e;const r=t.parser||l;this.encoder=new r.Encoder,this.decoder=new r.Decoder,this._autoConnect=!1!==t.autoConnect,this._autoConnect&&this.open()}reconnection(e){return arguments.length?(this._reconnection=!!e,this):this._reconnection}reconnectionAttempts(e){return void 0===e?this._reconnectionAttempts:(this._reconnectionAttempts=e,this)}reconnectionDelay(e){var t;return void 0===e?this._reconnectionDelay:(this._reconnectionDelay=e,null===(t=this.backoff)||void 0===t||t.setMin(e),this)}randomizationFactor(e){var t;return void 0===e?this._randomizationFactor:(this._randomizationFactor=e,null===(t=this.backoff)||void 0===t||t.setJitter(e),this)}reconnectionDelayMax(e){var t;return void 0===e?this._reconnectionDelayMax:(this._reconnectionDelayMax=e,null===(t=this.backoff)||void 0===t||t.setMax(e),this)}timeout(e){return arguments.length?(this._timeout=e,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(e){if(p("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;p("opening %s",this.uri),this.engine=new s.Socket(this.uri,this.opts);const t=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const r=c.on(t,"open",(function(){n.onopen(),e&&e()})),o=c.on(t,"error",(t=>{p("error"),n.cleanup(),n._readyState="closed",this.emitReserved("error",t),e?e(t):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const e=this._timeout;p("connect attempt will timeout after %d",e),0===e&&r();const n=this.setTimeoutFn((()=>{p("connect attempt timed out after %d",e),r(),t.close(),t.emit("error",new Error("timeout"))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(r),this.subs.push(o),this}connect(e){return this.open(e)}onopen(){p("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const e=this.engine;this.subs.push(c.on(e,"ping",this.onping.bind(this)),c.on(e,"data",this.ondata.bind(this)),c.on(e,"error",this.onerror.bind(this)),c.on(e,"close",this.onclose.bind(this)),c.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(e){this.decoder.add(e)}ondecoded(e){this.emitReserved("packet",e)}onerror(e){p("error",e),this.emitReserved("error",e)}socket(e,t){let n=this.nsps[e];return n||(n=new u.Socket(this,e,t),this.nsps[e]=n),n}_destroy(e){const t=Object.keys(this.nsps);for(const e of t)if(this.nsps[e].active)return void p("socket %s is still active, skipping close",e);this._close()}_packet(e){p("writing packet %j",e);const t=this.encoder.encode(e);for(let n=0;n<t.length;n++)this.engine.write(t[n],e.options)}cleanup(){p("cleanup"),this.subs.forEach((e=>e())),this.subs.length=0,this.decoder.destroy()}_close(){p("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,this.onclose("forced close"),this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(e){p("closed due to %s",e),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",e),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const e=this;if(this.backoff.attempts>=this._reconnectionAttempts)p("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const t=this.backoff.duration();p("will wait %dms before reconnect attempt",t),this._reconnecting=!0;const n=this.setTimeoutFn((()=>{e.skipReconnect||(p("attempting reconnect"),this.emitReserved("reconnect_attempt",e.backoff.attempts),e.skipReconnect||e.open((t=>{t?(p("reconnect attempt error"),e._reconnecting=!1,e.reconnect(),this.emitReserved("reconnect_error",t)):(p("reconnect success"),e.onreconnect())})))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const e=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",e)}}t.Manager=h},7149:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.on=void 0,t.on=function(e,t,n){return e.on(t,n),function(){e.off(t,n)}}},8312:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.Socket=void 0;const o=n(7116),i=n(7149),a=n(3063),s=r(n(3669)).default("socket.io-client:socket"),u=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class l extends a.Emitter{constructor(e,t,n){super(),this.connected=!1,this.disconnected=!0,this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=e,this.nsp=t,n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const e=this.io;this.subs=[i.on(e,"open",this.onopen.bind(this)),i.on(e,"packet",this.onpacket.bind(this)),i.on(e,"error",this.onerror.bind(this)),i.on(e,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...e){return e.unshift("message"),this.emit.apply(this,e),this}emit(e,...t){if(u.hasOwnProperty(e))throw new Error('"'+e+'" is a reserved event name');t.unshift(e);const n={type:o.PacketType.EVENT,data:t,options:{}};if(n.options.compress=!1!==this.flags.compress,"function"==typeof t[t.length-1]){const e=this.ids++;s("emitting packet with ack id %d",e);const r=t.pop();this._registerAckCallback(e,r),n.id=e}const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||r&&this.connected?this.connected?this.packet(n):this.sendBuffer.push(n):s("discard packet as the transport is not currently writable"),this.flags={},this}_registerAckCallback(e,t){const n=this.flags.timeout;if(void 0===n)return void(this.acks[e]=t);const r=this.io.setTimeoutFn((()=>{delete this.acks[e];for(let t=0;t<this.sendBuffer.length;t++)this.sendBuffer[t].id===e&&(s("removing packet with ack id %d from the buffer",e),this.sendBuffer.splice(t,1));s("event with ack id %d has timed out after %d ms",e,n),t.call(this,new Error("operation has timed out"))}),n);this.acks[e]=(...e)=>{this.io.clearTimeoutFn(r),t.apply(this,[null,...e])}}packet(e){e.nsp=this.nsp,this.io._packet(e)}onopen(){s("transport is open - connecting"),"function"==typeof this.auth?this.auth((e=>{this.packet({type:o.PacketType.CONNECT,data:e})})):this.packet({type:o.PacketType.CONNECT,data:this.auth})}onerror(e){this.connected||this.emitReserved("connect_error",e)}onclose(e){s("close (%s)",e),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",e)}onpacket(e){if(e.nsp===this.nsp)switch(e.type){case o.PacketType.CONNECT:if(e.data&&e.data.sid){const t=e.data.sid;this.onconnect(t)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case o.PacketType.EVENT:case o.PacketType.BINARY_EVENT:this.onevent(e);break;case o.PacketType.ACK:case o.PacketType.BINARY_ACK:this.onack(e);break;case o.PacketType.DISCONNECT:this.ondisconnect();break;case o.PacketType.CONNECT_ERROR:this.destroy();const t=new Error(e.data.message);t.data=e.data.data,this.emitReserved("connect_error",t)}}onevent(e){const t=e.data||[];s("emitting event %j",t),null!=e.id&&(s("attaching ack callback to event"),t.push(this.ack(e.id))),this.connected?this.emitEvent(t):this.receiveBuffer.push(Object.freeze(t))}emitEvent(e){if(this._anyListeners&&this._anyListeners.length){const t=this._anyListeners.slice();for(const n of t)n.apply(this,e)}super.emit.apply(this,e)}ack(e){const t=this;let n=!1;return function(...r){n||(n=!0,s("sending ack %j",r),t.packet({type:o.PacketType.ACK,id:e,data:r}))}}onack(e){const t=this.acks[e.id];"function"==typeof t?(s("calling ack %s with %j",e.id,e.data),t.apply(this,e.data),delete this.acks[e.id]):s("bad ack %s",e.id)}onconnect(e){s("socket connected with id %s",e),this.id=e,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((e=>this.emitEvent(e))),this.receiveBuffer=[],this.sendBuffer.forEach((e=>this.packet(e))),this.sendBuffer=[]}ondisconnect(){s("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((e=>e())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(s("performing disconnect (%s)",this.nsp),this.packet({type:o.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(e){return this.flags.compress=e,this}get volatile(){return this.flags.volatile=!0,this}timeout(e){return this.flags.timeout=e,this}onAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(e),this}prependAny(e){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(e),this}offAny(e){if(!this._anyListeners)return this;if(e){const t=this._anyListeners;for(let n=0;n<t.length;n++)if(e===t[n])return t.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}t.Socket=l},3084:function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.url=void 0;const o=r(n(4187)),i=r(n(3669)).default("socket.io-client:url");t.url=function(e,t="",n){let r=e;n=n||"undefined"!=typeof location&&location,null==e&&(e=n.protocol+"//"+n.host),"string"==typeof e&&("/"===e.charAt(0)&&(e="/"===e.charAt(1)?n.protocol+e:n.host+e),/^(https?|wss?):\/\//.test(e)||(i("protocol-less url %s",e),e=void 0!==n?n.protocol+"//"+e:"https://"+e),i("parse %s",e),r=o.default(e)),r.port||(/^(http|ws)$/.test(r.protocol)?r.port="80":/^(http|ws)s$/.test(r.protocol)&&(r.port="443")),r.path=r.path||"/";const a=-1!==r.host.indexOf(":")?"["+r.host+"]":r.host;return r.id=r.protocol+"://"+a+":"+r.port+t,r.href=r.protocol+"://"+a+(n&&n.port===r.port?"":":"+r.port),r}},3155:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.reconstructPacket=t.deconstructPacket=void 0;const r=n(790);function o(e,t){if(!e)return e;if(r.isBinary(e)){const n={_placeholder:!0,num:t.length};return t.push(e),n}if(Array.isArray(e)){const n=new Array(e.length);for(let r=0;r<e.length;r++)n[r]=o(e[r],t);return n}if("object"==typeof e&&!(e instanceof Date)){const n={};for(const r in e)e.hasOwnProperty(r)&&(n[r]=o(e[r],t));return n}return e}function i(e,t){if(!e)return e;if(e&&e._placeholder)return t[e.num];if(Array.isArray(e))for(let n=0;n<e.length;n++)e[n]=i(e[n],t);else if("object"==typeof e)for(const n in e)e.hasOwnProperty(n)&&(e[n]=i(e[n],t));return e}t.deconstructPacket=function(e){const t=[],n=e.data,r=e;return r.data=o(n,t),r.attachments=t.length,{packet:r,buffers:t}},t.reconstructPacket=function(e,t){return e.data=i(e.data,t),e.attachments=void 0,e}},7116:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Decoder=t.Encoder=t.PacketType=t.protocol=void 0;const r=n(3063),o=n(3155),i=n(790),a=n(3669).default("socket.io-parser");var s;t.protocol=5,function(e){e[e.CONNECT=0]="CONNECT",e[e.DISCONNECT=1]="DISCONNECT",e[e.EVENT=2]="EVENT",e[e.ACK=3]="ACK",e[e.CONNECT_ERROR=4]="CONNECT_ERROR",e[e.BINARY_EVENT=5]="BINARY_EVENT",e[e.BINARY_ACK=6]="BINARY_ACK"}(s=t.PacketType||(t.PacketType={})),t.Encoder=class{encode(e){return a("encoding packet %j",e),e.type!==s.EVENT&&e.type!==s.ACK||!i.hasBinary(e)?[this.encodeAsString(e)]:(e.type=e.type===s.EVENT?s.BINARY_EVENT:s.BINARY_ACK,this.encodeAsBinary(e))}encodeAsString(e){let t=""+e.type;return e.type!==s.BINARY_EVENT&&e.type!==s.BINARY_ACK||(t+=e.attachments+"-"),e.nsp&&"/"!==e.nsp&&(t+=e.nsp+","),null!=e.id&&(t+=e.id),null!=e.data&&(t+=JSON.stringify(e.data)),a("encoded %j as %s",e,t),t}encodeAsBinary(e){const t=o.deconstructPacket(e),n=this.encodeAsString(t.packet),r=t.buffers;return r.unshift(n),r}};class u extends r.Emitter{constructor(){super()}add(e){let t;if("string"==typeof e)t=this.decodeString(e),t.type===s.BINARY_EVENT||t.type===s.BINARY_ACK?(this.reconstructor=new l(t),0===t.attachments&&super.emitReserved("decoded",t)):super.emitReserved("decoded",t);else{if(!i.isBinary(e)&&!e.base64)throw new Error("Unknown type: "+e);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");t=this.reconstructor.takeBinaryData(e),t&&(this.reconstructor=null,super.emitReserved("decoded",t))}}decodeString(e){let t=0;const n={type:Number(e.charAt(0))};if(void 0===s[n.type])throw new Error("unknown packet type "+n.type);if(n.type===s.BINARY_EVENT||n.type===s.BINARY_ACK){const r=t+1;for(;"-"!==e.charAt(++t)&&t!=e.length;);const o=e.substring(r,t);if(o!=Number(o)||"-"!==e.charAt(t))throw new Error("Illegal attachments");n.attachments=Number(o)}if("/"===e.charAt(t+1)){const r=t+1;for(;++t&&","!==e.charAt(t)&&t!==e.length;);n.nsp=e.substring(r,t)}else n.nsp="/";const r=e.charAt(t+1);if(""!==r&&Number(r)==r){const r=t+1;for(;++t;){const n=e.charAt(t);if(null==n||Number(n)!=n){--t;break}if(t===e.length)break}n.id=Number(e.substring(r,t+1))}if(e.charAt(++t)){const r=function(e){try{return JSON.parse(e)}catch(e){return!1}}(e.substr(t));if(!u.isPayloadValid(n.type,r))throw new Error("invalid payload");n.data=r}return a("decoded %s as %j",e,n),n}static isPayloadValid(e,t){switch(e){case s.CONNECT:return"object"==typeof t;case s.DISCONNECT:return void 0===t;case s.CONNECT_ERROR:return"string"==typeof t||"object"==typeof t;case s.EVENT:case s.BINARY_EVENT:return Array.isArray(t)&&t.length>0;case s.ACK:case s.BINARY_ACK:return Array.isArray(t)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}t.Decoder=u;class l{constructor(e){this.packet=e,this.buffers=[],this.reconPack=e}takeBinaryData(e){if(this.buffers.push(e),this.buffers.length===this.reconPack.attachments){const e=o.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),e}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},790:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.hasBinary=t.isBinary=void 0;const n="function"==typeof ArrayBuffer,r=Object.prototype.toString,o="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===r.call(Blob),i="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===r.call(File);function a(e){return n&&(e instanceof ArrayBuffer||(e=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(e):e.buffer instanceof ArrayBuffer)(e))||o&&e instanceof Blob||i&&e instanceof File}t.isBinary=a,t.hasBinary=function e(t,n){if(!t||"object"!=typeof t)return!1;if(Array.isArray(t)){for(let n=0,r=t.length;n<r;n++)if(e(t[n]))return!0;return!1}if(a(t))return!0;if(t.toJSON&&"function"==typeof t.toJSON&&1===arguments.length)return e(t.toJSON(),!0);for(const n in t)if(Object.prototype.hasOwnProperty.call(t,n)&&e(t[n]))return!0;return!1}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r].call(i.exports,i,i.exports,n),i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n(1095)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,